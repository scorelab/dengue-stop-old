{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { ScreenContainer } from 'react-native-screens';\nimport createTabNavigator from \"../utils/createTabNavigator\";\nimport BottomTabBar from \"../views/BottomTabBar\";\nimport ResourceSavingScene from \"../views/ResourceSavingScene\";\n\nvar TabNavigationView = function (_React$PureComponent) {\n  _inherits(TabNavigationView, _React$PureComponent);\n\n  function TabNavigationView() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TabNavigationView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TabNavigationView)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      loaded: [_this.props.navigation.state.index]\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_getButtonComponent\", function (_ref) {\n      var route = _ref.route;\n      var descriptors = _this.props.descriptors;\n      var descriptor = descriptors[route.key];\n      var options = descriptor.options;\n\n      if (options.tabBarButtonComponent) {\n        return options.tabBarButtonComponent;\n      }\n\n      return undefined;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderTabBar\", function () {\n      var _this$props = _this.props,\n          _this$props$tabBarCom = _this$props.tabBarComponent,\n          TabBarComponent = _this$props$tabBarCom === void 0 ? BottomTabBar : _this$props$tabBarCom,\n          tabBarOptions = _this$props.tabBarOptions,\n          navigation = _this$props.navigation,\n          screenProps = _this$props.screenProps,\n          getLabelText = _this$props.getLabelText,\n          getAccessibilityLabel = _this$props.getAccessibilityLabel,\n          getAccessibilityRole = _this$props.getAccessibilityRole,\n          getAccessibilityStates = _this$props.getAccessibilityStates,\n          getTestID = _this$props.getTestID,\n          renderIcon = _this$props.renderIcon,\n          onTabPress = _this$props.onTabPress,\n          onTabLongPress = _this$props.onTabLongPress;\n      var descriptors = _this.props.descriptors;\n      var state = _this.props.navigation.state;\n      var route = state.routes[state.index];\n      var descriptor = descriptors[route.key];\n      var options = descriptor.options;\n\n      if (options.tabBarVisible === false) {\n        return null;\n      }\n\n      return React.createElement(TabBarComponent, _extends({}, tabBarOptions, {\n        jumpTo: _this._jumpTo,\n        navigation: navigation,\n        screenProps: screenProps,\n        onTabPress: onTabPress,\n        onTabLongPress: onTabLongPress,\n        getLabelText: getLabelText,\n        getButtonComponent: _this._getButtonComponent,\n        getAccessibilityLabel: getAccessibilityLabel,\n        getAccessibilityRole: getAccessibilityRole,\n        getAccessibilityStates: getAccessibilityStates,\n        getTestID: getTestID,\n        renderIcon: renderIcon\n      }));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_jumpTo\", function (key) {\n      var _this$props2 = _this.props,\n          navigation = _this$props2.navigation,\n          onIndexChange = _this$props2.onIndexChange;\n      var index = navigation.state.routes.findIndex(function (route) {\n        return route.key === key;\n      });\n      onIndexChange(index);\n    });\n\n    return _this;\n  }\n\n  _createClass(TabNavigationView, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          navigation = _this$props3.navigation,\n          renderScene = _this$props3.renderScene,\n          lazy = _this$props3.lazy;\n      var routes = navigation.state.routes;\n      var loaded = this.state.loaded;\n      return React.createElement(View, {\n        style: styles.container\n      }, React.createElement(ScreenContainer, {\n        style: styles.pages\n      }, routes.map(function (route, index) {\n        if (lazy && !loaded.includes(index)) {\n          return null;\n        }\n\n        var isFocused = navigation.state.index === index;\n        return React.createElement(ResourceSavingScene, {\n          key: route.key,\n          style: StyleSheet.absoluteFill,\n          isVisible: isFocused\n        }, renderScene({\n          route: route\n        }));\n      })), this._renderTabBar());\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var index = nextProps.navigation.state.index;\n      return {\n        loaded: prevState.loaded.includes(index) ? prevState.loaded : [].concat(_toConsumableArray(prevState.loaded), [index])\n      };\n    }\n  }]);\n\n  return TabNavigationView;\n}(React.PureComponent);\n\n_defineProperty(TabNavigationView, \"defaultProps\", {\n  lazy: true,\n  getAccessibilityRole: function getAccessibilityRole() {\n    return 'button';\n  },\n  getAccessibilityStates: function getAccessibilityStates(_ref2) {\n    var focused = _ref2.focused;\n    return focused ? ['selected'] : [];\n  }\n});\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  pages: {\n    flex: 1\n  }\n});\nexport default createTabNavigator(TabNavigationView);","map":{"version":3,"sources":["createBottomTabNavigator.tsx"],"names":["TabNavigationView","React","lazy","getAccessibilityRole","getAccessibilityStates","focused","index","nextProps","loaded","prevState","route","descriptors","descriptor","options","tabBarComponent","TabBarComponent","onTabLongPress","state","renderIcon","key","onIndexChange","navigation","routes","styles","container","pages","isFocused","StyleSheet","renderScene","flex","overflow","createTabNavigator"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;AASA,SAAA,eAAA,QAAA,sBAAA;AAEA,OAAA,kBAAA;AAGA,OAAA,YAAA;AACA,OAAA,mBAAA;;IAgCA,iB;;;AAAkE,+BAAA;AAAA;;AAAA;;AAAA;;AAAA,sCAAA,IAAA;AAAA,MAAA,IAAA;AAAA;;AAAA,gJAAA,IAAA;;AAAA,IAAA,eAAA,gCAAA,OAAA,EAsBxD;AACNQ,MAAAA,MAAM,EAAE,CAAC,MAAA,KAAA,CAAA,UAAA,CAAA,KAAA,CAAD,KAAA;AADF,KAtBwD,CAAA;;AAAA,IAAA,eAAA,gCAAA,qBAAA,EA0B1C,gBAA2C;AAAA,UAAxCE,KAAwC,QAAxCA,KAAwC;AAAA,UACvDC,WADuD,GACvC,MAAxB,KAD+D,CACvDA,WADuD;AAE/D,UAAMC,UAAU,GAAGD,WAAW,CAACD,KAAK,CAApC,GAA8B,CAA9B;AACA,UAAMG,OAAO,GAAGD,UAAU,CAA1B,OAAA;;AAEA,UAAIC,OAAO,CAAX,qBAAA,EAAmC;AACjC,eAAOA,OAAO,CAAd,qBAAA;AACD;;AAED,aAAA,SAAA;AAnC8D,KAAA,CAAA;;AAAA,IAAA,eAAA,gCAAA,eAAA,EAsChD,YAAM;AAAA,wBAchB,MAbJ,KADoB;AAAA,8CAElBC,eAFkB;AAAA,UAEDC,eAFC,sCACd,YADc;AAAA,UACd,aADc,eACd,aADc;AAAA,UACd,UADc,eACd,UADc;AAAA,UACd,WADc,eACd,WADc;AAAA,UACd,YADc,eACd,YADc;AAAA,UACd,qBADc,eACd,qBADc;AAAA,UACd,oBADc,eACd,oBADc;AAAA,UACd,sBADc,eACd,sBADc;AAAA,UACd,SADc,eACd,SADc;AAAA,UACd,UADc,eACd,UADc;AAAA,UACd,UADc,eACd,UADc;AAAA,UAalBC,cAbkB,eAalBA,cAbkB;AAAA,UAgBZL,WAhBY,GAgBI,MAAxB,KAhBoB,CAgBZA,WAhBY;AAAA,UAiBZM,KAjBY,GAiBF,MAAA,KAAA,CAAlB,UAjBoB,CAiBZA,KAjBY;AAkBpB,UAAMP,KAAK,GAAGO,KAAK,CAALA,MAAAA,CAAaA,KAAK,CAAhC,KAAcA,CAAd;AACA,UAAML,UAAU,GAAGD,WAAW,CAACD,KAAK,CAApC,GAA8B,CAA9B;AACA,UAAMG,OAAO,GAAGD,UAAU,CAA1B,OAAA;;AAEA,UAAIC,OAAO,CAAPA,aAAAA,KAAJ,KAAA,EAAqC;AACnC,eAAA,IAAA;AACD;;AAED,aACE,KAAA,CAAA,aAAA,CAAA,eAAA,EAAA,QAAA,CAAA,EAAA,EAAA,aAAA,EAAA;AAEE,QAAA,MAAM,EAAE,MAFV,OAAA;AAGE,QAAA,UAAU,EAHZ,UAAA;AAIE,QAAA,WAAW,EAJb,WAAA;AAKE,QAAA,UAAU,EALZ,UAAA;AAME,QAAA,cAAc,EANhB,cAAA;AAOE,QAAA,YAAY,EAPd,YAAA;AAQE,QAAA,kBAAkB,EAAE,MARtB,mBAAA;AASE,QAAA,qBAAqB,EATvB,qBAAA;AAUE,QAAA,oBAAoB,EAVtB,oBAAA;AAWE,QAAA,sBAAsB,EAXxB,sBAAA;AAYE,QAAA,SAAS,EAZX,SAAA;AAaE,QAAA,UAAU,EAAEK;AAbd,OAAA,CAAA,CADF;AAhE8D,KAAA,CAAA;;AAAA,IAAA,eAAA,gCAAA,SAAA,EAmFrDC,UAAAA,GAAD,EAAiB;AAAA,yBACa,MAAtC,KADyB;AAAA,UACnB,UADmB,gBACnB,UADmB;AAAA,UACLC,aADK,gBACLA,aADK;AAGzB,UAAMd,KAAK,GAAGe,UAAU,CAAVA,KAAAA,CAAAA,MAAAA,CAAAA,SAAAA,CAAkCX,UAAAA,KAAK;AAAA,eAAIA,KAAK,CAALA,GAAAA,KAAzD,GAAqD;AAAA,OAAvCW,CAAd;AAEAD,MAAAA,aAAa,CAAbA,KAAa,CAAbA;AAxF8D,KAAA,CAAA;;AAAA;AAAA;;;;6BA2FvD;AAAA,yBACmC,KAA1C,KADO;AAAA,UACD,UADC,gBACD,UADC;AAAA,UACD,WADC,gBACD,WADC;AAAA,UAC0BlB,IAD1B,gBAC0BA,IAD1B;AAAA,UAECoB,MAFD,GAEYD,UAAU,CAA7B,KAFO,CAECC,MAFD;AAAA,UAGCd,MAHD,GAGY,KAAnB,KAHO,CAGCA,MAHD;AAKP,aACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,QAAA,KAAK,EAAEe,MAAM,CAACC;AAApB,OAAA,EACE,KAAA,CAAA,aAAA,CAAA,eAAA,EAAA;AAAiB,QAAA,KAAK,EAAED,MAAM,CAACE;AAA/B,OAAA,EACG,MAAM,CAAN,GAAA,CAAW,UAAA,KAAA,EAAA,KAAA,EAAkB;AAC5B,YAAIvB,IAAI,IAAI,CAACM,MAAM,CAANA,QAAAA,CAAb,KAAaA,CAAb,EAAqC;AAEnC,iBAAA,IAAA;AACD;;AAED,YAAMkB,SAAS,GAAGL,UAAU,CAAVA,KAAAA,CAAAA,KAAAA,KAAlB,KAAA;AAEA,eACE,KAAA,CAAA,aAAA,CAAA,mBAAA,EAAA;AACE,UAAA,GAAG,EAAEX,KAAK,CADZ,GAAA;AAEE,UAAA,KAAK,EAAEiB,UAAU,CAFnB,YAAA;AAGE,UAAA,SAAS,EAAED;AAHb,SAAA,EAKGE,WAAW,CAAC;AAAElB,UAAAA,KAAAA,EAAAA;AAAF,SAAD,CALd,CADF;AAVN,OAEK,CADH,CADF,EAqBG,KAtBL,aAsBK,EArBH,CADF;AAyBD;;;6CA9GD,S,EAAA,S,EAAoE;AAAA,UAC1DJ,KAD0D,GAChDC,SAAS,CAATA,UAAAA,CAAlB,KADkE,CAC1DD,KAD0D;AAGlE,aAAO;AAELE,QAAAA,MAAM,EAAEC,SAAS,CAATA,MAAAA,CAAAA,QAAAA,CAAAA,KAAAA,IACJA,SAAS,CADLA,MAAAA,gCAEAA,SAAS,CAAb,MAFIA,IAEJ,KAFIA;AAFH,OAAP;AAMD;;;;EApB6BR,KAAK,CAArC,a;;gBAAMD,iB,kBACkB;AACpBE,EAAAA,IAAI,EADgB,IAAA;AAEpBC,EAAAA,oBAAoB,EAAE;AAAA,WAFF,QAEE;AAAA,GAFF;AAGpBC,EAAAA,sBAAsB,EAAE;AAAA,QACtBC,OADsB,SACtBA,OADsB;AAAA,WAIMA,OAAO,GAAG,CAAH,UAAG,CAAH,GAAkB,EAJ/B;AAAA;AAHJ,C;;AA2HxB,IAAMkB,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTK,IAAAA,IAAI,EADK,CAAA;AAETC,IAAAA,QAAQ,EAAE;AAFD,GADoB;AAK/BL,EAAAA,KAAK,EAAE;AACLI,IAAAA,IAAI,EAAE;AADD;AALwB,CAAlB,CAAf;AAUA,eAAeE,kBAAkB,CAAjC,iBAAiC,CAAjC","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  AccessibilityRole,\n  AccessibilityStates,\n} from 'react-native';\nimport { NavigationRoute } from 'react-navigation';\n\nimport { ScreenContainer } from 'react-native-screens';\n\nimport createTabNavigator, {\n  NavigationViewProps,\n} from '../utils/createTabNavigator';\nimport BottomTabBar from '../views/BottomTabBar';\nimport ResourceSavingScene from '../views/ResourceSavingScene';\nimport {\n  NavigationTabProp,\n  NavigationBottomTabOptions,\n  BottomTabBarOptions,\n  SceneDescriptorMap,\n} from '../types';\n\ntype Config = {\n  lazy?: boolean;\n  tabBarComponent?: React.ComponentType<any>;\n  tabBarOptions?: BottomTabBarOptions;\n};\n\ntype Props = NavigationViewProps &\n  Config & {\n    getAccessibilityRole: (props: {\n      route: NavigationRoute;\n    }) => AccessibilityRole | undefined;\n    getAccessibilityStates: (props: {\n      route: NavigationRoute;\n      focused: boolean;\n    }) => AccessibilityStates[];\n    navigation: NavigationTabProp;\n    descriptors: SceneDescriptorMap;\n    screenProps?: unknown;\n  };\n\ntype State = {\n  loaded: number[];\n};\n\nclass TabNavigationView extends React.PureComponent<Props, State> {\n  static defaultProps = {\n    lazy: true,\n    getAccessibilityRole: (): AccessibilityRole => 'button',\n    getAccessibilityStates: ({\n      focused,\n    }: {\n      focused: boolean;\n    }): AccessibilityStates[] => (focused ? ['selected'] : []),\n  };\n\n  static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n    const { index } = nextProps.navigation.state;\n\n    return {\n      // Set the current tab to be loaded if it was not loaded before\n      loaded: prevState.loaded.includes(index)\n        ? prevState.loaded\n        : [...prevState.loaded, index],\n    };\n  }\n\n  state = {\n    loaded: [this.props.navigation.state.index],\n  };\n\n  _getButtonComponent = ({ route }: { route: NavigationRoute }) => {\n    const { descriptors } = this.props;\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    if (options.tabBarButtonComponent) {\n      return options.tabBarButtonComponent;\n    }\n\n    return undefined;\n  };\n\n  _renderTabBar = () => {\n    const {\n      tabBarComponent: TabBarComponent = BottomTabBar,\n      tabBarOptions,\n      navigation,\n      screenProps,\n      getLabelText,\n      getAccessibilityLabel,\n      getAccessibilityRole,\n      getAccessibilityStates,\n      getTestID,\n      renderIcon,\n      onTabPress,\n      onTabLongPress,\n    } = this.props;\n\n    const { descriptors } = this.props;\n    const { state } = this.props.navigation;\n    const route = state.routes[state.index];\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    if (options.tabBarVisible === false) {\n      return null;\n    }\n\n    return (\n      <TabBarComponent\n        {...tabBarOptions}\n        jumpTo={this._jumpTo}\n        navigation={navigation}\n        screenProps={screenProps}\n        onTabPress={onTabPress}\n        onTabLongPress={onTabLongPress}\n        getLabelText={getLabelText}\n        getButtonComponent={this._getButtonComponent}\n        getAccessibilityLabel={getAccessibilityLabel}\n        getAccessibilityRole={getAccessibilityRole}\n        getAccessibilityStates={getAccessibilityStates}\n        getTestID={getTestID}\n        renderIcon={renderIcon}\n      />\n    );\n  };\n\n  _jumpTo = (key: string) => {\n    const { navigation, onIndexChange } = this.props;\n\n    const index = navigation.state.routes.findIndex(route => route.key === key);\n\n    onIndexChange(index);\n  };\n\n  render() {\n    const { navigation, renderScene, lazy } = this.props;\n    const { routes } = navigation.state;\n    const { loaded } = this.state;\n\n    return (\n      <View style={styles.container}>\n        <ScreenContainer style={styles.pages}>\n          {routes.map((route, index) => {\n            if (lazy && !loaded.includes(index)) {\n              // Don't render a screen if we've never navigated to it\n              return null;\n            }\n\n            const isFocused = navigation.state.index === index;\n\n            return (\n              <ResourceSavingScene\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                isVisible={isFocused}\n              >\n                {renderScene({ route })}\n              </ResourceSavingScene>\n            );\n          })}\n        </ScreenContainer>\n        {this._renderTabBar()}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  pages: {\n    flex: 1,\n  },\n});\n\nexport default createTabNavigator<Config, NavigationBottomTabOptions, Props>(\n  TabNavigationView\n);\n"]},"metadata":{},"sourceType":"module"}