{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/satya/Workspace/Projects/react-native-tab-view/src/TabBar.tsx\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Animated from 'react-native-reanimated';\nimport TabBarItem from \"./TabBarItem\";\nimport TabBarIndicator from \"./TabBarIndicator\";\nimport memoize from \"./memoize\";\n\nvar TabBar = function (_React$Component) {\n  _inherits(TabBar, _React$Component);\n\n  function TabBar() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TabBar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TabBar)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      layout: {\n        width: 0,\n        height: 0\n      },\n      tabWidths: {}\n    };\n    _this.measuredTabWidths = {};\n    _this.scrollAmount = new Animated.Value(0);\n\n    _this.getFlattenedTabWidth = function (style) {\n      var tabStyle = StyleSheet.flatten(style);\n      return tabStyle ? tabStyle.width : undefined;\n    };\n\n    _this.getComputedTabWidth = function (index, layout, routes, scrollEnabled, tabWidths, flattenedWidth) {\n      if (flattenedWidth === 'auto') {\n        return tabWidths[routes[index].key] || 0;\n      }\n\n      switch (typeof flattenedWidth) {\n        case 'number':\n          return flattenedWidth;\n\n        case 'string':\n          if (flattenedWidth.endsWith('%')) {\n            var width = parseFloat(flattenedWidth);\n\n            if (Number.isFinite(width)) {\n              return layout.width * (width / 100);\n            }\n          }\n\n      }\n\n      if (scrollEnabled) {\n        return layout.width / 5 * 2;\n      }\n\n      return layout.width / routes.length;\n    };\n\n    _this.getMemoizedTabWidthGettter = memoize(function (layout, routes, scrollEnabled, tabWidths, flattenedWidth) {\n      return function (i) {\n        return _this.getComputedTabWidth(i, layout, routes, scrollEnabled, tabWidths, flattenedWidth);\n      };\n    });\n\n    _this.getMaxScrollDistance = function (tabBarWidth, layoutWidth) {\n      return tabBarWidth - layoutWidth;\n    };\n\n    _this.getTabBarWidth = function (props, state) {\n      var layout = state.layout,\n          tabWidths = state.tabWidths;\n      var scrollEnabled = props.scrollEnabled,\n          tabStyle = props.tabStyle;\n      var routes = props.navigationState.routes;\n      return routes.reduce(function (acc, _, i) {\n        return acc + _this.getComputedTabWidth(i, layout, routes, scrollEnabled, tabWidths, _this.getFlattenedTabWidth(tabStyle));\n      }, 0);\n    };\n\n    _this.normalizeScrollValue = function (props, state, value) {\n      var layout = state.layout;\n\n      var tabBarWidth = _this.getTabBarWidth(props, state);\n\n      var maxDistance = _this.getMaxScrollDistance(tabBarWidth, layout.width);\n\n      var scrollValue = Math.max(Math.min(value, maxDistance), 0);\n\n      if (Platform.OS === 'android' && I18nManager.isRTL) {\n        return maxDistance - scrollValue;\n      }\n\n      return scrollValue;\n    };\n\n    _this.getScrollAmount = function (props, state, index) {\n      var layout = state.layout,\n          tabWidths = state.tabWidths;\n      var scrollEnabled = props.scrollEnabled,\n          tabStyle = props.tabStyle;\n      var routes = props.navigationState.routes;\n      var centerDistance = Array.from({\n        length: index + 1\n      }).reduce(function (total, _, i) {\n        var tabWidth = _this.getComputedTabWidth(i, layout, routes, scrollEnabled, tabWidths, _this.getFlattenedTabWidth(tabStyle));\n\n        return total + (index === i ? tabWidth / 2 : tabWidth);\n      }, 0);\n      var scrollAmount = centerDistance - layout.width / 2;\n      return _this.normalizeScrollValue(props, state, scrollAmount);\n    };\n\n    _this.resetScroll = function (index) {\n      if (_this.props.scrollEnabled) {\n        _this.scrollView && _this.scrollView.scrollTo({\n          x: _this.getScrollAmount(_this.props, _this.state, index),\n          animated: true\n        });\n      }\n    };\n\n    _this.handleLayout = function (e) {\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n          height = _e$nativeEvent$layout.height,\n          width = _e$nativeEvent$layout.width;\n\n      if (_this.state.layout.width === width && _this.state.layout.height === height) {\n        return;\n      }\n\n      requestAnimationFrame(function () {\n        return requestAnimationFrame(function () {\n          return _this.setState({\n            layout: {\n              height: height,\n              width: width\n            }\n          });\n        });\n      });\n    };\n\n    _this.getTranslateX = memoize(function (scrollAmount, maxScrollDistance) {\n      return Animated.multiply(Platform.OS === 'android' && I18nManager.isRTL ? Animated.sub(maxScrollDistance, scrollAmount) : scrollAmount, I18nManager.isRTL ? 1 : -1);\n    });\n    return _this;\n  }\n\n  _createClass(TabBar, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var navigationState = this.props.navigationState;\n      var _this$state = this.state,\n          layout = _this$state.layout,\n          tabWidths = _this$state.tabWidths;\n\n      if (prevProps.navigationState.routes.length !== navigationState.routes.length || prevProps.navigationState.index !== navigationState.index || prevState.layout.width !== layout.width || prevState.tabWidths !== tabWidths) {\n        if (this.getFlattenedTabWidth(this.props.tabStyle) === 'auto' && !(layout.width && navigationState.routes.every(function (r) {\n          return typeof tabWidths[r.key] === 'number';\n        }))) {\n          return;\n        }\n\n        this.resetScroll(navigationState.index);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          position = _this$props.position,\n          navigationState = _this$props.navigationState,\n          jumpTo = _this$props.jumpTo,\n          scrollEnabled = _this$props.scrollEnabled,\n          bounces = _this$props.bounces,\n          getAccessibilityLabel = _this$props.getAccessibilityLabel,\n          getAccessible = _this$props.getAccessible,\n          getLabelText = _this$props.getLabelText,\n          getTestID = _this$props.getTestID,\n          renderBadge = _this$props.renderBadge,\n          renderIcon = _this$props.renderIcon,\n          renderLabel = _this$props.renderLabel,\n          activeColor = _this$props.activeColor,\n          inactiveColor = _this$props.inactiveColor,\n          pressColor = _this$props.pressColor,\n          pressOpacity = _this$props.pressOpacity,\n          onTabPress = _this$props.onTabPress,\n          onTabLongPress = _this$props.onTabLongPress,\n          tabStyle = _this$props.tabStyle,\n          labelStyle = _this$props.labelStyle,\n          indicatorStyle = _this$props.indicatorStyle,\n          contentContainerStyle = _this$props.contentContainerStyle,\n          style = _this$props.style,\n          indicatorContainerStyle = _this$props.indicatorContainerStyle;\n      var _this$state2 = this.state,\n          layout = _this$state2.layout,\n          tabWidths = _this$state2.tabWidths;\n      var routes = navigationState.routes;\n      var isWidthDynamic = this.getFlattenedTabWidth(tabStyle) === 'auto';\n      var tabBarWidth = this.getTabBarWidth(this.props, this.state);\n      var tabBarWidthPercent = routes.length * 40 + \"%\";\n      var translateX = this.getTranslateX(this.scrollAmount, this.getMaxScrollDistance(tabBarWidth, layout.width));\n      return React.createElement(Animated.View, {\n        onLayout: this.handleLayout,\n        style: [styles.tabBar, style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338\n        }\n      }, React.createElement(Animated.View, {\n        pointerEvents: \"none\",\n        style: [styles.indicatorContainer, scrollEnabled ? {\n          transform: [{\n            translateX: translateX\n          }]\n        } : null, tabBarWidth ? {\n          width: tabBarWidth\n        } : scrollEnabled ? {\n          width: tabBarWidthPercent\n        } : null, indicatorContainerStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342\n        }\n      }, this.props.renderIndicator({\n        position: position,\n        layout: layout,\n        navigationState: navigationState,\n        jumpTo: jumpTo,\n        width: isWidthDynamic ? 'auto' : 100 / routes.length + \"%\",\n        style: indicatorStyle,\n        getTabWidth: this.getMemoizedTabWidthGettter(layout, routes, scrollEnabled, tabWidths, this.getFlattenedTabWidth(tabStyle))\n      })), React.createElement(View, {\n        style: styles.scroll,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371\n        }\n      }, React.createElement(Animated.ScrollView, {\n        horizontal: true,\n        accessibilityRole: \"tablist\",\n        keyboardShouldPersistTaps: \"handled\",\n        scrollEnabled: scrollEnabled,\n        bounces: bounces,\n        alwaysBounceHorizontal: false,\n        scrollsToTop: false,\n        showsHorizontalScrollIndicator: false,\n        automaticallyAdjustContentInsets: false,\n        overScrollMode: \"never\",\n        contentContainerStyle: [styles.tabContent, scrollEnabled ? {\n          width: tabBarWidth || tabBarWidthPercent\n        } : styles.container, contentContainerStyle],\n        scrollEventThrottle: 16,\n        onScroll: Animated.event([{\n          nativeEvent: {\n            contentOffset: {\n              x: this.scrollAmount\n            }\n          }\n        }]),\n        ref: function ref(el) {\n          _this2.scrollView = el == null ? void 0 : el.getNode();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 372\n        }\n      }, routes.map(function (route) {\n        return React.createElement(TabBarItem, {\n          onLayout: isWidthDynamic ? function (e) {\n            _this2.measuredTabWidths[route.key] = e.nativeEvent.layout.width;\n\n            if (routes.every(function (r) {\n              return typeof _this2.measuredTabWidths[r.key] === 'number';\n            })) {\n              _this2.setState({\n                tabWidths: _objectSpread({}, _this2.measuredTabWidths)\n              });\n            }\n          } : undefined,\n          key: route.key,\n          position: position,\n          route: route,\n          navigationState: navigationState,\n          getAccessibilityLabel: getAccessibilityLabel,\n          getAccessible: getAccessible,\n          getLabelText: getLabelText,\n          getTestID: getTestID,\n          renderBadge: renderBadge,\n          renderIcon: renderIcon,\n          renderLabel: renderLabel,\n          activeColor: activeColor,\n          inactiveColor: inactiveColor,\n          pressColor: pressColor,\n          pressOpacity: pressOpacity,\n          onPress: function onPress() {\n            var event = {\n              route: route,\n              defaultPrevented: false,\n              preventDefault: function preventDefault() {\n                event.defaultPrevented = true;\n              }\n            };\n            onTabPress == null ? void 0 : onTabPress(event);\n\n            if (event.defaultPrevented) {\n              return;\n            }\n\n            _this2.props.jumpTo(route.key);\n          },\n          onLongPress: function onLongPress() {\n            return onTabLongPress == null ? void 0 : onTabLongPress({\n              route: route\n            });\n          },\n          labelStyle: labelStyle,\n          style: tabStyle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 404\n          }\n        });\n      }))));\n    }\n  }]);\n\n  return TabBar;\n}(React.Component);\n\nTabBar.defaultProps = {\n  getLabelText: function getLabelText(_ref) {\n    var route = _ref.route;\n    return typeof route.title === 'string' ? route.title.toUpperCase() : route.title;\n  },\n  getAccessible: function getAccessible(_ref2) {\n    var route = _ref2.route;\n    return typeof route.accessible !== 'undefined' ? route.accessible : true;\n  },\n  getAccessibilityLabel: function getAccessibilityLabel(_ref3) {\n    var route = _ref3.route;\n    return typeof route.accessibilityLabel === 'string' ? route.accessibilityLabel : typeof route.title === 'string' ? route.title : undefined;\n  },\n  getTestID: function getTestID(_ref4) {\n    var route = _ref4.route;\n    return route.testID;\n  },\n  renderIndicator: function renderIndicator(props) {\n    return React.createElement(TabBarIndicator, _extends({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      }\n    }));\n  }\n};\nexport { TabBar as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  scroll: {\n    overflow: 'scroll'\n  },\n  tabBar: {\n    backgroundColor: '#2196f3',\n    elevation: 4,\n    shadowColor: 'black',\n    shadowOpacity: 0.1,\n    shadowRadius: StyleSheet.hairlineWidth,\n    shadowOffset: {\n      height: StyleSheet.hairlineWidth,\n      width: 0\n    },\n    zIndex: 1\n  },\n  tabContent: {\n    flexDirection: 'row',\n    flexWrap: 'nowrap'\n  },\n  indicatorContainer: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  }\n});","map":{"version":3,"sources":["TabBar.tsx"],"names":["TabBar","React","Component","defaultProps","getLabelText","route","getAccessible","getAccessibilityLabel","getTestID","renderIndicator","state","layout","width","height","tabWidths","prevProps","prevState","navigationState","r","measuredTabWidths","scrollAmount","Animated","getFlattenedTabWidth","tabStyle","StyleSheet","getComputedTabWidth","flattenedWidth","routes","parseFloat","Number","getMemoizedTabWidthGettter","memoize","getMaxScrollDistance","tabBarWidth","getTabBarWidth","scrollEnabled","props","acc","normalizeScrollValue","maxDistance","scrollValue","Math","Platform","I18nManager","getScrollAmount","centerDistance","Array","length","index","tabWidth","total","resetScroll","x","animated","handleLayout","e","requestAnimationFrame","getTranslateX","position","jumpTo","bounces","renderBadge","renderIcon","renderLabel","activeColor","inactiveColor","pressColor","pressOpacity","onTabPress","onTabLongPress","labelStyle","indicatorStyle","contentContainerStyle","style","indicatorContainerStyle","isWidthDynamic","tabBarWidthPercent","translateX","styles","transform","getTabWidth","nativeEvent","contentOffset","el","event","defaultPrevented","preventDefault","container","flex","scroll","overflow","tabBar","backgroundColor","elevation","shadowColor","shadowOpacity","shadowRadius","shadowOffset","zIndex","tabContent","flexDirection","flexWrap","indicatorContainer","top","left","right","bottom"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  View,\n  ScrollView,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n  LayoutChangeEvent,\n  I18nManager,\n  Platform,\n} from 'react-native';\nimport Animated from 'react-native-reanimated';\nimport TabBarItem from './TabBarItem';\nimport TabBarIndicator, { Props as IndicatorProps } from './TabBarIndicator';\nimport memoize from './memoize';\nimport {\n  Route,\n  Scene,\n  SceneRendererProps,\n  NavigationState,\n  Layout,\n  Event,\n} from './types';\n\nexport type Props<T extends Route> = SceneRendererProps & {\n  navigationState: NavigationState<T>;\n  scrollEnabled?: boolean;\n  bounces?: boolean;\n  activeColor?: string;\n  inactiveColor?: string;\n  pressColor?: string;\n  pressOpacity?: number;\n  getLabelText: (scene: Scene<T>) => string | undefined;\n  getAccessible: (scene: Scene<T>) => boolean | undefined;\n  getAccessibilityLabel: (scene: Scene<T>) => string | undefined;\n  getTestID: (scene: Scene<T>) => string | undefined;\n  renderLabel?: (\n    scene: Scene<T> & {\n      focused: boolean;\n      color: string;\n    }\n  ) => React.ReactNode;\n  renderIcon?: (\n    scene: Scene<T> & {\n      focused: boolean;\n      color: string;\n    }\n  ) => React.ReactNode;\n  renderBadge?: (scene: Scene<T>) => React.ReactNode;\n  renderIndicator: (props: IndicatorProps<T>) => React.ReactNode;\n  onTabPress?: (scene: Scene<T> & Event) => void;\n  onTabLongPress?: (scene: Scene<T>) => void;\n  tabStyle?: StyleProp<ViewStyle>;\n  indicatorStyle?: StyleProp<ViewStyle>;\n  indicatorContainerStyle?: StyleProp<ViewStyle>;\n  labelStyle?: StyleProp<TextStyle>;\n  contentContainerStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n};\n\ntype State = {\n  layout: Layout;\n  tabWidths: { [key: string]: number };\n};\n\nexport default class TabBar<T extends Route> extends React.Component<\n  Props<T>,\n  State\n> {\n  static defaultProps = {\n    getLabelText: ({ route }: Scene<Route>) =>\n      typeof route.title === 'string' ? route.title.toUpperCase() : route.title,\n    getAccessible: ({ route }: Scene<Route>) =>\n      typeof route.accessible !== 'undefined' ? route.accessible : true,\n    getAccessibilityLabel: ({ route }: Scene<Route>) =>\n      typeof route.accessibilityLabel === 'string'\n        ? route.accessibilityLabel\n        : typeof route.title === 'string'\n        ? route.title\n        : undefined,\n    getTestID: ({ route }: Scene<Route>) => route.testID,\n    renderIndicator: (props: IndicatorProps<Route>) => (\n      <TabBarIndicator {...props} />\n    ),\n  };\n\n  state: State = {\n    layout: { width: 0, height: 0 },\n    tabWidths: {},\n  };\n\n  componentDidUpdate(prevProps: Props<T>, prevState: State) {\n    const { navigationState } = this.props;\n    const { layout, tabWidths } = this.state;\n\n    if (\n      prevProps.navigationState.routes.length !==\n        navigationState.routes.length ||\n      prevProps.navigationState.index !== navigationState.index ||\n      prevState.layout.width !== layout.width ||\n      prevState.tabWidths !== tabWidths\n    ) {\n      if (\n        this.getFlattenedTabWidth(this.props.tabStyle) === 'auto' &&\n        !(\n          layout.width &&\n          navigationState.routes.every(\n            r => typeof tabWidths[r.key] === 'number'\n          )\n        )\n      ) {\n        // When tab width is dynamic, only adjust the scroll once we have all tab widths and layout\n        return;\n      }\n\n      this.resetScroll(navigationState.index);\n    }\n  }\n\n  // to store the layout.width of each tab\n  // when all onLayout's are fired, this would be set in state\n  private measuredTabWidths: { [key: string]: number } = {};\n\n  private scrollAmount = new Animated.Value(0);\n\n  private scrollView: ScrollView | undefined;\n\n  private getFlattenedTabWidth = (style: StyleProp<ViewStyle>) => {\n    const tabStyle = StyleSheet.flatten(style);\n\n    return tabStyle ? tabStyle.width : undefined;\n  };\n\n  private getComputedTabWidth = (\n    index: number,\n    layout: Layout,\n    routes: Route[],\n    scrollEnabled: boolean | undefined,\n    tabWidths: { [key: string]: number },\n    flattenedWidth: string | number | undefined\n  ) => {\n    if (flattenedWidth === 'auto') {\n      return tabWidths[routes[index].key] || 0;\n    }\n\n    switch (typeof flattenedWidth) {\n      case 'number':\n        return flattenedWidth;\n      case 'string':\n        if (flattenedWidth.endsWith('%')) {\n          const width = parseFloat(flattenedWidth);\n          if (Number.isFinite(width)) {\n            return layout.width * (width / 100);\n          }\n        }\n    }\n\n    if (scrollEnabled) {\n      return (layout.width / 5) * 2;\n    }\n\n    return layout.width / routes.length;\n  };\n\n  private getMemoizedTabWidthGettter = memoize(\n    (\n      layout: Layout,\n      routes: Route[],\n      scrollEnabled: boolean | undefined,\n      tabWidths: { [key: string]: number },\n      flattenedWidth: string | number | undefined\n    ) => (i: number) =>\n      this.getComputedTabWidth(\n        i,\n        layout,\n        routes,\n        scrollEnabled,\n        tabWidths,\n        flattenedWidth\n      )\n  );\n\n  private getMaxScrollDistance = (tabBarWidth: number, layoutWidth: number) =>\n    tabBarWidth - layoutWidth;\n\n  private getTabBarWidth = (props: Props<T>, state: State) => {\n    const { layout, tabWidths } = state;\n    const { scrollEnabled, tabStyle } = props;\n    const { routes } = props.navigationState;\n\n    return routes.reduce<number>(\n      (acc, _, i) =>\n        acc +\n        this.getComputedTabWidth(\n          i,\n          layout,\n          routes,\n          scrollEnabled,\n          tabWidths,\n          this.getFlattenedTabWidth(tabStyle)\n        ),\n      0\n    );\n  };\n\n  private normalizeScrollValue = (\n    props: Props<T>,\n    state: State,\n    value: number\n  ) => {\n    const { layout } = state;\n    const tabBarWidth = this.getTabBarWidth(props, state);\n    const maxDistance = this.getMaxScrollDistance(tabBarWidth, layout.width);\n    const scrollValue = Math.max(Math.min(value, maxDistance), 0);\n\n    if (Platform.OS === 'android' && I18nManager.isRTL) {\n      // On Android, scroll value is not applied in reverse in RTL\n      // so we need to manually adjust it to apply correct value\n      return maxDistance - scrollValue;\n    }\n\n    return scrollValue;\n  };\n\n  private getScrollAmount = (props: Props<T>, state: State, index: number) => {\n    const { layout, tabWidths } = state;\n    const { scrollEnabled, tabStyle } = props;\n    const { routes } = props.navigationState;\n\n    const centerDistance = Array.from({ length: index + 1 }).reduce<number>(\n      (total, _, i) => {\n        const tabWidth = this.getComputedTabWidth(\n          i,\n          layout,\n          routes,\n          scrollEnabled,\n          tabWidths,\n          this.getFlattenedTabWidth(tabStyle)\n        );\n\n        // To get the current index centered we adjust scroll amount by width of indexes\n        // 0 through (i - 1) and add half the width of current index i\n        return total + (index === i ? tabWidth / 2 : tabWidth);\n      },\n      0\n    );\n\n    const scrollAmount = centerDistance - layout.width / 2;\n\n    return this.normalizeScrollValue(props, state, scrollAmount);\n  };\n\n  private resetScroll = (index: number) => {\n    if (this.props.scrollEnabled) {\n      this.scrollView &&\n        this.scrollView.scrollTo({\n          x: this.getScrollAmount(this.props, this.state, index),\n          animated: true,\n        });\n    }\n  };\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    if (\n      this.state.layout.width === width &&\n      this.state.layout.height === height\n    ) {\n      return;\n    }\n\n    // If we don't delay this state update, the UI gets stuck in weird state\n    // Maybe an issue in Reanimated?\n    // https://github.com/react-native-community/react-native-tab-view/issues/877\n    requestAnimationFrame(() =>\n      requestAnimationFrame(() =>\n        this.setState({\n          layout: {\n            height,\n            width,\n          },\n        })\n      )\n    );\n  };\n\n  private getTranslateX = memoize(\n    (scrollAmount: Animated.Node<number>, maxScrollDistance: number) =>\n      Animated.multiply(\n        Platform.OS === 'android' && I18nManager.isRTL\n          ? Animated.sub(maxScrollDistance, scrollAmount)\n          : scrollAmount,\n        I18nManager.isRTL ? 1 : -1\n      )\n  );\n\n  render() {\n    const {\n      position,\n      navigationState,\n      jumpTo,\n      scrollEnabled,\n      bounces,\n      getAccessibilityLabel,\n      getAccessible,\n      getLabelText,\n      getTestID,\n      renderBadge,\n      renderIcon,\n      renderLabel,\n      activeColor,\n      inactiveColor,\n      pressColor,\n      pressOpacity,\n      onTabPress,\n      onTabLongPress,\n      tabStyle,\n      labelStyle,\n      indicatorStyle,\n      contentContainerStyle,\n      style,\n      indicatorContainerStyle,\n    } = this.props;\n    const { layout, tabWidths } = this.state;\n    const { routes } = navigationState;\n\n    const isWidthDynamic = this.getFlattenedTabWidth(tabStyle) === 'auto';\n    const tabBarWidth = this.getTabBarWidth(this.props, this.state);\n    const tabBarWidthPercent = `${routes.length * 40}%`;\n    const translateX = this.getTranslateX(\n      this.scrollAmount,\n      this.getMaxScrollDistance(tabBarWidth, layout.width)\n    );\n\n    return (\n      <Animated.View\n        onLayout={this.handleLayout}\n        style={[styles.tabBar, style]}\n      >\n        <Animated.View\n          pointerEvents=\"none\"\n          style={[\n            styles.indicatorContainer,\n            scrollEnabled ? { transform: [{ translateX }] as any } : null,\n            tabBarWidth\n              ? { width: tabBarWidth }\n              : scrollEnabled\n              ? { width: tabBarWidthPercent }\n              : null,\n            indicatorContainerStyle,\n          ]}\n        >\n          {this.props.renderIndicator({\n            position,\n            layout,\n            navigationState,\n            jumpTo,\n            width: isWidthDynamic ? 'auto' : `${100 / routes.length}%`,\n            style: indicatorStyle,\n            getTabWidth: this.getMemoizedTabWidthGettter(\n              layout,\n              routes,\n              scrollEnabled,\n              tabWidths,\n              this.getFlattenedTabWidth(tabStyle)\n            ),\n          })}\n        </Animated.View>\n        <View style={styles.scroll}>\n          <Animated.ScrollView\n            horizontal\n            accessibilityRole=\"tablist\"\n            keyboardShouldPersistTaps=\"handled\"\n            scrollEnabled={scrollEnabled}\n            bounces={bounces}\n            alwaysBounceHorizontal={false}\n            scrollsToTop={false}\n            showsHorizontalScrollIndicator={false}\n            automaticallyAdjustContentInsets={false}\n            overScrollMode=\"never\"\n            contentContainerStyle={[\n              styles.tabContent,\n              scrollEnabled\n                ? { width: tabBarWidth || tabBarWidthPercent }\n                : styles.container,\n              contentContainerStyle,\n            ]}\n            scrollEventThrottle={16}\n            onScroll={Animated.event([\n              {\n                nativeEvent: {\n                  contentOffset: { x: this.scrollAmount },\n                },\n              },\n            ])}\n            ref={el => {\n              // @ts-ignore\n              this.scrollView = el?.getNode();\n            }}\n          >\n            {routes.map((route: T) => (\n              <TabBarItem\n                onLayout={\n                  isWidthDynamic\n                    ? e => {\n                        this.measuredTabWidths[route.key] =\n                          e.nativeEvent.layout.width;\n\n                        // When we have measured widths for all of the tabs, we should updates the state\n                        // We avoid doing separate setState for each layout since it triggers multiple renders and slows down app\n                        if (\n                          routes.every(\n                            r =>\n                              typeof this.measuredTabWidths[r.key] === 'number'\n                          )\n                        ) {\n                          this.setState({\n                            tabWidths: { ...this.measuredTabWidths },\n                          });\n                        }\n                      }\n                    : undefined\n                }\n                key={route.key}\n                position={position}\n                route={route}\n                navigationState={navigationState}\n                getAccessibilityLabel={getAccessibilityLabel}\n                getAccessible={getAccessible}\n                getLabelText={getLabelText}\n                getTestID={getTestID}\n                renderBadge={renderBadge}\n                renderIcon={renderIcon}\n                renderLabel={renderLabel}\n                activeColor={activeColor}\n                inactiveColor={inactiveColor}\n                pressColor={pressColor}\n                pressOpacity={pressOpacity}\n                onPress={() => {\n                  const event: Scene<T> & Event = {\n                    route,\n                    defaultPrevented: false,\n                    preventDefault: () => {\n                      event.defaultPrevented = true;\n                    },\n                  };\n\n                  onTabPress?.(event);\n\n                  if (event.defaultPrevented) {\n                    return;\n                  }\n\n                  this.props.jumpTo(route.key);\n                }}\n                onLongPress={() => onTabLongPress?.({ route })}\n                labelStyle={labelStyle}\n                style={tabStyle}\n              />\n            ))}\n          </Animated.ScrollView>\n        </View>\n      </Animated.View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  scroll: {\n    overflow: 'scroll',\n  },\n  tabBar: {\n    backgroundColor: '#2196f3',\n    elevation: 4,\n    shadowColor: 'black',\n    shadowOpacity: 0.1,\n    shadowRadius: StyleSheet.hairlineWidth,\n    shadowOffset: {\n      height: StyleSheet.hairlineWidth,\n      width: 0,\n    },\n    zIndex: 1,\n  },\n  tabContent: {\n    flexDirection: 'row',\n    flexWrap: 'nowrap',\n  },\n  indicatorContainer: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}