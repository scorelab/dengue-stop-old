{"ast":null,"code":"import { cond, sub, divide, multiply, sqrt, add, block, set, exp, sin, cos, eq, or, neq, and, lessThan, greaterThan } from \"../base\";\nimport { min, abs } from \"../derived\";\nimport AnimatedValue from \"../core/InternalAnimatedValue\";\nvar MAX_STEPS_MS = 64;\nexport default function spring(clock, state, config) {\n  var lastTime = cond(state.time, state.time, clock);\n  var deltaTime = min(sub(clock, lastTime), MAX_STEPS_MS);\n  var c = config.damping;\n  var m = config.mass;\n  var k = config.stiffness;\n  var v0 = multiply(-1, state.velocity);\n  var x0 = sub(config.toValue, state.position);\n  var zeta = divide(c, multiply(2, sqrt(multiply(k, m))));\n  var omega0 = sqrt(divide(k, m));\n  var omega1 = multiply(omega0, sqrt(sub(1, multiply(zeta, zeta))));\n  var t = divide(deltaTime, 1000);\n  var sin1 = sin(multiply(omega1, t));\n  var cos1 = cos(multiply(omega1, t));\n  var underDampedEnvelope = exp(multiply(-1, zeta, omega0, t));\n  var underDampedFrag1 = multiply(underDampedEnvelope, add(multiply(sin1, divide(add(v0, multiply(zeta, omega0, x0)), omega1)), multiply(x0, cos1)));\n  var underDampedPosition = sub(config.toValue, underDampedFrag1);\n  var underDampedVelocity = sub(multiply(zeta, omega0, underDampedFrag1), multiply(underDampedEnvelope, sub(multiply(cos1, add(v0, multiply(zeta, omega0, x0))), multiply(omega1, x0, sin1))));\n  var criticallyDampedEnvelope = exp(multiply(-1, omega0, t));\n  var criticallyDampedPosition = sub(config.toValue, multiply(criticallyDampedEnvelope, add(x0, multiply(add(v0, multiply(omega0, x0)), t))));\n  var criticallyDampedVelocity = multiply(criticallyDampedEnvelope, add(multiply(v0, sub(multiply(t, omega0), 1)), multiply(t, x0, omega0, omega0)));\n  var prevPosition = state.prevPosition ? state.prevPosition : new AnimatedValue(0);\n  var isOvershooting = cond(and(config.overshootClamping, neq(config.stiffness, 0)), cond(lessThan(prevPosition, config.toValue), greaterThan(state.position, config.toValue), lessThan(state.position, config.toValue)));\n  var isVelocity = lessThan(abs(state.velocity), config.restSpeedThreshold);\n  var isDisplacement = or(eq(config.stiffness, 0), lessThan(abs(sub(config.toValue, state.position)), config.restDisplacementThreshold));\n  return block([set(prevPosition, state.position), cond(lessThan(zeta, 1), [set(state.position, underDampedPosition), set(state.velocity, underDampedVelocity)], [set(state.position, criticallyDampedPosition), set(state.velocity, criticallyDampedVelocity)]), set(state.time, clock), cond(or(isOvershooting, and(isVelocity, isDisplacement)), [cond(neq(config.stiffness, 0), [set(state.velocity, 0), set(state.position, config.toValue)]), set(state.finished, 1)])]);\n}","map":{"version":3,"sources":["C:/Users/Thivagar/Documents/GSOC Work/dengue-stop/node_modules/react-native-reanimated/src/animations/spring.js"],"names":["cond","sub","divide","multiply","sqrt","add","block","set","exp","sin","cos","eq","or","neq","and","lessThan","greaterThan","min","abs","AnimatedValue","MAX_STEPS_MS","spring","clock","state","config","lastTime","time","deltaTime","c","damping","m","mass","k","stiffness","v0","velocity","x0","toValue","position","zeta","omega0","omega1","t","sin1","cos1","underDampedEnvelope","underDampedFrag1","underDampedPosition","underDampedVelocity","criticallyDampedEnvelope","criticallyDampedPosition","criticallyDampedVelocity","prevPosition","isOvershooting","overshootClamping","isVelocity","restSpeedThreshold","isDisplacement","restDisplacementThreshold","finished"],"mappings":"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","sourcesContent":["import {\n  cond,\n  sub,\n  divide,\n  multiply,\n  sqrt,\n  add,\n  block,\n  set,\n  exp,\n  sin,\n  cos,\n  eq,\n  or,\n  neq,\n  and,\n  lessThan,\n  greaterThan,\n} from '../base';\nimport { min, abs } from '../derived';\nimport AnimatedValue from '../core/InternalAnimatedValue';\n\nconst MAX_STEPS_MS = 64;\n\nexport default function spring(clock, state, config) {\n  const lastTime = cond(state.time, state.time, clock);\n\n  const deltaTime = min(sub(clock, lastTime), MAX_STEPS_MS);\n\n  const c = config.damping;\n  const m = config.mass;\n  const k = config.stiffness;\n\n  const v0 = multiply(-1, state.velocity);\n  const x0 = sub(config.toValue, state.position);\n\n  const zeta = divide(c, multiply(2, sqrt(multiply(k, m)))); // damping ratio\n  const omega0 = sqrt(divide(k, m)); // undamped angular frequency of the oscillator (rad/ms)\n  const omega1 = multiply(omega0, sqrt(sub(1, multiply(zeta, zeta)))); // exponential decay\n\n  const t = divide(deltaTime, 1000); // in seconds\n\n  const sin1 = sin(multiply(omega1, t));\n  const cos1 = cos(multiply(omega1, t));\n\n  // under damped\n  const underDampedEnvelope = exp(multiply(-1, zeta, omega0, t));\n  const underDampedFrag1 = multiply(\n    underDampedEnvelope,\n    add(\n      multiply(sin1, divide(add(v0, multiply(zeta, omega0, x0)), omega1)),\n      multiply(x0, cos1)\n    )\n  );\n  const underDampedPosition = sub(config.toValue, underDampedFrag1);\n  // This looks crazy -- it's actually just the derivative of the oscillation function\n  const underDampedVelocity = sub(\n    multiply(zeta, omega0, underDampedFrag1),\n    multiply(\n      underDampedEnvelope,\n      sub(\n        multiply(cos1, add(v0, multiply(zeta, omega0, x0))),\n        multiply(omega1, x0, sin1)\n      )\n    )\n  );\n\n  // critically damped\n  const criticallyDampedEnvelope = exp(multiply(-1, omega0, t));\n  const criticallyDampedPosition = sub(\n    config.toValue,\n    multiply(\n      criticallyDampedEnvelope,\n      add(x0, multiply(add(v0, multiply(omega0, x0)), t))\n    )\n  );\n  const criticallyDampedVelocity = multiply(\n    criticallyDampedEnvelope,\n    add(\n      multiply(v0, sub(multiply(t, omega0), 1)),\n      multiply(t, x0, omega0, omega0)\n    )\n  );\n\n  // conditions for stopping the spring animations\n  const prevPosition = state.prevPosition\n    ? state.prevPosition\n    : new AnimatedValue(0);\n\n  const isOvershooting = cond(\n    and(config.overshootClamping, neq(config.stiffness, 0)),\n    cond(\n      lessThan(prevPosition, config.toValue),\n      greaterThan(state.position, config.toValue),\n      lessThan(state.position, config.toValue)\n    )\n  );\n  const isVelocity = lessThan(abs(state.velocity), config.restSpeedThreshold);\n  const isDisplacement = or(\n    eq(config.stiffness, 0),\n    lessThan(\n      abs(sub(config.toValue, state.position)),\n      config.restDisplacementThreshold\n    )\n  );\n\n  return block([\n    set(prevPosition, state.position),\n    cond(\n      lessThan(zeta, 1),\n      [\n        set(state.position, underDampedPosition),\n        set(state.velocity, underDampedVelocity),\n      ],\n      [\n        set(state.position, criticallyDampedPosition),\n        set(state.velocity, criticallyDampedVelocity),\n      ]\n    ),\n    set(state.time, clock),\n    cond(or(isOvershooting, and(isVelocity, isDisplacement)), [\n      cond(neq(config.stiffness, 0), [\n        set(state.velocity, 0),\n        set(state.position, config.toValue),\n      ]),\n      set(state.finished, 1),\n    ]),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}