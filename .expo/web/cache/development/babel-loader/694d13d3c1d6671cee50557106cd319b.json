{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/satya/Workspace/Projects/react-native-tab-view/src/SceneView.tsx\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\n\nvar SceneView = function (_React$Component) {\n  _inherits(SceneView, _React$Component);\n\n  function SceneView() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SceneView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SceneView)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      loading: Math.abs(_this.props.navigationState.index - _this.props.index) > _this.props.lazyPreloadDistance\n    };\n\n    _this.handleEnter = function (value) {\n      var index = _this.props.index;\n\n      if (value === index && _this.state.loading) {\n        _this.setState({\n          loading: false\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(SceneView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (this.props.lazy) {\n        this.props.addListener('enter', this.handleEnter);\n      } else if (this.state.loading) {\n        setTimeout(function () {\n          return _this2.setState({\n            loading: false\n          });\n        }, 0);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.props.lazy !== prevProps.lazy || this.state.loading !== prevState.loading) {\n        if (this.props.lazy && this.state.loading) {\n          this.props.addListener('enter', this.handleEnter);\n        } else {\n          this.props.removeListener('enter', this.handleEnter);\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.props.removeListener('enter', this.handleEnter);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          navigationState = _this$props.navigationState,\n          index = _this$props.index,\n          layout = _this$props.layout,\n          style = _this$props.style;\n      var loading = this.state.loading;\n      var focused = navigationState.index === index;\n      return React.createElement(View, {\n        accessibilityElementsHidden: !focused,\n        importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',\n        style: [styles.route, layout.width ? {\n          width: layout.width\n        } : focused ? StyleSheet.absoluteFill : null, style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        }\n      }, focused || layout.width ? this.props.children({\n        loading: loading\n      }) : null);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (state.loading && Math.abs(props.navigationState.index - props.index) <= props.lazyPreloadDistance) {\n        return {\n          loading: false\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return SceneView;\n}(React.Component);\n\nexport { SceneView as default };\nvar styles = StyleSheet.create({\n  route: {\n    flex: 1,\n    overflow: 'hidden'\n  }\n});","map":{"version":3,"sources":["SceneView.tsx"],"names":["SceneView","React","Component","props","state","Math","loading","setTimeout","prevProps","prevState","handleEnter","index","value","navigationState","layout","style","focused","styles","width","StyleSheet","route","flex","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport {\n  SceneRendererProps,\n  EventEmitterProps,\n  NavigationState,\n  Route,\n} from './types';\n\ntype Props<T extends Route> = SceneRendererProps &\n  EventEmitterProps & {\n    navigationState: NavigationState<T>;\n    lazy: boolean;\n    lazyPreloadDistance: number;\n    index: number;\n    children: (props: { loading: boolean }) => React.ReactNode;\n    style?: StyleProp<ViewStyle>;\n  };\n\ntype State = {\n  loading: boolean;\n};\n\nexport default class SceneView<T extends Route> extends React.Component<\n  Props<T>,\n  State\n> {\n  static getDerivedStateFromProps(props: Props<Route>, state: State) {\n    if (\n      state.loading &&\n      Math.abs(props.navigationState.index - props.index) <=\n        props.lazyPreloadDistance\n    ) {\n      // Always render the route when it becomes focused\n      return { loading: false };\n    }\n\n    return null;\n  }\n\n  state = {\n    loading:\n      Math.abs(this.props.navigationState.index - this.props.index) >\n      this.props.lazyPreloadDistance,\n  };\n\n  componentDidMount() {\n    if (this.props.lazy) {\n      // If lazy mode is enabled, listen to when we enter screens\n      this.props.addListener('enter', this.handleEnter);\n    } else if (this.state.loading) {\n      // If lazy mode is not enabled, render the scene with a delay if not loaded already\n      // This improves the initial startup time as the scene is no longer blocking\n      setTimeout(() => this.setState({ loading: false }), 0);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props<T>, prevState: State) {\n    if (\n      this.props.lazy !== prevProps.lazy ||\n      this.state.loading !== prevState.loading\n    ) {\n      // We only need the listener if the tab hasn't loaded yet and lazy is enabled\n      if (this.props.lazy && this.state.loading) {\n        this.props.addListener('enter', this.handleEnter);\n      } else {\n        this.props.removeListener('enter', this.handleEnter);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.removeListener('enter', this.handleEnter);\n  }\n\n  private handleEnter = (value: number) => {\n    const { index } = this.props;\n\n    // If we're entering the current route, we need to load it\n    if (value === index && this.state.loading) {\n      this.setState({ loading: false });\n    }\n  };\n\n  render() {\n    const { navigationState, index, layout, style } = this.props;\n    const { loading } = this.state;\n\n    const focused = navigationState.index === index;\n\n    return (\n      <View\n        accessibilityElementsHidden={!focused}\n        importantForAccessibility={focused ? 'auto' : 'no-hide-descendants'}\n        style={[\n          styles.route,\n          // If we don't have the layout yet, make the focused screen fill the container\n          // This avoids delay before we are able to render pages side by side\n          layout.width\n            ? { width: layout.width }\n            : focused\n            ? StyleSheet.absoluteFill\n            : null,\n          style,\n        ]}\n      >\n        {// Only render the route only if it's either focused or layout is available\n        // When layout is not available, we must not render unfocused routes\n        // so that the focused route can fill the screen\n        focused || layout.width ? this.props.children({ loading }) : null}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  route: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}