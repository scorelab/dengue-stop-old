{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Thivagar\\\\Documents\\\\GSOC Work\\\\dengue-stop\\\\node_modules\\\\react-native-gesture-handler\\\\createNativeWrapper.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport NativeViewGestureHandler from \"./NativeViewGestureHandler\";\nvar NATIVE_WRAPPER_BIND_BLACKLIST = new Set(['replaceState', 'isMounted']);\nvar NATIVE_WRAPPER_PROPS_FILTER = ['id', 'minPointers', 'enabled', 'waitFor', 'simultaneousHandlers', 'shouldCancelWhenOutside', 'hitSlop', 'onGestureEvent', 'onHandlerStateChange', 'onBegan', 'onFailed', 'onCancelled', 'onActivated', 'onEnded', 'shouldActivateOnStart', 'disallowInterruption', 'onGestureHandlerEvent', 'onGestureHandlerStateChange'];\nexport default function createNativeWrapper(Component) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var ComponentWrapper = function (_React$Component) {\n    _inherits(ComponentWrapper, _React$Component);\n\n    function ComponentWrapper() {\n      var _getPrototypeOf2;\n\n      var _this;\n\n      _classCallCheck(this, ComponentWrapper);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ComponentWrapper)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n      _this._refHandler = function (node) {\n        var source = node;\n\n        while (source != null) {\n          for (var _iterator = Object.getOwnPropertyNames(source), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === \"function\" ? typeof Symbol === \"function\" ? typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\" : \"@@iterator\" : \"@@iterator\"]();;) {\n            var _ref;\n\n            if (_isArray) {\n              if (_i >= _iterator.length) break;\n              _ref = _iterator[_i++];\n            } else {\n              _i = _iterator.next();\n              if (_i.done) break;\n              _ref = _i.value;\n            }\n\n            var _methodName = _ref;\n\n            if (!_methodName.startsWith('_') && !_methodName.startsWith('component') && !NATIVE_WRAPPER_BIND_BLACKLIST.has(_methodName) && typeof source[_methodName] === 'function' && _this[_methodName] === undefined) {\n              if (source[_methodName].prototype) {\n                _this[_methodName] = source[_methodName].bind(node);\n              } else {\n                _this[_methodName] = source[_methodName];\n              }\n            }\n          }\n\n          source = Object.getPrototypeOf(source);\n        }\n      };\n\n      return _this;\n    }\n\n    _createClass(ComponentWrapper, [{\n      key: \"render\",\n      value: function render() {\n        var _this2 = this;\n\n        var gestureHandlerProps = Object.keys(this.props).reduce(function (props, key) {\n          if (NATIVE_WRAPPER_PROPS_FILTER.indexOf(key) !== -1) {\n            props[key] = _this2.props[key];\n          }\n\n          return props;\n        }, _objectSpread({}, config));\n        return React.createElement(NativeViewGestureHandler, _extends({}, gestureHandlerProps, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          }\n        }), React.createElement(Component, _extends({}, this.props, {\n          ref: this._refHandler,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          }\n        })));\n      }\n    }]);\n\n    return ComponentWrapper;\n  }(React.Component);\n\n  ComponentWrapper.propTypes = _objectSpread({}, Component.propTypes);\n  ComponentWrapper.displayName = Component.displayName || 'ComponentWrapper';\n  return ComponentWrapper;\n}","map":{"version":3,"sources":["C:/Users/Thivagar/Documents/GSOC Work/dengue-stop/node_modules/react-native-gesture-handler/createNativeWrapper.js"],"names":["React","NativeViewGestureHandler","NATIVE_WRAPPER_BIND_BLACKLIST","Set","NATIVE_WRAPPER_PROPS_FILTER","createNativeWrapper","Component","config","ComponentWrapper","_refHandler","node","source","Object","getOwnPropertyNames","methodName","startsWith","has","undefined","prototype","bind","getPrototypeOf","gestureHandlerProps","keys","props","reduce","key","indexOf","propTypes","displayName"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,wBAAP;AAEA,IAAMC,6BAA6B,GAAG,IAAIC,GAAJ,CAAQ,CAAC,cAAD,EAAiB,WAAjB,CAAR,CAAtC;AASA,IAAMC,2BAA2B,GAAG,CAClC,IADkC,EAElC,aAFkC,EAGlC,SAHkC,EAIlC,SAJkC,EAKlC,sBALkC,EAMlC,yBANkC,EAOlC,SAPkC,EAQlC,gBARkC,EASlC,sBATkC,EAUlC,SAVkC,EAWlC,UAXkC,EAYlC,aAZkC,EAalC,aAbkC,EAclC,SAdkC,EAelC,uBAfkC,EAgBlC,sBAhBkC,EAiBlC,uBAjBkC,EAkBlC,6BAlBkC,CAApC;AAqBA,eAAe,SAASC,mBAAT,CAA6BC,SAA7B,EAAqD;AAAA,MAAbC,MAAa,uEAAJ,EAAI;;AAAA,MAC5DC,gBAD4D;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,YAQhEC,WARgE,GAQlD,UAAAC,IAAI,EAAI;AAEpB,YAAIC,MAAM,GAAGD,IAAb;;AACA,eAAOC,MAAM,IAAI,IAAjB,EAAuB;AACrB,+BAAuBC,MAAM,CAACC,mBAAP,CAA2BF,MAA3B,CAAvB,4PAA2D;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,gBAAlDG,WAAkD;;AACzD,gBACE,CAACA,WAAU,CAACC,UAAX,CAAsB,GAAtB,CAAD,IACA,CAACD,WAAU,CAACC,UAAX,CAAsB,WAAtB,CADD,IAEA,CAACb,6BAA6B,CAACc,GAA9B,CAAkCF,WAAlC,CAFD,IAGA,OAAOH,MAAM,CAACG,WAAD,CAAb,KAA8B,UAH9B,IAIA,MAAKA,WAAL,MAAqBG,SALvB,EAME;AACA,kBAAIN,MAAM,CAACG,WAAD,CAAN,CAAmBI,SAAvB,EAAkC;AAEhC,sBAAKJ,WAAL,IAAmBH,MAAM,CAACG,WAAD,CAAN,CAAmBK,IAAnB,CAAwBT,IAAxB,CAAnB;AACD,eAHD,MAGO;AACL,sBAAKI,WAAL,IAAmBH,MAAM,CAACG,WAAD,CAAzB;AACD;AACF;AACF;;AACDH,UAAAA,MAAM,GAAGC,MAAM,CAACQ,cAAP,CAAsBT,MAAtB,CAAT;AACD;AACF,OA9B+D;;AAAA;AAAA;;AAAA;AAAA;AAAA,+BAgCvD;AAAA;;AAEP,YAAMU,mBAAmB,GAAGT,MAAM,CAACU,IAAP,CAAY,KAAKC,KAAjB,EAAwBC,MAAxB,CAC1B,UAACD,KAAD,EAAQE,GAAR,EAAgB;AACd,cAAIrB,2BAA2B,CAACsB,OAA5B,CAAoCD,GAApC,MAA6C,CAAC,CAAlD,EAAqD;AACnDF,YAAAA,KAAK,CAACE,GAAD,CAAL,GAAa,MAAI,CAACF,KAAL,CAAWE,GAAX,CAAb;AACD;;AACD,iBAAOF,KAAP;AACD,SANyB,oBAOrBhB,MAPqB,EAA5B;AASA,eACE,oBAAC,wBAAD,eAA8Bc,mBAA9B;AAAA;AAAA;AAAA;AAAA;AAAA,YACE,oBAAC,SAAD,eAAe,KAAKE,KAApB;AAA2B,UAAA,GAAG,EAAE,KAAKd,WAArC;AAAA;AAAA;AAAA;AAAA;AAAA,WADF,CADF;AAKD;AAhD+D;;AAAA;AAAA,IACnCT,KAAK,CAACM,SAD6B;;AAC5DE,EAAAA,gBAD4D,CAEzDmB,SAFyD,qBAG3DrB,SAAS,CAACqB,SAHiD;AAC5DnB,EAAAA,gBAD4D,CAMzDoB,WANyD,GAM3CtB,SAAS,CAACsB,WAAV,IAAyB,kBANkB;AAkDlE,SAAOpB,gBAAP;AACD","sourcesContent":["import React from 'react';\n\nimport NativeViewGestureHandler from './NativeViewGestureHandler';\n\nconst NATIVE_WRAPPER_BIND_BLACKLIST = new Set(['replaceState', 'isMounted']);\n\n/*\n * This array should consist of:\n *   - All keys in propTypes from NativeGestureHandler\n *     (and all keys in GestureHandlerPropTypes)\n *   - 'onGestureHandlerEvent'\n *   - 'onGestureHandlerStateChange'\n */\nconst NATIVE_WRAPPER_PROPS_FILTER = [\n  'id',\n  'minPointers',\n  'enabled',\n  'waitFor',\n  'simultaneousHandlers',\n  'shouldCancelWhenOutside',\n  'hitSlop',\n  'onGestureEvent',\n  'onHandlerStateChange',\n  'onBegan',\n  'onFailed',\n  'onCancelled',\n  'onActivated',\n  'onEnded',\n  'shouldActivateOnStart',\n  'disallowInterruption',\n  'onGestureHandlerEvent',\n  'onGestureHandlerStateChange',\n];\n\nexport default function createNativeWrapper(Component, config = {}) {\n  class ComponentWrapper extends React.Component {\n    static propTypes = {\n      ...Component.propTypes,\n    };\n\n    static displayName = Component.displayName || 'ComponentWrapper';\n\n    _refHandler = node => {\n      // bind native component's methods\n      let source = node;\n      while (source != null) {\n        for (let methodName of Object.getOwnPropertyNames(source)) {\n          if (\n            !methodName.startsWith('_') && // private methods\n            !methodName.startsWith('component') && // lifecycle methods\n            !NATIVE_WRAPPER_BIND_BLACKLIST.has(methodName) && // other\n            typeof source[methodName] === 'function' &&\n            this[methodName] === undefined\n          ) {\n            if (source[methodName].prototype) {\n              // determine if it's not bound already\n              this[methodName] = source[methodName].bind(node);\n            } else {\n              this[methodName] = source[methodName];\n            }\n          }\n        }\n        source = Object.getPrototypeOf(source);\n      }\n    };\n\n    render() {\n      // filter out props that should be passed to gesture handler wrapper\n      const gestureHandlerProps = Object.keys(this.props).reduce(\n        (props, key) => {\n          if (NATIVE_WRAPPER_PROPS_FILTER.indexOf(key) !== -1) {\n            props[key] = this.props[key];\n          }\n          return props;\n        },\n        { ...config } // watch out not to modify config\n      );\n      return (\n        <NativeViewGestureHandler {...gestureHandlerProps}>\n          <Component {...this.props} ref={this._refHandler} />\n        </NativeViewGestureHandler>\n      );\n    }\n  }\n  return ComponentWrapper;\n}\n"]},"metadata":{},"sourceType":"module"}