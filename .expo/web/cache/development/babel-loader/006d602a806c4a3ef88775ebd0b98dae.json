{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Thivagar\\\\Documents\\\\GSOC Work\\\\dengue-stop\\\\node_modules\\\\react-native-reanimated\\\\src\\\\createAnimatedComponent.js\";\nimport React from 'react';\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ReanimatedEventEmitter from \"./ReanimatedEventEmitter\";\nimport AnimatedEvent from \"./core/AnimatedEvent\";\nimport AnimatedNode from \"./core/AnimatedNode\";\nimport { createOrReusePropsNode } from \"./core/AnimatedProps\";\nimport invariant from 'fbjs/lib/invariant';\nvar NODE_MAPPING = new Map();\n\nfunction listener(data) {\n  var component = NODE_MAPPING.get(data.viewTag);\n  component && component._updateFromNative(data.props);\n}\n\nexport default function createAnimatedComponent(Component) {\n  invariant(typeof Component !== 'function' || Component.prototype && Component.prototype.isReactComponent, '`createAnimatedComponent` does not support stateless functional components; ' + 'use a class component instead.');\n\n  var AnimatedComponent = function (_React$Component) {\n    _inherits(AnimatedComponent, _React$Component);\n\n    function AnimatedComponent(props) {\n      var _this;\n\n      _classCallCheck(this, AnimatedComponent);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedComponent).call(this, props));\n      _this._invokeAnimatedPropsCallbackOnMount = false;\n\n      _this._animatedPropsCallback = function () {\n        if (_this._component == null) {\n          _this._invokeAnimatedPropsCallbackOnMount = true;\n        } else if (typeof _this._component.setNativeProps !== 'function') {\n          _this.forceUpdate();\n        } else {\n          _this._component.setNativeProps(_this._propsAnimated.__getValue());\n        }\n      };\n\n      _this._setComponentRef = function (c) {\n        if (c !== _this._component) {\n          _this._component = c;\n        }\n      };\n\n      _this._attachProps(_this.props);\n\n      return _this;\n    }\n\n    _createClass(AnimatedComponent, [{\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this._detachPropUpdater();\n\n        this._propsAnimated && this._propsAnimated.__detach();\n\n        this._detachNativeEvents();\n      }\n    }, {\n      key: \"setNativeProps\",\n      value: function setNativeProps(props) {\n        this._component.setNativeProps(props);\n      }\n    }, {\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        if (this._invokeAnimatedPropsCallbackOnMount) {\n          this._invokeAnimatedPropsCallbackOnMount = false;\n\n          this._animatedPropsCallback();\n        }\n\n        this._propsAnimated.setNativeView(this._component);\n\n        this._attachNativeEvents();\n\n        this._attachPropUpdater();\n      }\n    }, {\n      key: \"_getEventViewRef\",\n      value: function _getEventViewRef() {\n        return this._component.getScrollableNode ? this._component.getScrollableNode() : this._component;\n      }\n    }, {\n      key: \"_attachNativeEvents\",\n      value: function _attachNativeEvents() {\n        var node = this._getEventViewRef();\n\n        for (var key in this.props) {\n          var prop = this.props[key];\n\n          if (prop instanceof AnimatedEvent) {\n            prop.attachEvent(node, key);\n          }\n        }\n      }\n    }, {\n      key: \"_detachNativeEvents\",\n      value: function _detachNativeEvents() {\n        var node = this._getEventViewRef();\n\n        for (var key in this.props) {\n          var prop = this.props[key];\n\n          if (prop instanceof AnimatedEvent) {\n            prop.detachEvent(node, key);\n          }\n        }\n      }\n    }, {\n      key: \"_reattachNativeEvents\",\n      value: function _reattachNativeEvents(prevProps) {\n        var node = this._getEventViewRef();\n\n        var attached = new Set();\n        var nextEvts = new Set();\n\n        for (var key in this.props) {\n          var prop = this.props[key];\n\n          if (prop instanceof AnimatedEvent) {\n            nextEvts.add(prop.__nodeID);\n          }\n        }\n\n        for (var _key in prevProps) {\n          var _prop = this.props[_key];\n\n          if (_prop instanceof AnimatedEvent) {\n            if (!nextEvts.has(_prop.__nodeID)) {\n              _prop.detachEvent(node, _key);\n            } else {\n              attached.add(_prop.__nodeID);\n            }\n          }\n        }\n\n        for (var _key2 in this.props) {\n          var _prop2 = this.props[_key2];\n\n          if (_prop2 instanceof AnimatedEvent && !attached.has(_prop2.__nodeID)) {\n            _prop2.attachEvent(node, _key2);\n          }\n        }\n      }\n    }, {\n      key: \"_attachProps\",\n      value: function _attachProps(nextProps) {\n        var oldPropsAnimated = this._propsAnimated;\n        this._propsAnimated = createOrReusePropsNode(nextProps, this._animatedPropsCallback, oldPropsAnimated);\n\n        if (oldPropsAnimated !== this._propsAnimated) {\n          oldPropsAnimated && oldPropsAnimated.__detach();\n        }\n      }\n    }, {\n      key: \"_updateFromNative\",\n      value: function _updateFromNative(props) {\n        this._component.setNativeProps(props);\n      }\n    }, {\n      key: \"_attachPropUpdater\",\n      value: function _attachPropUpdater() {\n        var viewTag = findNodeHandle(this);\n        NODE_MAPPING.set(viewTag, this);\n\n        if (NODE_MAPPING.size === 1) {\n          ReanimatedEventEmitter.addListener('onReanimatedPropsChange', listener);\n        }\n      }\n    }, {\n      key: \"_detachPropUpdater\",\n      value: function _detachPropUpdater() {\n        var viewTag = findNodeHandle(this);\n        NODE_MAPPING.delete(viewTag);\n\n        if (NODE_MAPPING.size === 0) {\n          ReanimatedEventEmitter.removeAllListeners('onReanimatedPropsChange');\n        }\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate(prevProps) {\n        this._attachProps(this.props);\n\n        this._reattachNativeEvents(prevProps);\n\n        this._propsAnimated.setNativeView(this._component);\n      }\n    }, {\n      key: \"_filterNonAnimatedStyle\",\n      value: function _filterNonAnimatedStyle(inputStyle) {\n        var style = {};\n\n        for (var key in inputStyle) {\n          var value = inputStyle[key];\n\n          if (!(value instanceof AnimatedNode) && key !== 'transform') {\n            style[key] = value;\n          }\n        }\n\n        return style;\n      }\n    }, {\n      key: \"_filterNonAnimatedProps\",\n      value: function _filterNonAnimatedProps(inputProps) {\n        var props = {};\n\n        for (var key in inputProps) {\n          var value = inputProps[key];\n\n          if (key === 'style') {\n            props[key] = this._filterNonAnimatedStyle(StyleSheet.flatten(value));\n          } else if (!(value instanceof AnimatedNode)) {\n            props[key] = value;\n          }\n        }\n\n        return props;\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var props = this._filterNonAnimatedProps(this.props);\n\n        var platformProps = Platform.select({\n          web: {},\n          default: {\n            collapsable: false\n          }\n        });\n        return React.createElement(Component, _extends({}, props, {\n          ref: this._setComponentRef\n        }, platformProps, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 222\n          }\n        }));\n      }\n    }, {\n      key: \"getNode\",\n      value: function getNode() {\n        return this._component;\n      }\n    }]);\n\n    return AnimatedComponent;\n  }(React.Component);\n\n  return AnimatedComponent;\n}","map":{"version":3,"sources":["C:/Users/Thivagar/Documents/GSOC Work/dengue-stop/node_modules/react-native-reanimated/src/createAnimatedComponent.js"],"names":["React","ReanimatedEventEmitter","AnimatedEvent","AnimatedNode","createOrReusePropsNode","invariant","NODE_MAPPING","Map","listener","data","component","get","viewTag","_updateFromNative","props","createAnimatedComponent","Component","prototype","isReactComponent","AnimatedComponent","_invokeAnimatedPropsCallbackOnMount","_animatedPropsCallback","_component","setNativeProps","forceUpdate","_propsAnimated","__getValue","_setComponentRef","c","_attachProps","_detachPropUpdater","__detach","_detachNativeEvents","setNativeView","_attachNativeEvents","_attachPropUpdater","getScrollableNode","node","_getEventViewRef","key","prop","attachEvent","detachEvent","prevProps","attached","Set","nextEvts","add","__nodeID","has","nextProps","oldPropsAnimated","findNodeHandle","set","size","addListener","delete","removeAllListeners","_reattachNativeEvents","inputStyle","style","value","inputProps","_filterNonAnimatedStyle","StyleSheet","flatten","_filterNonAnimatedProps","platformProps","Platform","select","web","default","collapsable"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { findNodeHandle, Platform, StyleSheet } from 'react-native';\nimport ReanimatedEventEmitter from './ReanimatedEventEmitter';\n\nimport AnimatedEvent from './core/AnimatedEvent';\nimport AnimatedNode from './core/AnimatedNode';\nimport { createOrReusePropsNode } from './core/AnimatedProps';\n\nimport invariant from 'fbjs/lib/invariant';\n\nconst NODE_MAPPING = new Map();\n\nfunction listener(data) {\n  const component = NODE_MAPPING.get(data.viewTag);\n  component && component._updateFromNative(data.props);\n}\n\nexport default function createAnimatedComponent(Component) {\n  invariant(\n    typeof Component !== 'function' ||\n      (Component.prototype && Component.prototype.isReactComponent),\n    '`createAnimatedComponent` does not support stateless functional components; ' +\n      'use a class component instead.'\n  );\n\n  class AnimatedComponent extends React.Component {\n    _invokeAnimatedPropsCallbackOnMount = false;\n\n    constructor(props) {\n      super(props);\n      this._attachProps(this.props);\n    }\n\n    componentWillUnmount() {\n      this._detachPropUpdater();\n      this._propsAnimated && this._propsAnimated.__detach();\n      this._detachNativeEvents();\n    }\n\n    setNativeProps(props) {\n      this._component.setNativeProps(props);\n    }\n\n    componentDidMount() {\n      if (this._invokeAnimatedPropsCallbackOnMount) {\n        this._invokeAnimatedPropsCallbackOnMount = false;\n        this._animatedPropsCallback();\n      }\n\n      this._propsAnimated.setNativeView(this._component);\n      this._attachNativeEvents();\n      this._attachPropUpdater();\n    }\n\n    _getEventViewRef() {\n      // Make sure to get the scrollable node for components that implement\n      // `ScrollResponder.Mixin`.\n      return this._component.getScrollableNode\n        ? this._component.getScrollableNode()\n        : this._component;\n    }\n\n    _attachNativeEvents() {\n      const node = this._getEventViewRef();\n\n      for (const key in this.props) {\n        const prop = this.props[key];\n        if (prop instanceof AnimatedEvent) {\n          prop.attachEvent(node, key);\n        }\n      }\n    }\n\n    _detachNativeEvents() {\n      const node = this._getEventViewRef();\n\n      for (const key in this.props) {\n        const prop = this.props[key];\n        if (prop instanceof AnimatedEvent) {\n          prop.detachEvent(node, key);\n        }\n      }\n    }\n\n    _reattachNativeEvents(prevProps) {\n      const node = this._getEventViewRef();\n      const attached = new Set();\n      const nextEvts = new Set();\n      for (const key in this.props) {\n        const prop = this.props[key];\n        if (prop instanceof AnimatedEvent) {\n          nextEvts.add(prop.__nodeID);\n        }\n      }\n      for (const key in prevProps) {\n        const prop = this.props[key];\n        if (prop instanceof AnimatedEvent) {\n          if (!nextEvts.has(prop.__nodeID)) {\n            // event was in prev props but not in current props, we detach\n            prop.detachEvent(node, key);\n          } else {\n            // event was in prev and is still in current props\n            attached.add(prop.__nodeID);\n          }\n        }\n      }\n      for (const key in this.props) {\n        const prop = this.props[key];\n        if (prop instanceof AnimatedEvent && !attached.has(prop.__nodeID)) {\n          // not yet attached\n          prop.attachEvent(node, key);\n        }\n      }\n    }\n\n    // The system is best designed when setNativeProps is implemented. It is\n    // able to avoid re-rendering and directly set the attributes that changed.\n    // However, setNativeProps can only be implemented on native components\n    // If you want to animate a composite component, you need to re-render it.\n    // In this case, we have a fallback that uses forceUpdate.\n    _animatedPropsCallback = () => {\n      if (this._component == null) {\n        // AnimatedProps is created in will-mount because it's used in render.\n        // But this callback may be invoked before mount in async mode,\n        // In which case we should defer the setNativeProps() call.\n        // React may throw away uncommitted work in async mode,\n        // So a deferred call won't always be invoked.\n        this._invokeAnimatedPropsCallbackOnMount = true;\n      } else if (typeof this._component.setNativeProps !== 'function') {\n        this.forceUpdate();\n      } else {\n        this._component.setNativeProps(this._propsAnimated.__getValue());\n      }\n    };\n\n    _attachProps(nextProps) {\n      const oldPropsAnimated = this._propsAnimated;\n\n      this._propsAnimated = createOrReusePropsNode(\n        nextProps,\n        this._animatedPropsCallback,\n        oldPropsAnimated\n      );\n      // If prop node has been reused we don't need to call into \"__detach\"\n      if (oldPropsAnimated !== this._propsAnimated) {\n        // When you call detach, it removes the element from the parent list\n        // of children. If it goes to 0, then the parent also detaches itself\n        // and so on.\n        // An optimization is to attach the new elements and THEN detach the old\n        // ones instead of detaching and THEN attaching.\n        // This way the intermediate state isn't to go to 0 and trigger\n        // this expensive recursive detaching to then re-attach everything on\n        // the very next operation.\n        oldPropsAnimated && oldPropsAnimated.__detach();\n      }\n    }\n\n    _updateFromNative(props) {\n      this._component.setNativeProps(props);\n    }\n\n    _attachPropUpdater() {\n      const viewTag = findNodeHandle(this);\n      NODE_MAPPING.set(viewTag, this);\n      if (NODE_MAPPING.size === 1) {\n        ReanimatedEventEmitter.addListener('onReanimatedPropsChange', listener);\n      }\n    }\n\n    _detachPropUpdater() {\n      const viewTag = findNodeHandle(this);\n      NODE_MAPPING.delete(viewTag);\n      if (NODE_MAPPING.size === 0) {\n        ReanimatedEventEmitter.removeAllListeners('onReanimatedPropsChange');\n      }\n    }\n\n    componentDidUpdate(prevProps) {\n      this._attachProps(this.props);\n      this._reattachNativeEvents(prevProps);\n\n      this._propsAnimated.setNativeView(this._component);\n    }\n\n    _setComponentRef = c => {\n      if (c !== this._component) {\n        this._component = c;\n      }\n    };\n\n    _filterNonAnimatedStyle(inputStyle) {\n      const style = {};\n      for (const key in inputStyle) {\n        const value = inputStyle[key];\n        if (!(value instanceof AnimatedNode) && key !== 'transform') {\n          style[key] = value;\n        }\n      }\n      return style;\n    }\n\n    _filterNonAnimatedProps(inputProps) {\n      const props = {};\n      for (const key in inputProps) {\n        const value = inputProps[key];\n        if (key === 'style') {\n          props[key] = this._filterNonAnimatedStyle(StyleSheet.flatten(value));\n        } else if (!(value instanceof AnimatedNode)) {\n          props[key] = value;\n        }\n      }\n      return props;\n    }\n\n    render() {\n      const props = this._filterNonAnimatedProps(this.props);\n      const platformProps = Platform.select({\n        web: {},\n        default: { collapsable: false },\n      });\n      return (\n        <Component {...props} ref={this._setComponentRef} {...platformProps} />\n      );\n    }\n\n    // A third party library can use getNode()\n    // to get the node reference of the decorated component\n    getNode() {\n      return this._component;\n    }\n  }\n\n  return AnimatedComponent;\n}\n"]},"metadata":{},"sourceType":"module"}