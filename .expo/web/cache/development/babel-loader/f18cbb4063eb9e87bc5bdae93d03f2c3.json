{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/satya/Workspace/Callstack/react-navigation-stack/src/views/StackView/StackView.tsx\";\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { StackActions } from 'react-navigation';\nimport StackViewLayout from \"./StackViewLayout\";\nimport Transitioner from \"../Transitioner\";\nimport TransitionConfigs from \"./StackViewTransitionConfigs\";\nvar USE_NATIVE_DRIVER = Platform.OS === 'android' || Platform.OS === 'ios';\nvar DefaultNavigationConfig = {\n  mode: 'card',\n  cardShadowEnabled: true,\n  cardOverlayEnabled: false\n};\n\nvar StackView = function (_React$Component) {\n  _inherits(StackView, _React$Component);\n\n  function StackView() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, StackView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StackView)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.configureTransition = function (transitionProps, prevTransitionProps) {\n      return _objectSpread({\n        useNativeDriver: USE_NATIVE_DRIVER\n      }, TransitionConfigs.getTransitionConfig(_this.props.navigationConfig.transitionConfig, transitionProps, prevTransitionProps, _this.props.navigationConfig.mode === 'modal').transitionSpec);\n    };\n\n    _this.getShadowEnabled = function () {\n      var navigationConfig = _this.props.navigationConfig;\n      return navigationConfig && navigationConfig.hasOwnProperty('cardShadowEnabled') ? navigationConfig.cardShadowEnabled : DefaultNavigationConfig.cardShadowEnabled;\n    };\n\n    _this.getCardOverlayEnabled = function () {\n      var navigationConfig = _this.props.navigationConfig;\n      return navigationConfig && navigationConfig.hasOwnProperty('cardOverlayEnabled') ? navigationConfig.cardOverlayEnabled : DefaultNavigationConfig.cardOverlayEnabled;\n    };\n\n    _this.renderStackviewLayout = function (transitionProps, lastTransitionProps) {\n      var _this$props = _this.props,\n          screenProps = _this$props.screenProps,\n          navigationConfig = _this$props.navigationConfig;\n      return React.createElement(StackViewLayout, _extends({}, navigationConfig, {\n        cardShadowEnabled: _this.getShadowEnabled(),\n        cardOverlayEnabled: _this.getCardOverlayEnabled(),\n        onGestureBegin: _this.props.onGestureBegin,\n        onGestureCanceled: _this.props.onGestureCanceled,\n        onGestureEnd: _this.props.onGestureEnd,\n        screenProps: screenProps,\n        transitionProps: transitionProps,\n        lastTransitionProps: lastTransitionProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        }\n      }));\n    };\n\n    _this.handleTransitionEnd = function (transition, lastTransition) {\n      var _this$props2 = _this.props,\n          navigationConfig = _this$props2.navigationConfig,\n          navigation = _this$props2.navigation,\n          _this$props2$onTransi = _this$props2.onTransitionEnd,\n          onTransitionEnd = _this$props2$onTransi === void 0 ? navigationConfig.onTransitionEnd : _this$props2$onTransi;\n      var transitionDestKey = transition.scene.route.key;\n      var isCurrentKey = navigation.state.routes[navigation.state.index].key === transitionDestKey;\n\n      if (transition.navigation.state.isTransitioning && isCurrentKey) {\n        navigation.dispatch(StackActions.completeTransition({\n          key: navigation.state.key,\n          toChildKey: transitionDestKey\n        }));\n      }\n\n      onTransitionEnd && onTransitionEnd(transition, lastTransition);\n    };\n\n    return _this;\n  }\n\n  _createClass(StackView, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Transitioner, {\n        render: this.renderStackviewLayout,\n        configureTransition: this.configureTransition,\n        screenProps: this.props.screenProps,\n        navigation: this.props.navigation,\n        descriptors: this.props.descriptors,\n        onTransitionStart: this.props.onTransitionStart || this.props.navigationConfig.onTransitionStart,\n        onTransitionEnd: this.handleTransitionEnd,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        }\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var navigation = this.props.navigation;\n\n      if (navigation.state.isTransitioning) {\n        navigation.dispatch(StackActions.completeTransition({\n          key: navigation.state.key\n        }));\n      }\n    }\n  }]);\n\n  return StackView;\n}(React.Component);\n\nexport default StackView;","map":{"version":3,"sources":["StackView.tsx"],"names":["USE_NATIVE_DRIVER","Platform","DefaultNavigationConfig","mode","cardShadowEnabled","cardOverlayEnabled","StackView","React","Component","navigation","StackActions","key","configureTransition","useNativeDriver","TransitionConfigs","getShadowEnabled","navigationConfig","getCardOverlayEnabled","renderStackviewLayout","screenProps","handleTransitionEnd","onTransitionEnd","transitionDestKey","transition","isCurrentKey","toChildKey"],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport { Platform } from 'react-native';\nimport { StackActions } from 'react-navigation';\nimport StackViewLayout from './StackViewLayout';\nimport Transitioner from '../Transitioner';\nimport TransitionConfigs from './StackViewTransitionConfigs';\nimport {\n  NavigationStackProp,\n  SceneDescriptorMap,\n  NavigationStackConfig,\n  TransitionProps,\n  Scene,\n} from '../../types';\n\ntype Props = {\n  navigation: NavigationStackProp;\n  descriptors: SceneDescriptorMap;\n  navigationConfig: NavigationStackConfig;\n  onTransitionStart?: () => void;\n  onGestureBegin?: () => void;\n  onGestureCanceled?: () => void;\n  onGestureEnd?: () => void;\n  screenProps?: unknown;\n};\n\nconst USE_NATIVE_DRIVER = Platform.OS === 'android' || Platform.OS === 'ios';\n\n// NOTE(brentvatne): this was previously in defaultProps, but that is deceiving\n// because the entire object will be clobbered by navigationConfig that is\n// passed in.\nconst DefaultNavigationConfig = {\n  mode: 'card' as const,\n  cardShadowEnabled: true,\n  cardOverlayEnabled: false,\n};\n\nclass StackView extends React.Component<Props> {\n  render() {\n    return (\n      <Transitioner\n        render={this.renderStackviewLayout}\n        configureTransition={this.configureTransition}\n        screenProps={this.props.screenProps}\n        navigation={this.props.navigation}\n        descriptors={this.props.descriptors}\n        onTransitionStart={\n          this.props.onTransitionStart ||\n          this.props.navigationConfig.onTransitionStart\n        }\n        onTransitionEnd={this.handleTransitionEnd}\n      />\n    );\n  }\n\n  componentDidMount() {\n    const { navigation } = this.props;\n    if (navigation.state.isTransitioning) {\n      navigation.dispatch(\n        StackActions.completeTransition({\n          key: navigation.state.key,\n        })\n      );\n    }\n  }\n\n  private configureTransition = (\n    transitionProps: TransitionProps,\n    prevTransitionProps?: TransitionProps\n  ) => {\n    return {\n      useNativeDriver: USE_NATIVE_DRIVER,\n      ...TransitionConfigs.getTransitionConfig(\n        this.props.navigationConfig.transitionConfig,\n        transitionProps,\n        prevTransitionProps,\n        this.props.navigationConfig.mode === 'modal'\n      ).transitionSpec,\n    };\n  };\n\n  private getShadowEnabled = () => {\n    const { navigationConfig } = this.props;\n    return navigationConfig &&\n      navigationConfig.hasOwnProperty('cardShadowEnabled')\n      ? navigationConfig.cardShadowEnabled\n      : DefaultNavigationConfig.cardShadowEnabled;\n  };\n\n  private getCardOverlayEnabled = () => {\n    const { navigationConfig } = this.props;\n    return navigationConfig &&\n      navigationConfig.hasOwnProperty('cardOverlayEnabled')\n      ? navigationConfig.cardOverlayEnabled\n      : DefaultNavigationConfig.cardOverlayEnabled;\n  };\n\n  private renderStackviewLayout = (\n    transitionProps: TransitionProps,\n    lastTransitionProps?: TransitionProps\n  ) => {\n    const { screenProps, navigationConfig } = this.props;\n    return (\n      <StackViewLayout\n        {...navigationConfig}\n        cardShadowEnabled={this.getShadowEnabled()}\n        cardOverlayEnabled={this.getCardOverlayEnabled()}\n        onGestureBegin={this.props.onGestureBegin}\n        onGestureCanceled={this.props.onGestureCanceled}\n        onGestureEnd={this.props.onGestureEnd}\n        screenProps={screenProps}\n        transitionProps={transitionProps}\n        lastTransitionProps={lastTransitionProps}\n      />\n    );\n  };\n\n  private handleTransitionEnd = (\n    transition: { scene: Scene; navigation: NavigationStackProp },\n    lastTransition?: { scene: Scene; navigation: NavigationStackProp }\n  ) => {\n    const {\n      navigationConfig,\n      navigation,\n      // @ts-ignore\n      onTransitionEnd = navigationConfig.onTransitionEnd,\n    } = this.props;\n    const transitionDestKey = transition.scene.route.key;\n    const isCurrentKey =\n      navigation.state.routes[navigation.state.index].key === transitionDestKey;\n    if (transition.navigation.state.isTransitioning && isCurrentKey) {\n      navigation.dispatch(\n        StackActions.completeTransition({\n          key: navigation.state.key,\n          toChildKey: transitionDestKey,\n        })\n      );\n    }\n    onTransitionEnd && onTransitionEnd(transition, lastTransition);\n  };\n}\n\nexport default StackView;\n"]},"metadata":{},"sourceType":"module"}