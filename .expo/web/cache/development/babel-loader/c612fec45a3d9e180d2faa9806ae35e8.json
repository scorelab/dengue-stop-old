{"ast":null,"code":"'use strict';\n\nimport invariant from 'fbjs/lib/invariant';\nimport isEmpty from \"../isEmpty\";\nimport warning from 'fbjs/lib/warning';\n\nfunction defaultGetRowData(dataBlob, sectionID, rowID) {\n  return dataBlob[sectionID][rowID];\n}\n\nfunction defaultGetSectionHeaderData(dataBlob, sectionID) {\n  return dataBlob[sectionID];\n}\n\nvar ListViewDataSource = function () {\n  function ListViewDataSource(params) {\n    invariant(params && typeof params.rowHasChanged === 'function', 'Must provide a rowHasChanged function.');\n    this._rowHasChanged = params.rowHasChanged;\n    this._getRowData = params.getRowData || defaultGetRowData;\n    this._sectionHeaderHasChanged = params.sectionHeaderHasChanged;\n    this._getSectionHeaderData = params.getSectionHeaderData || defaultGetSectionHeaderData;\n    this._dataBlob = null;\n    this._dirtyRows = [];\n    this._dirtySections = [];\n    this._cachedRowCount = 0;\n    this.rowIdentities = [];\n    this.sectionIdentities = [];\n  }\n\n  var _proto = ListViewDataSource.prototype;\n\n  _proto.cloneWithRows = function cloneWithRows(dataBlob, rowIdentities) {\n    var rowIds = rowIdentities ? [[].concat(rowIdentities)] : null;\n\n    if (!this._sectionHeaderHasChanged) {\n      this._sectionHeaderHasChanged = function () {\n        return false;\n      };\n    }\n\n    return this.cloneWithRowsAndSections({\n      s1: dataBlob\n    }, ['s1'], rowIds);\n  };\n\n  _proto.cloneWithRowsAndSections = function cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities) {\n    invariant(typeof this._sectionHeaderHasChanged === 'function', 'Must provide a sectionHeaderHasChanged function with section data.');\n    invariant(!sectionIdentities || !rowIdentities || sectionIdentities.length === rowIdentities.length, 'row and section ids lengths must be the same');\n    var newSource = new ListViewDataSource({\n      getRowData: this._getRowData,\n      getSectionHeaderData: this._getSectionHeaderData,\n      rowHasChanged: this._rowHasChanged,\n      sectionHeaderHasChanged: this._sectionHeaderHasChanged\n    });\n    newSource._dataBlob = dataBlob;\n\n    if (sectionIdentities) {\n      newSource.sectionIdentities = sectionIdentities;\n    } else {\n      newSource.sectionIdentities = Object.keys(dataBlob);\n    }\n\n    if (rowIdentities) {\n      newSource.rowIdentities = rowIdentities;\n    } else {\n      newSource.rowIdentities = [];\n      newSource.sectionIdentities.forEach(function (sectionID) {\n        newSource.rowIdentities.push(Object.keys(dataBlob[sectionID]));\n      });\n    }\n\n    newSource._cachedRowCount = countRows(newSource.rowIdentities);\n\n    newSource._calculateDirtyArrays(this._dataBlob, this.sectionIdentities, this.rowIdentities);\n\n    return newSource;\n  };\n\n  _proto.getRowCount = function getRowCount() {\n    return this._cachedRowCount;\n  };\n\n  _proto.getRowAndSectionCount = function getRowAndSectionCount() {\n    return this._cachedRowCount + this.sectionIdentities.length;\n  };\n\n  _proto.rowShouldUpdate = function rowShouldUpdate(sectionIndex, rowIndex) {\n    var needsUpdate = this._dirtyRows[sectionIndex][rowIndex];\n    warning(needsUpdate !== undefined, 'missing dirtyBit for section, row: ' + sectionIndex + ', ' + rowIndex);\n    return needsUpdate;\n  };\n\n  _proto.getRowData = function getRowData(sectionIndex, rowIndex) {\n    var sectionID = this.sectionIdentities[sectionIndex];\n    var rowID = this.rowIdentities[sectionIndex][rowIndex];\n    warning(sectionID !== undefined && rowID !== undefined, 'rendering invalid section, row: ' + sectionIndex + ', ' + rowIndex);\n    return this._getRowData(this._dataBlob, sectionID, rowID);\n  };\n\n  _proto.getRowIDForFlatIndex = function getRowIDForFlatIndex(index) {\n    var accessIndex = index;\n\n    for (var ii = 0; ii < this.sectionIdentities.length; ii++) {\n      if (accessIndex >= this.rowIdentities[ii].length) {\n        accessIndex -= this.rowIdentities[ii].length;\n      } else {\n        return this.rowIdentities[ii][accessIndex];\n      }\n    }\n\n    return null;\n  };\n\n  _proto.getSectionIDForFlatIndex = function getSectionIDForFlatIndex(index) {\n    var accessIndex = index;\n\n    for (var ii = 0; ii < this.sectionIdentities.length; ii++) {\n      if (accessIndex >= this.rowIdentities[ii].length) {\n        accessIndex -= this.rowIdentities[ii].length;\n      } else {\n        return this.sectionIdentities[ii];\n      }\n    }\n\n    return null;\n  };\n\n  _proto.getSectionLengths = function getSectionLengths() {\n    var results = [];\n\n    for (var ii = 0; ii < this.sectionIdentities.length; ii++) {\n      results.push(this.rowIdentities[ii].length);\n    }\n\n    return results;\n  };\n\n  _proto.sectionHeaderShouldUpdate = function sectionHeaderShouldUpdate(sectionIndex) {\n    var needsUpdate = this._dirtySections[sectionIndex];\n    warning(needsUpdate !== undefined, 'missing dirtyBit for section: ' + sectionIndex);\n    return needsUpdate;\n  };\n\n  _proto.getSectionHeaderData = function getSectionHeaderData(sectionIndex) {\n    if (!this._getSectionHeaderData) {\n      return null;\n    }\n\n    var sectionID = this.sectionIdentities[sectionIndex];\n    warning(sectionID !== undefined, 'renderSection called on invalid section: ' + sectionIndex);\n    return this._getSectionHeaderData(this._dataBlob, sectionID);\n  };\n\n  _proto._calculateDirtyArrays = function _calculateDirtyArrays(prevDataBlob, prevSectionIDs, prevRowIDs) {\n    var prevSectionsHash = keyedDictionaryFromArray(prevSectionIDs);\n    var prevRowsHash = {};\n\n    for (var ii = 0; ii < prevRowIDs.length; ii++) {\n      var sectionID = prevSectionIDs[ii];\n      warning(!prevRowsHash[sectionID], 'SectionID appears more than once: ' + sectionID);\n      prevRowsHash[sectionID] = keyedDictionaryFromArray(prevRowIDs[ii]);\n    }\n\n    this._dirtySections = [];\n    this._dirtyRows = [];\n    var dirty;\n\n    for (var sIndex = 0; sIndex < this.sectionIdentities.length; sIndex++) {\n      var sectionID = this.sectionIdentities[sIndex];\n      dirty = !prevSectionsHash[sectionID];\n      var sectionHeaderHasChanged = this._sectionHeaderHasChanged;\n\n      if (!dirty && sectionHeaderHasChanged) {\n        dirty = sectionHeaderHasChanged(this._getSectionHeaderData(prevDataBlob, sectionID), this._getSectionHeaderData(this._dataBlob, sectionID));\n      }\n\n      this._dirtySections.push(!!dirty);\n\n      this._dirtyRows[sIndex] = [];\n\n      for (var rIndex = 0; rIndex < this.rowIdentities[sIndex].length; rIndex++) {\n        var rowID = this.rowIdentities[sIndex][rIndex];\n        dirty = !prevSectionsHash[sectionID] || !prevRowsHash[sectionID][rowID] || this._rowHasChanged(this._getRowData(prevDataBlob, sectionID, rowID), this._getRowData(this._dataBlob, sectionID, rowID));\n\n        this._dirtyRows[sIndex].push(!!dirty);\n      }\n    }\n  };\n\n  return ListViewDataSource;\n}();\n\nfunction countRows(allRowIDs) {\n  var totalRows = 0;\n\n  for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {\n    var rowIDs = allRowIDs[sectionIdx];\n    totalRows += rowIDs.length;\n  }\n\n  return totalRows;\n}\n\nfunction keyedDictionaryFromArray(arr) {\n  if (isEmpty(arr)) {\n    return {};\n  }\n\n  var result = {};\n\n  for (var ii = 0; ii < arr.length; ii++) {\n    var key = arr[ii];\n    warning(!result[key], 'Value appears more than once in array: ' + key);\n    result[key] = true;\n  }\n\n  return result;\n}\n\nexport default ListViewDataSource;","map":{"version":3,"sources":["C:/Users/Thivagar/Documents/GSOC Work/dengue-stop/node_modules/react-native-web/dist/vendor/react-native/ListView/ListViewDataSource.js"],"names":["invariant","isEmpty","warning","defaultGetRowData","dataBlob","sectionID","rowID","defaultGetSectionHeaderData","ListViewDataSource","params","rowHasChanged","_rowHasChanged","_getRowData","getRowData","_sectionHeaderHasChanged","sectionHeaderHasChanged","_getSectionHeaderData","getSectionHeaderData","_dataBlob","_dirtyRows","_dirtySections","_cachedRowCount","rowIdentities","sectionIdentities","_proto","prototype","cloneWithRows","rowIds","concat","cloneWithRowsAndSections","s1","length","newSource","Object","keys","forEach","push","countRows","_calculateDirtyArrays","getRowCount","getRowAndSectionCount","rowShouldUpdate","sectionIndex","rowIndex","needsUpdate","undefined","getRowIDForFlatIndex","index","accessIndex","ii","getSectionIDForFlatIndex","getSectionLengths","results","sectionHeaderShouldUpdate","prevDataBlob","prevSectionIDs","prevRowIDs","prevSectionsHash","keyedDictionaryFromArray","prevRowsHash","dirty","sIndex","rIndex","allRowIDs","totalRows","sectionIdx","rowIDs","arr","result","key"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule ListViewDataSource\n * \n * @format\n */\n'use strict';\n\nimport invariant from 'fbjs/lib/invariant';\nimport isEmpty from '../isEmpty';\nimport warning from 'fbjs/lib/warning';\n\nfunction defaultGetRowData(dataBlob, sectionID, rowID) {\n  return dataBlob[sectionID][rowID];\n}\n\nfunction defaultGetSectionHeaderData(dataBlob, sectionID) {\n  return dataBlob[sectionID];\n}\n\n/**\n * Provides efficient data processing and access to the\n * `ListView` component.  A `ListViewDataSource` is created with functions for\n * extracting data from the input blob, and comparing elements (with default\n * implementations for convenience).  The input blob can be as simple as an\n * array of strings, or an object with rows nested inside section objects.\n *\n * To update the data in the datasource, use `cloneWithRows` (or\n * `cloneWithRowsAndSections` if you care about sections).  The data in the\n * data source is immutable, so you can't modify it directly.  The clone methods\n * suck in the new data and compute a diff for each row so ListView knows\n * whether to re-render it or not.\n *\n * In this example, a component receives data in chunks, handled by\n * `_onDataArrived`, which concats the new data onto the old data and updates the\n * data source.  We use `concat` to create a new array - mutating `this._data`,\n * e.g. with `this._data.push(newRowData)`, would be an error. `_rowHasChanged`\n * understands the shape of the row data and knows how to efficiently compare\n * it.\n *\n * ```\n * getInitialState: function() {\n *   var ds = new ListView.DataSource({rowHasChanged: this._rowHasChanged});\n *   return {ds};\n * },\n * _onDataArrived(newData) {\n *   this._data = this._data.concat(newData);\n *   this.setState({\n *     ds: this.state.ds.cloneWithRows(this._data)\n *   });\n * }\n * ```\n */\nvar ListViewDataSource =\n/*#__PURE__*/\nfunction () {\n  /**\n   * You can provide custom extraction and `hasChanged` functions for section\n   * headers and rows.  If absent, data will be extracted with the\n   * `defaultGetRowData` and `defaultGetSectionHeaderData` functions.\n   *\n   * The default extractor expects data of one of the following forms:\n   *\n   *      { sectionID_1: { rowID_1: <rowData1>, ... }, ... }\n   *\n   *    or\n   *\n   *      { sectionID_1: [ <rowData1>, <rowData2>, ... ], ... }\n   *\n   *    or\n   *\n   *      [ [ <rowData1>, <rowData2>, ... ], ... ]\n   *\n   * The constructor takes in a params argument that can contain any of the\n   * following:\n   *\n   * - getRowData(dataBlob, sectionID, rowID);\n   * - getSectionHeaderData(dataBlob, sectionID);\n   * - rowHasChanged(prevRowData, nextRowData);\n   * - sectionHeaderHasChanged(prevSectionData, nextSectionData);\n   */\n  function ListViewDataSource(params) {\n    invariant(params && typeof params.rowHasChanged === 'function', 'Must provide a rowHasChanged function.');\n    this._rowHasChanged = params.rowHasChanged;\n    this._getRowData = params.getRowData || defaultGetRowData;\n    this._sectionHeaderHasChanged = params.sectionHeaderHasChanged;\n    this._getSectionHeaderData = params.getSectionHeaderData || defaultGetSectionHeaderData;\n    this._dataBlob = null;\n    this._dirtyRows = [];\n    this._dirtySections = [];\n    this._cachedRowCount = 0; // These two private variables are accessed by outsiders because ListView\n    // uses them to iterate over the data in this class.\n\n    this.rowIdentities = [];\n    this.sectionIdentities = [];\n  }\n  /**\n   * Clones this `ListViewDataSource` with the specified `dataBlob` and\n   * `rowIdentities`. The `dataBlob` is just an arbitrary blob of data. At\n   * construction an extractor to get the interesting information was defined\n   * (or the default was used).\n   *\n   * The `rowIdentities` is a 2D array of identifiers for rows.\n   * ie. [['a1', 'a2'], ['b1', 'b2', 'b3'], ...].  If not provided, it's\n   * assumed that the keys of the section data are the row identities.\n   *\n   * Note: This function does NOT clone the data in this data source. It simply\n   * passes the functions defined at construction to a new data source with\n   * the data specified. If you wish to maintain the existing data you must\n   * handle merging of old and new data separately and then pass that into\n   * this function as the `dataBlob`.\n   */\n\n\n  var _proto = ListViewDataSource.prototype;\n\n  _proto.cloneWithRows = function cloneWithRows(dataBlob, rowIdentities) {\n    var rowIds = rowIdentities ? [[].concat(rowIdentities)] : null;\n\n    if (!this._sectionHeaderHasChanged) {\n      this._sectionHeaderHasChanged = function () {\n        return false;\n      };\n    }\n\n    return this.cloneWithRowsAndSections({\n      s1: dataBlob\n    }, ['s1'], rowIds);\n  }\n  /**\n   * This performs the same function as the `cloneWithRows` function but here\n   * you also specify what your `sectionIdentities` are. If you don't care\n   * about sections you should safely be able to use `cloneWithRows`.\n   *\n   * `sectionIdentities` is an array of identifiers for sections.\n   * ie. ['s1', 's2', ...].  The identifiers should correspond to the keys or array indexes\n   * of the data you wish to include.  If not provided, it's assumed that the\n   * keys of dataBlob are the section identities.\n   *\n   * Note: this returns a new object!\n   *\n   * ```\n   * const dataSource = ds.cloneWithRowsAndSections({\n   *   addresses: ['row 1', 'row 2'],\n   *   phone_numbers: ['data 1', 'data 2'],\n   * }, ['phone_numbers']);\n   * ```\n   */\n  ;\n\n  _proto.cloneWithRowsAndSections = function cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities) {\n    invariant(typeof this._sectionHeaderHasChanged === 'function', 'Must provide a sectionHeaderHasChanged function with section data.');\n    invariant(!sectionIdentities || !rowIdentities || sectionIdentities.length === rowIdentities.length, 'row and section ids lengths must be the same');\n    var newSource = new ListViewDataSource({\n      getRowData: this._getRowData,\n      getSectionHeaderData: this._getSectionHeaderData,\n      rowHasChanged: this._rowHasChanged,\n      sectionHeaderHasChanged: this._sectionHeaderHasChanged\n    });\n    newSource._dataBlob = dataBlob;\n\n    if (sectionIdentities) {\n      newSource.sectionIdentities = sectionIdentities;\n    } else {\n      newSource.sectionIdentities = Object.keys(dataBlob);\n    }\n\n    if (rowIdentities) {\n      newSource.rowIdentities = rowIdentities;\n    } else {\n      newSource.rowIdentities = [];\n      newSource.sectionIdentities.forEach(function (sectionID) {\n        newSource.rowIdentities.push(Object.keys(dataBlob[sectionID]));\n      });\n    }\n\n    newSource._cachedRowCount = countRows(newSource.rowIdentities);\n\n    newSource._calculateDirtyArrays(this._dataBlob, this.sectionIdentities, this.rowIdentities);\n\n    return newSource;\n  }\n  /**\n   * Returns the total number of rows in the data source.\n   *\n   * If you are specifying the rowIdentities or sectionIdentities, then `getRowCount` will return the number of rows in the filtered data source.\n   */\n  ;\n\n  _proto.getRowCount = function getRowCount() {\n    return this._cachedRowCount;\n  }\n  /**\n   * Returns the total number of rows in the data source (see `getRowCount` for how this is calculated) plus the number of sections in the data.\n   *\n   * If you are specifying the rowIdentities or sectionIdentities, then `getRowAndSectionCount` will return the number of rows & sections in the filtered data source.\n   */\n  ;\n\n  _proto.getRowAndSectionCount = function getRowAndSectionCount() {\n    return this._cachedRowCount + this.sectionIdentities.length;\n  }\n  /**\n   * Returns if the row is dirtied and needs to be rerendered\n   */\n  ;\n\n  _proto.rowShouldUpdate = function rowShouldUpdate(sectionIndex, rowIndex) {\n    var needsUpdate = this._dirtyRows[sectionIndex][rowIndex];\n    warning(needsUpdate !== undefined, 'missing dirtyBit for section, row: ' + sectionIndex + ', ' + rowIndex);\n    return needsUpdate;\n  }\n  /**\n   * Gets the data required to render the row.\n   */\n  ;\n\n  _proto.getRowData = function getRowData(sectionIndex, rowIndex) {\n    var sectionID = this.sectionIdentities[sectionIndex];\n    var rowID = this.rowIdentities[sectionIndex][rowIndex];\n    warning(sectionID !== undefined && rowID !== undefined, 'rendering invalid section, row: ' + sectionIndex + ', ' + rowIndex);\n    return this._getRowData(this._dataBlob, sectionID, rowID);\n  }\n  /**\n   * Gets the rowID at index provided if the dataSource arrays were flattened,\n   * or null of out of range indexes.\n   */\n  ;\n\n  _proto.getRowIDForFlatIndex = function getRowIDForFlatIndex(index) {\n    var accessIndex = index;\n\n    for (var ii = 0; ii < this.sectionIdentities.length; ii++) {\n      if (accessIndex >= this.rowIdentities[ii].length) {\n        accessIndex -= this.rowIdentities[ii].length;\n      } else {\n        return this.rowIdentities[ii][accessIndex];\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Gets the sectionID at index provided if the dataSource arrays were flattened,\n   * or null for out of range indexes.\n   */\n  ;\n\n  _proto.getSectionIDForFlatIndex = function getSectionIDForFlatIndex(index) {\n    var accessIndex = index;\n\n    for (var ii = 0; ii < this.sectionIdentities.length; ii++) {\n      if (accessIndex >= this.rowIdentities[ii].length) {\n        accessIndex -= this.rowIdentities[ii].length;\n      } else {\n        return this.sectionIdentities[ii];\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Returns an array containing the number of rows in each section\n   */\n  ;\n\n  _proto.getSectionLengths = function getSectionLengths() {\n    var results = [];\n\n    for (var ii = 0; ii < this.sectionIdentities.length; ii++) {\n      results.push(this.rowIdentities[ii].length);\n    }\n\n    return results;\n  }\n  /**\n   * Returns if the section header is dirtied and needs to be rerendered\n   */\n  ;\n\n  _proto.sectionHeaderShouldUpdate = function sectionHeaderShouldUpdate(sectionIndex) {\n    var needsUpdate = this._dirtySections[sectionIndex];\n    warning(needsUpdate !== undefined, 'missing dirtyBit for section: ' + sectionIndex);\n    return needsUpdate;\n  }\n  /**\n   * Gets the data required to render the section header\n   */\n  ;\n\n  _proto.getSectionHeaderData = function getSectionHeaderData(sectionIndex) {\n    if (!this._getSectionHeaderData) {\n      return null;\n    }\n\n    var sectionID = this.sectionIdentities[sectionIndex];\n    warning(sectionID !== undefined, 'renderSection called on invalid section: ' + sectionIndex);\n    return this._getSectionHeaderData(this._dataBlob, sectionID);\n  }\n  /**\n   * Private members and methods.\n   */\n  ;\n\n  _proto._calculateDirtyArrays = function _calculateDirtyArrays(prevDataBlob, prevSectionIDs, prevRowIDs) {\n    // construct a hashmap of the existing (old) id arrays\n    var prevSectionsHash = keyedDictionaryFromArray(prevSectionIDs);\n    var prevRowsHash = {};\n\n    for (var ii = 0; ii < prevRowIDs.length; ii++) {\n      var sectionID = prevSectionIDs[ii];\n      warning(!prevRowsHash[sectionID], 'SectionID appears more than once: ' + sectionID);\n      prevRowsHash[sectionID] = keyedDictionaryFromArray(prevRowIDs[ii]);\n    } // compare the 2 identity array and get the dirtied rows\n\n\n    this._dirtySections = [];\n    this._dirtyRows = [];\n    var dirty;\n\n    for (var sIndex = 0; sIndex < this.sectionIdentities.length; sIndex++) {\n      var sectionID = this.sectionIdentities[sIndex]; // dirty if the sectionHeader is new or _sectionHasChanged is true\n\n      dirty = !prevSectionsHash[sectionID];\n      var sectionHeaderHasChanged = this._sectionHeaderHasChanged;\n\n      if (!dirty && sectionHeaderHasChanged) {\n        dirty = sectionHeaderHasChanged(this._getSectionHeaderData(prevDataBlob, sectionID), this._getSectionHeaderData(this._dataBlob, sectionID));\n      }\n\n      this._dirtySections.push(!!dirty);\n\n      this._dirtyRows[sIndex] = [];\n\n      for (var rIndex = 0; rIndex < this.rowIdentities[sIndex].length; rIndex++) {\n        var rowID = this.rowIdentities[sIndex][rIndex]; // dirty if the section is new, row is new or _rowHasChanged is true\n\n        dirty = !prevSectionsHash[sectionID] || !prevRowsHash[sectionID][rowID] || this._rowHasChanged(this._getRowData(prevDataBlob, sectionID, rowID), this._getRowData(this._dataBlob, sectionID, rowID));\n\n        this._dirtyRows[sIndex].push(!!dirty);\n      }\n    }\n  };\n\n  return ListViewDataSource;\n}();\n\nfunction countRows(allRowIDs) {\n  var totalRows = 0;\n\n  for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {\n    var rowIDs = allRowIDs[sectionIdx];\n    totalRows += rowIDs.length;\n  }\n\n  return totalRows;\n}\n\nfunction keyedDictionaryFromArray(arr) {\n  if (isEmpty(arr)) {\n    return {};\n  }\n\n  var result = {};\n\n  for (var ii = 0; ii < arr.length; ii++) {\n    var key = arr[ii];\n    warning(!result[key], 'Value appears more than once in array: ' + key);\n    result[key] = true;\n  }\n\n  return result;\n}\n\nexport default ListViewDataSource;"]},"metadata":{},"sourceType":"module"}