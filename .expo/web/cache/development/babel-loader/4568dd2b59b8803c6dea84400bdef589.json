{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport AnimatedNode from \"./AnimatedNode\";\nimport { val } from \"../val\";\nimport InternalAnimatedValue from \"./InternalAnimatedValue\";\n\nvar AnimatedBlock = function (_AnimatedNode) {\n  _inherits(AnimatedBlock, _AnimatedNode);\n\n  function AnimatedBlock(array) {\n    var _this;\n\n    _classCallCheck(this, AnimatedBlock);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedBlock).call(this, {\n      type: 'block',\n      block: array.map(function (n) {\n        return n.__nodeID;\n      })\n    }, array));\n    _this._array = array;\n    return _this;\n  }\n\n  _createClass(AnimatedBlock, [{\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      var result;\n\n      this._array.forEach(function (node) {\n        result = val(node);\n      });\n\n      return result;\n    }\n  }]);\n\n  return AnimatedBlock;\n}(AnimatedNode);\n\nexport function createAnimatedBlock(items) {\n  return adapt(items);\n}\n\nfunction nodify(v) {\n  if (typeof v === 'object' && v.__isProxy) {\n    if (!v.__val) {\n      v.__val = new InternalAnimatedValue(0);\n    }\n\n    return v.__val;\n  }\n\n  return v instanceof AnimatedNode ? v : InternalAnimatedValue.valueForConstant(v);\n}\n\nexport function adapt(v) {\n  return Array.isArray(v) ? new AnimatedBlock(v.map(function (node) {\n    return adapt(node);\n  })) : nodify(v);\n}","map":{"version":3,"sources":["C:/Users/Thivagar/Documents/GSOC Work/dengue-stop/node_modules/react-native-reanimated/src/core/AnimatedBlock.js"],"names":["AnimatedNode","val","InternalAnimatedValue","AnimatedBlock","array","type","block","map","n","__nodeID","_array","result","forEach","node","createAnimatedBlock","items","adapt","nodify","v","__isProxy","__val","valueForConstant","Array","isArray"],"mappings":";;;;;AAAA,OAAOA,YAAP;AACA,SAASC,GAAT;AACA,OAAOC,qBAAP;;IAEMC,a;;;AAGJ,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,uFAAM;AAAEC,MAAAA,IAAI,EAAE,OAAR;AAAiBC,MAAAA,KAAK,EAAEF,KAAK,CAACG,GAAN,CAAU,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACC,QAAN;AAAA,OAAX;AAAxB,KAAN,EAA4DL,KAA5D;AACA,UAAKM,MAAL,GAAcN,KAAd;AAFiB;AAGlB;;;;mCAEc;AACb,UAAIO,MAAJ;;AACA,WAAKD,MAAL,CAAYE,OAAZ,CAAoB,UAAAC,IAAI,EAAI;AAC1BF,QAAAA,MAAM,GAAGV,GAAG,CAACY,IAAD,CAAZ;AACD,OAFD;;AAGA,aAAOF,MAAP;AACD;;;;EAdyBX,Y;;AAiB5B,OAAO,SAASc,mBAAT,CAA6BC,KAA7B,EAAoC;AACzC,SAAOC,KAAK,CAACD,KAAD,CAAZ;AACD;;AAED,SAASE,MAAT,CAAgBC,CAAhB,EAAmB;AACjB,MAAI,OAAOA,CAAP,KAAa,QAAb,IAAyBA,CAAC,CAACC,SAA/B,EAA0C;AACxC,QAAI,CAACD,CAAC,CAACE,KAAP,EAAc;AACZF,MAAAA,CAAC,CAACE,KAAF,GAAU,IAAIlB,qBAAJ,CAA0B,CAA1B,CAAV;AACD;;AACD,WAAOgB,CAAC,CAACE,KAAT;AACD;;AAED,SAAOF,CAAC,YAAYlB,YAAb,GACHkB,CADG,GAEHhB,qBAAqB,CAACmB,gBAAtB,CAAuCH,CAAvC,CAFJ;AAGD;;AAED,OAAO,SAASF,KAAT,CAAeE,CAAf,EAAkB;AACvB,SAAOI,KAAK,CAACC,OAAN,CAAcL,CAAd,IACH,IAAIf,aAAJ,CAAkBe,CAAC,CAACX,GAAF,CAAM,UAAAM,IAAI;AAAA,WAAIG,KAAK,CAACH,IAAD,CAAT;AAAA,GAAV,CAAlB,CADG,GAEHI,MAAM,CAACC,CAAD,CAFV;AAGD","sourcesContent":["import AnimatedNode from './AnimatedNode';\nimport { val } from '../val';\nimport InternalAnimatedValue from './InternalAnimatedValue';\n\nclass AnimatedBlock extends AnimatedNode {\n  _array;\n\n  constructor(array) {\n    super({ type: 'block', block: array.map(n => n.__nodeID) }, array);\n    this._array = array;\n  }\n\n  __onEvaluate() {\n    let result;\n    this._array.forEach(node => {\n      result = val(node);\n    });\n    return result;\n  }\n}\n\nexport function createAnimatedBlock(items) {\n  return adapt(items);\n}\n\nfunction nodify(v) {\n  if (typeof v === 'object' && v.__isProxy) {\n    if (!v.__val) {\n      v.__val = new InternalAnimatedValue(0);\n    }\n    return v.__val;\n  }\n  // TODO: cache some typical static values (e.g. 0, 1, -1)\n  return v instanceof AnimatedNode\n    ? v\n    : InternalAnimatedValue.valueForConstant(v);\n}\n\nexport function adapt(v) {\n  return Array.isArray(v)\n    ? new AnimatedBlock(v.map(node => adapt(node)))\n    : nodify(v);\n}\n"]},"metadata":{},"sourceType":"module"}