{"ast":null,"code":"'use strict';\n\nvar random = require(\"./random\");\n\nvar onUnload = {},\n    afterUnload = false,\n    isChromePackagedApp = global.chrome && global.chrome.app && global.chrome.app.runtime;\nmodule.exports = {\n  attachEvent: function attachEvent(event, listener) {\n    if (typeof global.addEventListener !== 'undefined') {\n      global.addEventListener(event, listener, false);\n    } else if (global.document && global.attachEvent) {\n      global.document.attachEvent('on' + event, listener);\n      global.attachEvent('on' + event, listener);\n    }\n  },\n  detachEvent: function detachEvent(event, listener) {\n    if (typeof global.addEventListener !== 'undefined') {\n      global.removeEventListener(event, listener, false);\n    } else if (global.document && global.detachEvent) {\n      global.document.detachEvent('on' + event, listener);\n      global.detachEvent('on' + event, listener);\n    }\n  },\n  unloadAdd: function unloadAdd(listener) {\n    if (isChromePackagedApp) {\n      return null;\n    }\n\n    var ref = random.string(8);\n    onUnload[ref] = listener;\n\n    if (afterUnload) {\n      setTimeout(this.triggerUnloadCallbacks, 0);\n    }\n\n    return ref;\n  },\n  unloadDel: function unloadDel(ref) {\n    if (ref in onUnload) {\n      delete onUnload[ref];\n    }\n  },\n  triggerUnloadCallbacks: function triggerUnloadCallbacks() {\n    for (var ref in onUnload) {\n      onUnload[ref]();\n      delete onUnload[ref];\n    }\n  }\n};\n\nvar unloadTriggered = function unloadTriggered() {\n  if (afterUnload) {\n    return;\n  }\n\n  afterUnload = true;\n  module.exports.triggerUnloadCallbacks();\n};\n\nif (!isChromePackagedApp) {\n  module.exports.attachEvent('unload', unloadTriggered);\n}","map":{"version":3,"sources":["C:/Users/Thivagar/AppData/Roaming/npm/node_modules/expo-cli/node_modules/sockjs-client/lib/utils/event.js"],"names":["random","require","onUnload","afterUnload","isChromePackagedApp","global","chrome","app","runtime","module","exports","attachEvent","event","listener","addEventListener","document","detachEvent","removeEventListener","unloadAdd","ref","string","setTimeout","triggerUnloadCallbacks","unloadDel","unloadTriggered"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,YAApB;;AAEA,IAAIC,QAAQ,GAAG,EAAf;AAAA,IACIC,WAAW,GAAG,KADlB;AAAA,IAGIC,mBAAmB,GAAGC,MAAM,CAACC,MAAP,IAAiBD,MAAM,CAACC,MAAP,CAAcC,GAA/B,IAAsCF,MAAM,CAACC,MAAP,CAAcC,GAAd,CAAkBC,OAHlF;AAMAC,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,WAAW,EAAE,qBAASC,KAAT,EAAgBC,QAAhB,EAA0B;AACrC,QAAI,OAAOR,MAAM,CAACS,gBAAd,KAAmC,WAAvC,EAAoD;AAClDT,MAAAA,MAAM,CAACS,gBAAP,CAAwBF,KAAxB,EAA+BC,QAA/B,EAAyC,KAAzC;AACD,KAFD,MAEO,IAAIR,MAAM,CAACU,QAAP,IAAmBV,MAAM,CAACM,WAA9B,EAA2C;AAIhDN,MAAAA,MAAM,CAACU,QAAP,CAAgBJ,WAAhB,CAA4B,OAAOC,KAAnC,EAA0CC,QAA1C;AAEAR,MAAAA,MAAM,CAACM,WAAP,CAAmB,OAAOC,KAA1B,EAAiCC,QAAjC;AACD;AACF,GAZc;AAcfG,EAAAA,WAAW,EAAE,qBAASJ,KAAT,EAAgBC,QAAhB,EAA0B;AACrC,QAAI,OAAOR,MAAM,CAACS,gBAAd,KAAmC,WAAvC,EAAoD;AAClDT,MAAAA,MAAM,CAACY,mBAAP,CAA2BL,KAA3B,EAAkCC,QAAlC,EAA4C,KAA5C;AACD,KAFD,MAEO,IAAIR,MAAM,CAACU,QAAP,IAAmBV,MAAM,CAACW,WAA9B,EAA2C;AAChDX,MAAAA,MAAM,CAACU,QAAP,CAAgBC,WAAhB,CAA4B,OAAOJ,KAAnC,EAA0CC,QAA1C;AACAR,MAAAA,MAAM,CAACW,WAAP,CAAmB,OAAOJ,KAA1B,EAAiCC,QAAjC;AACD;AACF,GArBc;AAuBfK,EAAAA,SAAS,EAAE,mBAASL,QAAT,EAAmB;AAC5B,QAAIT,mBAAJ,EAAyB;AACvB,aAAO,IAAP;AACD;;AAED,QAAIe,GAAG,GAAGnB,MAAM,CAACoB,MAAP,CAAc,CAAd,CAAV;AACAlB,IAAAA,QAAQ,CAACiB,GAAD,CAAR,GAAgBN,QAAhB;;AACA,QAAIV,WAAJ,EAAiB;AACfkB,MAAAA,UAAU,CAAC,KAAKC,sBAAN,EAA8B,CAA9B,CAAV;AACD;;AACD,WAAOH,GAAP;AACD,GAlCc;AAoCfI,EAAAA,SAAS,EAAE,mBAASJ,GAAT,EAAc;AACvB,QAAIA,GAAG,IAAIjB,QAAX,EAAqB;AACnB,aAAOA,QAAQ,CAACiB,GAAD,CAAf;AACD;AACF,GAxCc;AA0CfG,EAAAA,sBAAsB,EAAE,kCAAW;AACjC,SAAK,IAAIH,GAAT,IAAgBjB,QAAhB,EAA0B;AACxBA,MAAAA,QAAQ,CAACiB,GAAD,CAAR;AACA,aAAOjB,QAAQ,CAACiB,GAAD,CAAf;AACD;AACF;AA/Cc,CAAjB;;AAkDA,IAAIK,eAAe,GAAG,SAAlBA,eAAkB,GAAW;AAC/B,MAAIrB,WAAJ,EAAiB;AACf;AACD;;AACDA,EAAAA,WAAW,GAAG,IAAd;AACAM,EAAAA,MAAM,CAACC,OAAP,CAAeY,sBAAf;AACD,CAND;;AAUA,IAAI,CAAClB,mBAAL,EAA0B;AACxBK,EAAAA,MAAM,CAACC,OAAP,CAAeC,WAAf,CAA2B,QAA3B,EAAqCa,eAArC;AACD","sourcesContent":["'use strict';\n\nvar random = require('./random');\n\nvar onUnload = {}\n  , afterUnload = false\n    // detect google chrome packaged apps because they don't allow the 'unload' event\n  , isChromePackagedApp = global.chrome && global.chrome.app && global.chrome.app.runtime\n  ;\n\nmodule.exports = {\n  attachEvent: function(event, listener) {\n    if (typeof global.addEventListener !== 'undefined') {\n      global.addEventListener(event, listener, false);\n    } else if (global.document && global.attachEvent) {\n      // IE quirks.\n      // According to: http://stevesouders.com/misc/test-postmessage.php\n      // the message gets delivered only to 'document', not 'window'.\n      global.document.attachEvent('on' + event, listener);\n      // I get 'window' for ie8.\n      global.attachEvent('on' + event, listener);\n    }\n  }\n\n, detachEvent: function(event, listener) {\n    if (typeof global.addEventListener !== 'undefined') {\n      global.removeEventListener(event, listener, false);\n    } else if (global.document && global.detachEvent) {\n      global.document.detachEvent('on' + event, listener);\n      global.detachEvent('on' + event, listener);\n    }\n  }\n\n, unloadAdd: function(listener) {\n    if (isChromePackagedApp) {\n      return null;\n    }\n\n    var ref = random.string(8);\n    onUnload[ref] = listener;\n    if (afterUnload) {\n      setTimeout(this.triggerUnloadCallbacks, 0);\n    }\n    return ref;\n  }\n\n, unloadDel: function(ref) {\n    if (ref in onUnload) {\n      delete onUnload[ref];\n    }\n  }\n\n, triggerUnloadCallbacks: function() {\n    for (var ref in onUnload) {\n      onUnload[ref]();\n      delete onUnload[ref];\n    }\n  }\n};\n\nvar unloadTriggered = function() {\n  if (afterUnload) {\n    return;\n  }\n  afterUnload = true;\n  module.exports.triggerUnloadCallbacks();\n};\n\n// 'unload' alone is not reliable in opera within an iframe, but we\n// can't use `beforeunload` as IE fires it on javascript: links.\nif (!isChromePackagedApp) {\n  module.exports.attachEvent('unload', unloadTriggered);\n}\n"]},"metadata":{},"sourceType":"script"}