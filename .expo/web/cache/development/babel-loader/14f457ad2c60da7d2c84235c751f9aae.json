{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport ReanimatedEventEmitter from \"../ReanimatedEventEmitter\";\nimport { val } from \"../val\";\nimport AnimatedNode from \"./AnimatedNode\";\nvar NODE_MAPPING = new Map();\n\nfunction listener(data) {\n  var node = NODE_MAPPING.get(data.id);\n  node && node._callback(data.args);\n}\n\nvar AnimatedCall = function (_AnimatedNode) {\n  _inherits(AnimatedCall, _AnimatedNode);\n\n  function AnimatedCall(args, jsFunction) {\n    var _this;\n\n    _classCallCheck(this, AnimatedCall);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedCall).call(this, {\n      type: 'call',\n      input: args.map(function (n) {\n        return n.__nodeID;\n      })\n    }, args));\n    _this._callback = jsFunction;\n    _this._args = args;\n    return _this;\n  }\n\n  _createClass(AnimatedCall, [{\n    key: \"__attach\",\n    value: function __attach() {\n      _get(_getPrototypeOf(AnimatedCall.prototype), \"__attach\", this).call(this);\n\n      NODE_MAPPING.set(this.__nodeID, this);\n\n      if (NODE_MAPPING.size === 1) {\n        ReanimatedEventEmitter.addListener('onReanimatedCall', listener);\n      }\n    }\n  }, {\n    key: \"__detach\",\n    value: function __detach() {\n      NODE_MAPPING.delete(this.__nodeID);\n\n      if (NODE_MAPPING.size === 0) {\n        ReanimatedEventEmitter.removeAllListeners('onReanimatedCall');\n      }\n\n      _get(_getPrototypeOf(AnimatedCall.prototype), \"__detach\", this).call(this);\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      this._callback(this._args.map(val));\n\n      return 0;\n    }\n  }]);\n\n  return AnimatedCall;\n}(AnimatedNode);\n\nexport function createAnimatedCall(args, func) {\n  return new AnimatedCall(args, func);\n}","map":{"version":3,"sources":["C:/Users/Thivagar/Documents/GSOC Work/dengue-stop/node_modules/react-native-reanimated/src/core/AnimatedCall.js"],"names":["ReanimatedEventEmitter","val","AnimatedNode","NODE_MAPPING","Map","listener","data","node","get","id","_callback","args","AnimatedCall","jsFunction","type","input","map","n","__nodeID","_args","set","size","addListener","delete","removeAllListeners","createAnimatedCall","func"],"mappings":";;;;;;AAAA,OAAOA,sBAAP;AACA,SAASC,GAAT;AACA,OAAOC,YAAP;AAEA,IAAMC,YAAY,GAAG,IAAIC,GAAJ,EAArB;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,MAAMC,IAAI,GAAGJ,YAAY,CAACK,GAAb,CAAiBF,IAAI,CAACG,EAAtB,CAAb;AACAF,EAAAA,IAAI,IAAIA,IAAI,CAACG,SAAL,CAAeJ,IAAI,CAACK,IAApB,CAAR;AACD;;IAEKC,Y;;;AAIJ,wBAAYD,IAAZ,EAAkBE,UAAlB,EAA8B;AAAA;;AAAA;;AAC5B,sFAAM;AAAEC,MAAAA,IAAI,EAAE,MAAR;AAAgBC,MAAAA,KAAK,EAAEJ,IAAI,CAACK,GAAL,CAAS,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACC,QAAN;AAAA,OAAV;AAAvB,KAAN,EAA0DP,IAA1D;AACA,UAAKD,SAAL,GAAiBG,UAAjB;AACA,UAAKM,KAAL,GAAaR,IAAb;AAH4B;AAI7B;;;;+BAEU;AACT;;AACAR,MAAAA,YAAY,CAACiB,GAAb,CAAiB,KAAKF,QAAtB,EAAgC,IAAhC;;AACA,UAAIf,YAAY,CAACkB,IAAb,KAAsB,CAA1B,EAA6B;AAC3BrB,QAAAA,sBAAsB,CAACsB,WAAvB,CAAmC,kBAAnC,EAAuDjB,QAAvD;AACD;AACF;;;+BAEU;AACTF,MAAAA,YAAY,CAACoB,MAAb,CAAoB,KAAKL,QAAzB;;AACA,UAAIf,YAAY,CAACkB,IAAb,KAAsB,CAA1B,EAA6B;AAC3BrB,QAAAA,sBAAsB,CAACwB,kBAAvB,CAA0C,kBAA1C;AACD;;AACD;AACD;;;mCAEc;AACb,WAAKd,SAAL,CAAe,KAAKS,KAAL,CAAWH,GAAX,CAAef,GAAf,CAAf;;AACA,aAAO,CAAP;AACD;;;;EA7BwBC,Y;;AAgC3B,OAAO,SAASuB,kBAAT,CAA4Bd,IAA5B,EAAkCe,IAAlC,EAAwC;AAC7C,SAAO,IAAId,YAAJ,CAAiBD,IAAjB,EAAuBe,IAAvB,CAAP;AACD","sourcesContent":["import ReanimatedEventEmitter from '../ReanimatedEventEmitter';\nimport { val } from '../val';\nimport AnimatedNode from './AnimatedNode';\n\nconst NODE_MAPPING = new Map();\n\nfunction listener(data) {\n  const node = NODE_MAPPING.get(data.id);\n  node && node._callback(data.args);\n}\n\nclass AnimatedCall extends AnimatedNode {\n  _callback;\n  _args;\n\n  constructor(args, jsFunction) {\n    super({ type: 'call', input: args.map(n => n.__nodeID) }, args);\n    this._callback = jsFunction;\n    this._args = args;\n  }\n\n  __attach() {\n    super.__attach();\n    NODE_MAPPING.set(this.__nodeID, this);\n    if (NODE_MAPPING.size === 1) {\n      ReanimatedEventEmitter.addListener('onReanimatedCall', listener);\n    }\n  }\n\n  __detach() {\n    NODE_MAPPING.delete(this.__nodeID);\n    if (NODE_MAPPING.size === 0) {\n      ReanimatedEventEmitter.removeAllListeners('onReanimatedCall');\n    }\n    super.__detach();\n  }\n\n  __onEvaluate() {\n    this._callback(this._args.map(val));\n    return 0;\n  }\n}\n\nexport function createAnimatedCall(args, func) {\n  return new AnimatedCall(args, func);\n}\n"]},"metadata":{},"sourceType":"module"}