{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Thivagar\\\\Documents\\\\GSOC Work\\\\dengue-stop\\\\node_modules\\\\react-native-screens\\\\src\\\\screens.web.js\";\nimport debounce from 'debounce';\nimport React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nvar _shouldEnableScreens = true;\nexport function enableScreens() {\n  var shouldEnableScreens = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n  if (shouldEnableScreens) {\n    console.warn('react-native-screens is not fully supported on this platform yet.');\n  }\n\n  _shouldEnableScreens = shouldEnableScreens;\n}\nexport function screensEnabled() {\n  return _shouldEnableScreens;\n}\n\nfunction isAnimatedValue(value) {\n  return value && value.__getValue && value.addListener;\n}\n\nfunction isPropTruthy(prop) {\n  var activeValue = prop;\n\n  if (isAnimatedValue(prop)) {\n    activeValue = prop.__getValue();\n  }\n\n  return !!activeValue;\n}\n\nexport var Screen = function (_React$Component) {\n  _inherits(Screen, _React$Component);\n\n  function Screen(props) {\n    var _this;\n\n    _classCallCheck(this, Screen);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Screen).call(this, props));\n    _this.listenerId = null;\n\n    _this._addListener = function (possibleListener) {\n      if (_this.listenerId) throw new Error('Screen: Attempting to observe an animated value while another value is already observed.');\n\n      if (isAnimatedValue(possibleListener)) {\n        _this.listenerId = possibleListener.addListener(_this._onAnimatedValueUpdated);\n      }\n    };\n\n    _this._removeListener = function (possibleListener) {\n      if (isAnimatedValue(possibleListener)) {\n        possibleListener.removeListener(_this.listenerId);\n        _this.listenerId = null;\n      }\n    };\n\n    _this._onAnimatedValueUpdated = function (_ref) {\n      var value = _ref.value;\n\n      _this._updateDisplay(!!value);\n    };\n\n    _this._updateDisplay = function (isActive) {\n      if (isActive === undefined) {\n        isActive = isPropTruthy(_this.props.active);\n      }\n\n      var display = isActive ? 'flex' : 'none';\n\n      _this.setNativeProps({\n        style: {\n          display: display\n        }\n      });\n    };\n\n    _this.setNativeProps = function (nativeProps) {\n      if (_this._view) {\n        _this._view.setNativeProps(nativeProps);\n      }\n    };\n\n    _this._setRef = function (view) {\n      _this._view = view;\n\n      _this._updateDisplay();\n    };\n\n    _this._onAnimatedValueUpdated = debounce(_this._onAnimatedValueUpdated, 10);\n\n    _this._addListener(props.active);\n\n    return _this;\n  }\n\n  _createClass(Screen, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._removeListener(this.props.active);\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(_ref2) {\n      var nextActive = _ref2.active;\n      var active = this.props.active;\n\n      if (nextActive !== active) {\n        this._removeListener(active);\n\n        this._addListener(nextActive);\n\n        this._updateDisplay(isPropTruthy(nextActive));\n\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Animated.View, _extends({}, this.props, {\n        ref: this._setRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        }\n      }));\n    }\n  }]);\n\n  return Screen;\n}(React.Component);\nScreen.defaultProps = {\n  active: true\n};\nexport var ScreenContainer = View;\nexport var NativeScreen = View;\nexport var NativeScreenContainer = View;","map":{"version":3,"sources":["C:/Users/Thivagar/Documents/GSOC Work/dengue-stop/node_modules/react-native-screens/src/screens.web.js"],"names":["debounce","React","_shouldEnableScreens","enableScreens","shouldEnableScreens","console","warn","screensEnabled","isAnimatedValue","value","__getValue","addListener","isPropTruthy","prop","activeValue","Screen","props","listenerId","_addListener","possibleListener","Error","_onAnimatedValueUpdated","_removeListener","removeListener","_updateDisplay","isActive","undefined","active","display","setNativeProps","style","nativeProps","_view","_setRef","view","nextActive","Component","defaultProps","ScreenContainer","View","NativeScreen","NativeScreenContainer"],"mappings":"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","sourcesContent":["import debounce from 'debounce';\nimport React from 'react';\nimport { Animated, View } from 'react-native';\n\nlet _shouldEnableScreens = true;\n\nexport function enableScreens(shouldEnableScreens = true) {\n  if (shouldEnableScreens) {\n    console.warn(\n      'react-native-screens is not fully supported on this platform yet.'\n    );\n  }\n  _shouldEnableScreens = shouldEnableScreens;\n}\n\nexport function screensEnabled() {\n  return _shouldEnableScreens;\n}\n\nfunction isAnimatedValue(value) {\n  return value && value.__getValue && value.addListener;\n}\n\nfunction isPropTruthy(prop) {\n  let activeValue = prop;\n  if (isAnimatedValue(prop)) {\n    activeValue = prop.__getValue();\n  }\n\n  return !!activeValue;\n}\n\nexport class Screen extends React.Component {\n  static defaultProps = {\n    active: true,\n  };\n\n  listenerId = null;\n\n  constructor(props) {\n    super(props);\n\n    this._onAnimatedValueUpdated = debounce(this._onAnimatedValueUpdated, 10);\n    this._addListener(props.active);\n  }\n\n  componentWillUnmount() {\n    this._removeListener(this.props.active);\n  }\n\n  _addListener = possibleListener => {\n    if (this.listenerId)\n      throw new Error(\n        'Screen: Attempting to observe an animated value while another value is already observed.'\n      );\n    if (isAnimatedValue(possibleListener)) {\n      this.listenerId = possibleListener.addListener(\n        this._onAnimatedValueUpdated\n      );\n    }\n  };\n\n  _removeListener = possibleListener => {\n    if (isAnimatedValue(possibleListener)) {\n      possibleListener.removeListener(this.listenerId);\n      this.listenerId = null;\n    }\n  };\n\n  shouldComponentUpdate({ active: nextActive }) {\n    const { active } = this.props;\n    if (nextActive !== active) {\n      this._removeListener(active);\n      this._addListener(nextActive);\n      this._updateDisplay(isPropTruthy(nextActive));\n      return false;\n    }\n    return true;\n  }\n\n  _onAnimatedValueUpdated = ({ value }) => {\n    this._updateDisplay(!!value);\n  };\n\n  _updateDisplay = isActive => {\n    if (isActive === undefined) {\n      isActive = isPropTruthy(this.props.active);\n    }\n    const display = isActive ? 'flex' : 'none';\n    this.setNativeProps({ style: { display } });\n  };\n\n  setNativeProps = nativeProps => {\n    if (this._view) {\n      this._view.setNativeProps(nativeProps);\n    }\n  };\n\n  _setRef = view => {\n    this._view = view;\n    this._updateDisplay();\n  };\n\n  render() {\n    return <Animated.View {...this.props} ref={this._setRef} />;\n  }\n}\n\nexport const ScreenContainer = View;\n\nexport const NativeScreen = View;\n\nexport const NativeScreenContainer = View;\n"]},"metadata":{},"sourceType":"module"}