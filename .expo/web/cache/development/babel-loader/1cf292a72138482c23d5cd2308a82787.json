{"ast":null,"code":"import _ from 'lodash';\nimport { NavigationActions, StackActions } from 'react-navigation';\nimport * as ActionConst from \"./ActionConst\";\nimport { getActiveState, popPrevious } from \"./State\";\nexport default function createReducer() {\n  return function (state, action) {\n    var navigationStore = require(\"./navigationStore\").default;\n\n    var type = action.type,\n        routeName = action.routeName;\n\n    if (type === ActionConst.POP_TO) {\n      var nextScene = '';\n      var newState = state;\n      var currentState = state;\n\n      while (newState && nextScene !== routeName) {\n        newState = navigationStore.getStateForAction(StackActions.pop(), currentState);\n\n        if (newState) {\n          nextScene = getActiveState(newState).routeName;\n\n          if (nextScene !== routeName && _.isEqual(currentState, newState)) {\n            console.warn(\"popTo called with an unknown routeName: \" + routeName + \", current scene: \" + nextScene);\n            break;\n          }\n\n          if (nextScene !== routeName) {\n            currentState = newState;\n          }\n        }\n      }\n\n      return nextScene === routeName ? newState : state;\n    }\n\n    if (type === ActionConst.REPLACE) {\n      var _newState = navigationStore.getStateForAction(NavigationActions.navigate({\n        routeName: routeName,\n        params: action.params\n      }), state);\n\n      var res = popPrevious(_newState, routeName);\n      return res;\n    }\n\n    return navigationStore.getStateForAction(action, state) || state;\n  };\n}","map":{"version":3,"sources":["C:/Users/Thivagar/Documents/GSOC Work/dengue-stop/node_modules/react-native-router-flux/src/Reducer.js"],"names":["_","NavigationActions","StackActions","ActionConst","getActiveState","popPrevious","createReducer","state","action","navigationStore","require","default","type","routeName","POP_TO","nextScene","newState","currentState","getStateForAction","pop","isEqual","console","warn","REPLACE","navigate","params","res"],"mappings":"AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,SAASC,iBAAT,EAA4BC,YAA5B,QAAgD,kBAAhD;AACA,OAAO,KAAKC,WAAZ;AACA,SAASC,cAAT,EAAyBC,WAAzB;AAEA,eAAe,SAASC,aAAT,GAAyB;AACtC,SAAO,UAACC,KAAD,EAAQC,MAAR,EAAmB;AACxB,QAAMC,eAAe,GAAGC,OAAO,qBAAP,CAA6BC,OAArD;;AADwB,QAEhBC,IAFgB,GAEIJ,MAFJ,CAEhBI,IAFgB;AAAA,QAEVC,SAFU,GAEIL,MAFJ,CAEVK,SAFU;;AAGxB,QAAID,IAAI,KAAKT,WAAW,CAACW,MAAzB,EAAiC;AAC/B,UAAIC,SAAS,GAAG,EAAhB;AACA,UAAIC,QAAQ,GAAGT,KAAf;AACA,UAAIU,YAAY,GAAGV,KAAnB;;AACA,aAAOS,QAAQ,IAAID,SAAS,KAAKF,SAAjC,EAA4C;AAC1CG,QAAAA,QAAQ,GAAGP,eAAe,CAACS,iBAAhB,CAAkChB,YAAY,CAACiB,GAAb,EAAlC,EAAsDF,YAAtD,CAAX;;AACA,YAAID,QAAJ,EAAc;AACZD,UAAAA,SAAS,GAAGX,cAAc,CAACY,QAAD,CAAd,CAAyBH,SAArC;;AACA,cAAIE,SAAS,KAAKF,SAAd,IAA2Bb,CAAC,CAACoB,OAAF,CAAUH,YAAV,EAAwBD,QAAxB,CAA/B,EAAkE;AAChEK,YAAAA,OAAO,CAACC,IAAR,8CAAwDT,SAAxD,yBAAqFE,SAArF;AACA;AACD;;AACD,cAAIA,SAAS,KAAKF,SAAlB,EAA6B;AAC3BI,YAAAA,YAAY,GAAGD,QAAf;AACD;AACF;AACF;;AACD,aAAOD,SAAS,KAAKF,SAAd,GAA0BG,QAA1B,GAAqCT,KAA5C;AACD;;AACD,QAAIK,IAAI,KAAKT,WAAW,CAACoB,OAAzB,EAAkC;AAChC,UAAMP,SAAQ,GAAGP,eAAe,CAACS,iBAAhB,CACfjB,iBAAiB,CAACuB,QAAlB,CAA2B;AACzBX,QAAAA,SAAS,EAATA,SADyB;AAEzBY,QAAAA,MAAM,EAAEjB,MAAM,CAACiB;AAFU,OAA3B,CADe,EAKflB,KALe,CAAjB;;AAOA,UAAMmB,GAAG,GAAGrB,WAAW,CAACW,SAAD,EAAWH,SAAX,CAAvB;AACA,aAAOa,GAAP;AACD;;AACD,WAAOjB,eAAe,CAACS,iBAAhB,CAAkCV,MAAlC,EAA0CD,KAA1C,KAAoDA,KAA3D;AACD,GAlCD;AAmCD","sourcesContent":["import _ from 'lodash';\nimport { NavigationActions, StackActions } from 'react-navigation';\nimport * as ActionConst from './ActionConst';\nimport { getActiveState, popPrevious } from './State';\n\nexport default function createReducer() {\n  return (state, action) => {\n    const navigationStore = require('./navigationStore').default;\n    const { type, routeName } = action;\n    if (type === ActionConst.POP_TO) {\n      let nextScene = '';\n      let newState = state;\n      let currentState = state;\n      while (newState && nextScene !== routeName) {\n        newState = navigationStore.getStateForAction(StackActions.pop(), currentState);\n        if (newState) {\n          nextScene = getActiveState(newState).routeName;\n          if (nextScene !== routeName && _.isEqual(currentState, newState)) {\n            console.warn(`popTo called with an unknown routeName: ${routeName}, current scene: ${nextScene}`);\n            break;\n          }\n          if (nextScene !== routeName) {\n            currentState = newState;\n          }\n        }\n      }\n      return nextScene === routeName ? newState : state;\n    }\n    if (type === ActionConst.REPLACE) {\n      const newState = navigationStore.getStateForAction(\n        NavigationActions.navigate({\n          routeName,\n          params: action.params,\n        }),\n        state,\n      );\n      const res = popPrevious(newState, routeName);\n      return res;\n    }\n    return navigationStore.getStateForAction(action, state) || state;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}