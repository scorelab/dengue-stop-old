{"ast":null,"code":"import { lessThan, multiply, sub, add, divide, greaterThan } from \"../operators\";\nimport { createAnimatedCond as cond } from \"../core/AnimatedCond\";\nimport invariant from 'fbjs/lib/invariant';\nimport AnimatedNode from \"../core/AnimatedNode\";\n\nfunction interpolateInternalSingle(value, inputRange, outputRange, offset) {\n  var inS = inputRange[offset];\n  var inE = inputRange[offset + 1];\n  var outS = outputRange[offset];\n  var outE = outputRange[offset + 1];\n  var progress = divide(sub(value, inS), sub(inE, inS));\n  return add(outS, multiply(progress, sub(outE, outS)));\n}\n\nfunction interpolateInternal(value, inputRange, outputRange) {\n  var offset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n  if (inputRange.length - offset === 2) {\n    return interpolateInternalSingle(value, inputRange, outputRange, offset);\n  }\n\n  return cond(lessThan(value, inputRange[offset + 1]), interpolateInternalSingle(value, inputRange, outputRange, offset), interpolateInternal(value, inputRange, outputRange, offset + 1));\n}\n\nexport var Extrapolate = {\n  EXTEND: 'extend',\n  CLAMP: 'clamp',\n  IDENTITY: 'identity'\n};\n\nfunction checkNonDecreasing(name, arr) {\n  for (var i = 1; i < arr.length; ++i) {\n    if (arr[i] instanceof AnimatedNode || arr[i - 1] instanceof AnimatedNode) continue;\n    invariant(arr[i] >= arr[i - 1], '%s must be monotonically non-decreasing. (%s)', name, arr);\n  }\n}\n\nfunction checkMinElements(name, arr) {\n  invariant(arr.length >= 2, '%s must have at least 2 elements. (%s)', name, arr);\n}\n\nfunction checkValidNumbers(name, arr) {\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i] instanceof AnimatedNode) continue;\n    invariant(Number.isFinite(arr[i]), '%s cannot include %s. (%s)', name, arr[i], arr);\n  }\n}\n\nexport default function interpolate(value, config) {\n  var inputRange = config.inputRange,\n      outputRange = config.outputRange,\n      _config$extrapolate = config.extrapolate,\n      extrapolate = _config$extrapolate === void 0 ? Extrapolate.EXTEND : _config$extrapolate,\n      extrapolateLeft = config.extrapolateLeft,\n      extrapolateRight = config.extrapolateRight;\n  checkMinElements('inputRange', inputRange);\n  checkValidNumbers('inputRange', inputRange);\n  checkMinElements('outputRange', outputRange);\n  checkValidNumbers('outputRange', outputRange);\n  checkNonDecreasing('inputRange', inputRange);\n  invariant(inputRange.length === outputRange.length, 'inputRange and outputRange must be the same length.');\n  var left = extrapolateLeft || extrapolate;\n  var right = extrapolateRight || extrapolate;\n  var output = interpolateInternal(value, inputRange, outputRange);\n\n  if (left === Extrapolate.EXTEND) {} else if (left === Extrapolate.CLAMP) {\n    output = cond(lessThan(value, inputRange[0]), outputRange[0], output);\n  } else if (left === Extrapolate.IDENTITY) {\n    output = cond(lessThan(value, inputRange[0]), value, output);\n  }\n\n  if (right === Extrapolate.EXTEND) {} else if (right === Extrapolate.CLAMP) {\n    output = cond(greaterThan(value, inputRange[inputRange.length - 1]), outputRange[outputRange.length - 1], output);\n  } else if (right === Extrapolate.IDENTITY) {\n    output = cond(greaterThan(value, inputRange[inputRange.length - 1]), value, output);\n  }\n\n  return output;\n}","map":{"version":3,"sources":["C:/Users/Thivagar/Documents/GSOC Work/dengue-stop/node_modules/react-native-reanimated/src/derived/interpolate.js"],"names":["lessThan","multiply","sub","add","divide","greaterThan","createAnimatedCond","cond","invariant","AnimatedNode","interpolateInternalSingle","value","inputRange","outputRange","offset","inS","inE","outS","outE","progress","interpolateInternal","length","Extrapolate","EXTEND","CLAMP","IDENTITY","checkNonDecreasing","name","arr","i","checkMinElements","checkValidNumbers","Number","isFinite","interpolate","config","extrapolate","extrapolateLeft","extrapolateRight","left","right","output"],"mappings":"AAAA,SACEA,QADF,EAEEC,QAFF,EAGEC,GAHF,EAIEC,GAJF,EAKEC,MALF,EAMEC,WANF;AASA,SAASC,kBAAkB,IAAIC,IAA/B;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,YAAP;;AAEA,SAASC,yBAAT,CAAmCC,KAAnC,EAA0CC,UAA1C,EAAsDC,WAAtD,EAAmEC,MAAnE,EAA2E;AACzE,MAAMC,GAAG,GAAGH,UAAU,CAACE,MAAD,CAAtB;AACA,MAAME,GAAG,GAAGJ,UAAU,CAACE,MAAM,GAAG,CAAV,CAAtB;AACA,MAAMG,IAAI,GAAGJ,WAAW,CAACC,MAAD,CAAxB;AACA,MAAMI,IAAI,GAAGL,WAAW,CAACC,MAAM,GAAG,CAAV,CAAxB;AACA,MAAMK,QAAQ,GAAGf,MAAM,CAACF,GAAG,CAACS,KAAD,EAAQI,GAAR,CAAJ,EAAkBb,GAAG,CAACc,GAAD,EAAMD,GAAN,CAArB,CAAvB;AACA,SAAOZ,GAAG,CAACc,IAAD,EAAOhB,QAAQ,CAACkB,QAAD,EAAWjB,GAAG,CAACgB,IAAD,EAAOD,IAAP,CAAd,CAAf,CAAV;AACD;;AAED,SAASG,mBAAT,CAA6BT,KAA7B,EAAoCC,UAApC,EAAgDC,WAAhD,EAAyE;AAAA,MAAZC,MAAY,uEAAH,CAAG;;AACvE,MAAIF,UAAU,CAACS,MAAX,GAAoBP,MAApB,KAA+B,CAAnC,EAAsC;AACpC,WAAOJ,yBAAyB,CAACC,KAAD,EAAQC,UAAR,EAAoBC,WAApB,EAAiCC,MAAjC,CAAhC;AACD;;AACD,SAAOP,IAAI,CACTP,QAAQ,CAACW,KAAD,EAAQC,UAAU,CAACE,MAAM,GAAG,CAAV,CAAlB,CADC,EAETJ,yBAAyB,CAACC,KAAD,EAAQC,UAAR,EAAoBC,WAApB,EAAiCC,MAAjC,CAFhB,EAGTM,mBAAmB,CAACT,KAAD,EAAQC,UAAR,EAAoBC,WAApB,EAAiCC,MAAM,GAAG,CAA1C,CAHV,CAAX;AAKD;;AAED,OAAO,IAAMQ,WAAW,GAAG;AACzBC,EAAAA,MAAM,EAAE,QADiB;AAEzBC,EAAAA,KAAK,EAAE,OAFkB;AAGzBC,EAAAA,QAAQ,EAAE;AAHe,CAApB;;AAMP,SAASC,kBAAT,CAA4BC,IAA5B,EAAkCC,GAAlC,EAAuC;AACrC,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,GAAG,CAACP,MAAxB,EAAgC,EAAEQ,CAAlC,EAAqC;AAEnC,QAAID,GAAG,CAACC,CAAD,CAAH,YAAkBpB,YAAlB,IAAkCmB,GAAG,CAACC,CAAC,GAAG,CAAL,CAAH,YAAsBpB,YAA5D,EACE;AACFD,IAAAA,SAAS,CACPoB,GAAG,CAACC,CAAD,CAAH,IAAUD,GAAG,CAACC,CAAC,GAAG,CAAL,CADN,EAEP,+CAFO,EAGPF,IAHO,EAIPC,GAJO,CAAT;AAMD;AACF;;AAED,SAASE,gBAAT,CAA0BH,IAA1B,EAAgCC,GAAhC,EAAqC;AACnCpB,EAAAA,SAAS,CACPoB,GAAG,CAACP,MAAJ,IAAc,CADP,EAEP,wCAFO,EAGPM,IAHO,EAIPC,GAJO,CAAT;AAMD;;AAED,SAASG,iBAAT,CAA2BJ,IAA3B,EAAiCC,GAAjC,EAAsC;AACpC,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,GAAG,CAACP,MAAxB,EAAgCQ,CAAC,EAAjC,EAAqC;AAEnC,QAAID,GAAG,CAACC,CAAD,CAAH,YAAkBpB,YAAtB,EAAoC;AACpCD,IAAAA,SAAS,CACPwB,MAAM,CAACC,QAAP,CAAgBL,GAAG,CAACC,CAAD,CAAnB,CADO,EAEP,4BAFO,EAGPF,IAHO,EAIPC,GAAG,CAACC,CAAD,CAJI,EAKPD,GALO,CAAT;AAOD;AACF;;AAED,eAAe,SAASM,WAAT,CAAqBvB,KAArB,EAA4BwB,MAA5B,EAAoC;AAAA,MAE/CvB,UAF+C,GAO7CuB,MAP6C,CAE/CvB,UAF+C;AAAA,MAG/CC,WAH+C,GAO7CsB,MAP6C,CAG/CtB,WAH+C;AAAA,4BAO7CsB,MAP6C,CAI/CC,WAJ+C;AAAA,MAI/CA,WAJ+C,oCAIjCd,WAAW,CAACC,MAJqB;AAAA,MAK/Cc,eAL+C,GAO7CF,MAP6C,CAK/CE,eAL+C;AAAA,MAM/CC,gBAN+C,GAO7CH,MAP6C,CAM/CG,gBAN+C;AAQjDR,EAAAA,gBAAgB,CAAC,YAAD,EAAelB,UAAf,CAAhB;AACAmB,EAAAA,iBAAiB,CAAC,YAAD,EAAenB,UAAf,CAAjB;AACAkB,EAAAA,gBAAgB,CAAC,aAAD,EAAgBjB,WAAhB,CAAhB;AACAkB,EAAAA,iBAAiB,CAAC,aAAD,EAAgBlB,WAAhB,CAAjB;AACAa,EAAAA,kBAAkB,CAAC,YAAD,EAAed,UAAf,CAAlB;AACAJ,EAAAA,SAAS,CACPI,UAAU,CAACS,MAAX,KAAsBR,WAAW,CAACQ,MAD3B,EAEP,qDAFO,CAAT;AAKA,MAAMkB,IAAI,GAAGF,eAAe,IAAID,WAAhC;AACA,MAAMI,KAAK,GAAGF,gBAAgB,IAAIF,WAAlC;AACA,MAAIK,MAAM,GAAGrB,mBAAmB,CAACT,KAAD,EAAQC,UAAR,EAAoBC,WAApB,CAAhC;;AAEA,MAAI0B,IAAI,KAAKjB,WAAW,CAACC,MAAzB,EAAiC,CAChC,CADD,MACO,IAAIgB,IAAI,KAAKjB,WAAW,CAACE,KAAzB,EAAgC;AACrCiB,IAAAA,MAAM,GAAGlC,IAAI,CAACP,QAAQ,CAACW,KAAD,EAAQC,UAAU,CAAC,CAAD,CAAlB,CAAT,EAAiCC,WAAW,CAAC,CAAD,CAA5C,EAAiD4B,MAAjD,CAAb;AACD,GAFM,MAEA,IAAIF,IAAI,KAAKjB,WAAW,CAACG,QAAzB,EAAmC;AACxCgB,IAAAA,MAAM,GAAGlC,IAAI,CAACP,QAAQ,CAACW,KAAD,EAAQC,UAAU,CAAC,CAAD,CAAlB,CAAT,EAAiCD,KAAjC,EAAwC8B,MAAxC,CAAb;AACD;;AAED,MAAID,KAAK,KAAKlB,WAAW,CAACC,MAA1B,EAAkC,CACjC,CADD,MACO,IAAIiB,KAAK,KAAKlB,WAAW,CAACE,KAA1B,EAAiC;AACtCiB,IAAAA,MAAM,GAAGlC,IAAI,CACXF,WAAW,CAACM,KAAD,EAAQC,UAAU,CAACA,UAAU,CAACS,MAAX,GAAoB,CAArB,CAAlB,CADA,EAEXR,WAAW,CAACA,WAAW,CAACQ,MAAZ,GAAqB,CAAtB,CAFA,EAGXoB,MAHW,CAAb;AAKD,GANM,MAMA,IAAID,KAAK,KAAKlB,WAAW,CAACG,QAA1B,EAAoC;AACzCgB,IAAAA,MAAM,GAAGlC,IAAI,CACXF,WAAW,CAACM,KAAD,EAAQC,UAAU,CAACA,UAAU,CAACS,MAAX,GAAoB,CAArB,CAAlB,CADA,EAEXV,KAFW,EAGX8B,MAHW,CAAb;AAKD;;AAED,SAAOA,MAAP;AACD","sourcesContent":["import {\n  lessThan,\n  multiply,\n  sub,\n  add,\n  divide,\n  greaterThan,\n} from '../operators';\n\nimport { createAnimatedCond as cond } from '../core/AnimatedCond';\nimport invariant from 'fbjs/lib/invariant';\nimport AnimatedNode from '../core/AnimatedNode';\n\nfunction interpolateInternalSingle(value, inputRange, outputRange, offset) {\n  const inS = inputRange[offset];\n  const inE = inputRange[offset + 1];\n  const outS = outputRange[offset];\n  const outE = outputRange[offset + 1];\n  const progress = divide(sub(value, inS), sub(inE, inS));\n  return add(outS, multiply(progress, sub(outE, outS)));\n}\n\nfunction interpolateInternal(value, inputRange, outputRange, offset = 0) {\n  if (inputRange.length - offset === 2) {\n    return interpolateInternalSingle(value, inputRange, outputRange, offset);\n  }\n  return cond(\n    lessThan(value, inputRange[offset + 1]),\n    interpolateInternalSingle(value, inputRange, outputRange, offset),\n    interpolateInternal(value, inputRange, outputRange, offset + 1)\n  );\n}\n\nexport const Extrapolate = {\n  EXTEND: 'extend',\n  CLAMP: 'clamp',\n  IDENTITY: 'identity',\n};\n\nfunction checkNonDecreasing(name, arr) {\n  for (let i = 1; i < arr.length; ++i) {\n    // We can't validate animated nodes in JS.\n    if (arr[i] instanceof AnimatedNode || arr[i - 1] instanceof AnimatedNode)\n      continue;\n    invariant(\n      arr[i] >= arr[i - 1],\n      '%s must be monotonically non-decreasing. (%s)',\n      name,\n      arr\n    );\n  }\n}\n\nfunction checkMinElements(name, arr) {\n  invariant(\n    arr.length >= 2,\n    '%s must have at least 2 elements. (%s)',\n    name,\n    arr\n  );\n}\n\nfunction checkValidNumbers(name, arr) {\n  for (let i = 0; i < arr.length; i++) {\n    // We can't validate animated nodes in JS.\n    if (arr[i] instanceof AnimatedNode) continue;\n    invariant(\n      Number.isFinite(arr[i]),\n      '%s cannot include %s. (%s)',\n      name,\n      arr[i],\n      arr\n    );\n  }\n}\n\nexport default function interpolate(value, config) {\n  const {\n    inputRange,\n    outputRange,\n    extrapolate = Extrapolate.EXTEND,\n    extrapolateLeft,\n    extrapolateRight,\n  } = config;\n  checkMinElements('inputRange', inputRange);\n  checkValidNumbers('inputRange', inputRange);\n  checkMinElements('outputRange', outputRange);\n  checkValidNumbers('outputRange', outputRange);\n  checkNonDecreasing('inputRange', inputRange);\n  invariant(\n    inputRange.length === outputRange.length,\n    'inputRange and outputRange must be the same length.'\n  );\n\n  const left = extrapolateLeft || extrapolate;\n  const right = extrapolateRight || extrapolate;\n  let output = interpolateInternal(value, inputRange, outputRange);\n\n  if (left === Extrapolate.EXTEND) {\n  } else if (left === Extrapolate.CLAMP) {\n    output = cond(lessThan(value, inputRange[0]), outputRange[0], output);\n  } else if (left === Extrapolate.IDENTITY) {\n    output = cond(lessThan(value, inputRange[0]), value, output);\n  }\n\n  if (right === Extrapolate.EXTEND) {\n  } else if (right === Extrapolate.CLAMP) {\n    output = cond(\n      greaterThan(value, inputRange[inputRange.length - 1]),\n      outputRange[outputRange.length - 1],\n      output\n    );\n  } else if (right === Extrapolate.IDENTITY) {\n    output = cond(\n      greaterThan(value, inputRange[inputRange.length - 1]),\n      value,\n      output\n    );\n  }\n\n  return output;\n}\n"]},"metadata":{},"sourceType":"module"}