{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport AnimatedNode from \"./AnimatedNode\";\nimport { adapt } from \"../core/AnimatedBlock\";\nimport { val } from \"../val\";\n\nvar AnimatedConcat = function (_AnimatedNode) {\n  _inherits(AnimatedConcat, _AnimatedNode);\n\n  function AnimatedConcat(input) {\n    var _this;\n\n    _classCallCheck(this, AnimatedConcat);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedConcat).call(this, {\n      type: 'concat',\n      input: input.map(function (n) {\n        return n.__nodeID;\n      })\n    }, input));\n    _this._input = input;\n    return _this;\n  }\n\n  _createClass(AnimatedConcat, [{\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      return this._input.reduce(function (prev, current) {\n        return prev + val(current);\n      }, '');\n    }\n  }]);\n\n  return AnimatedConcat;\n}(AnimatedNode);\n\nexport function createAnimatedConcat() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return new AnimatedConcat(args.map(adapt));\n}","map":{"version":3,"sources":["C:/Users/Thivagar/Documents/GSOC Work/dengue-stop/node_modules/react-native-reanimated/src/core/AnimatedConcat.js"],"names":["AnimatedNode","adapt","val","AnimatedConcat","input","type","map","n","__nodeID","_input","reduce","prev","current","createAnimatedConcat","args"],"mappings":";;;;;AAAA,OAAOA,YAAP;AACA,SAASC,KAAT;AACA,SAASC,GAAT;;IAEMC,c;;;AACJ,0BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,wFAAM;AAAEC,MAAAA,IAAI,EAAE,QAAR;AAAkBD,MAAAA,KAAK,EAAEA,KAAK,CAACE,GAAN,CAAU,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACC,QAAN;AAAA,OAAX;AAAzB,KAAN,EAA6DJ,KAA7D;AACA,UAAKK,MAAL,GAAcL,KAAd;AAFiB;AAGlB;;;;mCAEc;AACb,aAAO,KAAKK,MAAL,CAAYC,MAAZ,CAAmB,UAACC,IAAD,EAAOC,OAAP;AAAA,eAAmBD,IAAI,GAAGT,GAAG,CAACU,OAAD,CAA7B;AAAA,OAAnB,EAA2D,EAA3D,CAAP;AACD;;;;EAR0BZ,Y;;AAW7B,OAAO,SAASa,oBAAT,GAAuC;AAAA,oCAANC,IAAM;AAANA,IAAAA,IAAM;AAAA;;AAC5C,SAAO,IAAIX,cAAJ,CAAmBW,IAAI,CAACR,GAAL,CAASL,KAAT,CAAnB,CAAP;AACD","sourcesContent":["import AnimatedNode from './AnimatedNode';\nimport { adapt } from '../core/AnimatedBlock';\nimport { val } from '../val';\n\nclass AnimatedConcat extends AnimatedNode {\n  constructor(input) {\n    super({ type: 'concat', input: input.map(n => n.__nodeID) }, input);\n    this._input = input;\n  }\n\n  __onEvaluate() {\n    return this._input.reduce((prev, current) => prev + val(current), '');\n  }\n}\n\nexport function createAnimatedConcat(...args) {\n  return new AnimatedConcat(args.map(adapt));\n}\n"]},"metadata":{},"sourceType":"module"}