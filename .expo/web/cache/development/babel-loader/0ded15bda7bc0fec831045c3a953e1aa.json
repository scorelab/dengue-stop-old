{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Hammer from '@egjs/hammerjs';\nimport DiscreteGestureHandler from \"./DiscreteGestureHandler\";\nimport { isnan } from \"./utils\";\n\nvar TapGestureHandler = function (_DiscreteGestureHandl) {\n  _inherits(TapGestureHandler, _DiscreteGestureHandl);\n\n  function TapGestureHandler() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TapGestureHandler);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TapGestureHandler)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.onSuccessfulTap = function (ev) {\n      if (_this._getPendingGestures().length) {\n        _this._shouldFireEndEvent = ev;\n        return;\n      }\n\n      if (ev.eventType === Hammer.INPUT_END) {\n        _this.sendEvent(_objectSpread({}, ev, {\n          eventType: Hammer.INPUT_MOVE\n        }));\n      }\n\n      _this.sendEvent(_objectSpread({}, ev, {\n        isFinal: true\n      }));\n\n      _this.onGestureEnded(ev);\n    };\n\n    return _this;\n  }\n\n  _createClass(TapGestureHandler, [{\n    key: \"simulateCancelEvent\",\n    value: function simulateCancelEvent(inputData) {\n      if (this.isGestureRunning) {\n        this.cancelEvent(inputData);\n      }\n    }\n  }, {\n    key: \"onGestureActivated\",\n    value: function onGestureActivated(ev) {\n      if (this.isGestureRunning) {\n        this.onSuccessfulTap(ev);\n      }\n    }\n  }, {\n    key: \"onRawEvent\",\n    value: function onRawEvent(ev) {\n      var _this2 = this;\n\n      _get(_getPrototypeOf(TapGestureHandler.prototype), \"onRawEvent\", this).call(this, ev);\n\n      if (!this.hasGestureFailed && !this.isGestureRunning && !ev.isFinal) {\n        var gesture = this.hammer.get(this.name);\n\n        if (gesture.options.enable(gesture, ev)) {\n          clearTimeout(this._multiTapTimer);\n          this.onStart(ev);\n          this.sendEvent(ev);\n        }\n      }\n\n      if (ev.isFinal && ev.maxPointers > 1) {\n        setTimeout(function () {\n          if (_this2.isGestureRunning) {\n            _this2.cancelEvent(ev);\n          }\n        });\n      }\n\n      if (this.hasGestureFailed) {\n        return;\n      }\n\n      if (ev.isFinal) {\n        if (ev.maxPointers > 1) {\n          setTimeout(function () {\n            if (_this2.isGestureRunning) {\n              _this2.cancelEvent(ev);\n            }\n          });\n        }\n\n        clearTimeout(this._timer);\n        this._timer = setTimeout(function () {\n          _this2.hasGestureFailed = true;\n\n          _this2.cancelEvent(ev);\n        }, this.maxDelayMs);\n      } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n        var _gesture = this.hammer.get(this.name);\n\n        if (_gesture.options.enable(_gesture, ev)) {\n          clearTimeout(this._multiTapTimer);\n          this.onStart(ev);\n          this.sendEvent(ev);\n        }\n      }\n    }\n  }, {\n    key: \"getHammerConfig\",\n    value: function getHammerConfig() {\n      return _objectSpread({}, _get(_getPrototypeOf(TapGestureHandler.prototype), \"getHammerConfig\", this).call(this), {\n        event: this.name,\n        taps: isnan(this.config.numberOfTaps) ? 1 : this.config.numberOfTaps,\n        interval: this.maxDelayMs,\n        time: isnan(this.config.maxDurationMs) || this.config.maxDurationMs == null ? 250 : this.config.maxDurationMs\n      });\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref) {\n      var _ref$shouldCancelWhen = _ref.shouldCancelWhenOutside,\n          shouldCancelWhenOutside = _ref$shouldCancelWhen === void 0 ? true : _ref$shouldCancelWhen,\n          _ref$maxDeltaX = _ref.maxDeltaX,\n          maxDeltaX = _ref$maxDeltaX === void 0 ? Number.NaN : _ref$maxDeltaX,\n          _ref$maxDeltaY = _ref.maxDeltaY,\n          maxDeltaY = _ref$maxDeltaY === void 0 ? Number.NaN : _ref$maxDeltaY,\n          _ref$numberOfTaps = _ref.numberOfTaps,\n          numberOfTaps = _ref$numberOfTaps === void 0 ? 1 : _ref$numberOfTaps,\n          _ref$minDurationMs = _ref.minDurationMs,\n          minDurationMs = _ref$minDurationMs === void 0 ? 525 : _ref$minDurationMs,\n          _ref$maxDelayMs = _ref.maxDelayMs,\n          maxDelayMs = _ref$maxDelayMs === void 0 ? Number.NaN : _ref$maxDelayMs,\n          _ref$maxDurationMs = _ref.maxDurationMs,\n          maxDurationMs = _ref$maxDurationMs === void 0 ? Number.NaN : _ref$maxDurationMs,\n          _ref$maxDist = _ref.maxDist,\n          maxDist = _ref$maxDist === void 0 ? 2 : _ref$maxDist,\n          _ref$minPointers = _ref.minPointers,\n          minPointers = _ref$minPointers === void 0 ? 1 : _ref$minPointers,\n          _ref$maxPointers = _ref.maxPointers,\n          maxPointers = _ref$maxPointers === void 0 ? 1 : _ref$maxPointers,\n          props = _objectWithoutProperties(_ref, [\"shouldCancelWhenOutside\", \"maxDeltaX\", \"maxDeltaY\", \"numberOfTaps\", \"minDurationMs\", \"maxDelayMs\", \"maxDurationMs\", \"maxDist\", \"minPointers\", \"maxPointers\"]);\n\n      return _get(_getPrototypeOf(TapGestureHandler.prototype), \"updateGestureConfig\", this).call(this, _objectSpread({\n        shouldCancelWhenOutside: shouldCancelWhenOutside,\n        numberOfTaps: numberOfTaps,\n        maxDeltaX: maxDeltaX,\n        maxDeltaY: maxDeltaY,\n        minDurationMs: minDurationMs,\n        maxDelayMs: maxDelayMs,\n        maxDist: maxDist,\n        minPointers: minPointers,\n        maxPointers: maxPointers\n      }, props));\n    }\n  }, {\n    key: \"onGestureEnded\",\n    value: function onGestureEnded() {\n      var _get2;\n\n      clearTimeout(this._timer);\n\n      for (var _len2 = arguments.length, props = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        props[_key2] = arguments[_key2];\n      }\n\n      (_get2 = _get(_getPrototypeOf(TapGestureHandler.prototype), \"onGestureEnded\", this)).call.apply(_get2, [this].concat(props));\n    }\n  }, {\n    key: \"onWaitingEnded\",\n    value: function onWaitingEnded(gesture) {\n      if (this._shouldFireEndEvent) {\n        this.onSuccessfulTap(this._shouldFireEndEvent);\n        this._shouldFireEndEvent = null;\n      }\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return 'tap';\n    }\n  }, {\n    key: \"NativeGestureClass\",\n    get: function get() {\n      return Hammer.Tap;\n    }\n  }, {\n    key: \"maxDelayMs\",\n    get: function get() {\n      return isnan(this.config.maxDelayMs) ? 300 : this.config.maxDelayMs;\n    }\n  }]);\n\n  return TapGestureHandler;\n}(DiscreteGestureHandler);\n\nexport default TapGestureHandler;","map":{"version":3,"sources":["C:/Users/Thivagar/Documents/GSOC Work/dengue-stop/node_modules/react-native-gesture-handler/web/TapGestureHandler.js"],"names":["Hammer","DiscreteGestureHandler","isnan","TapGestureHandler","onSuccessfulTap","ev","_getPendingGestures","length","_shouldFireEndEvent","eventType","INPUT_END","sendEvent","INPUT_MOVE","isFinal","onGestureEnded","inputData","isGestureRunning","cancelEvent","hasGestureFailed","gesture","hammer","get","name","options","enable","clearTimeout","_multiTapTimer","onStart","maxPointers","setTimeout","_timer","maxDelayMs","event","taps","config","numberOfTaps","interval","time","maxDurationMs","shouldCancelWhenOutside","maxDeltaX","Number","NaN","maxDeltaY","minDurationMs","maxDist","minPointers","props","Tap"],"mappings":"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","sourcesContent":["import Hammer from '@egjs/hammerjs';\n\nimport DiscreteGestureHandler from './DiscreteGestureHandler';\nimport { isnan } from './utils';\n\nclass TapGestureHandler extends DiscreteGestureHandler {\n  get name() {\n    return 'tap';\n  }\n\n  get NativeGestureClass() {\n    return Hammer.Tap;\n  }\n\n  get maxDelayMs() {\n    return isnan(this.config.maxDelayMs) ? 300 : this.config.maxDelayMs;\n  }\n\n  simulateCancelEvent(inputData) {\n    if (this.isGestureRunning) {\n      this.cancelEvent(inputData);\n    }\n  }\n\n  onGestureActivated(ev) {\n    if (this.isGestureRunning) {\n      this.onSuccessfulTap(ev);\n    }\n  }\n\n  onSuccessfulTap = ev => {\n    if (this._getPendingGestures().length) {\n      this._shouldFireEndEvent = ev;\n      return;\n    }\n    if (ev.eventType === Hammer.INPUT_END) {\n      this.sendEvent({ ...ev, eventType: Hammer.INPUT_MOVE });\n    }\n    // When handler gets activated it will turn into State.END immediately.\n    this.sendEvent({ ...ev, isFinal: true });\n    this.onGestureEnded(ev);\n  };\n\n  onRawEvent(ev) {\n    super.onRawEvent(ev);\n\n    // Attempt to create a touch-down event by checking if a valid tap hasn't started yet, then validating the input.\n    if (\n      !this.hasGestureFailed &&\n      !this.isGestureRunning &&\n      // Prevent multi-pointer events from misfiring.\n      !ev.isFinal\n    ) {\n      // Tap Gesture start event\n      const gesture = this.hammer.get(this.name);\n      if (gesture.options.enable(gesture, ev)) {\n        clearTimeout(this._multiTapTimer);\n\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n    if (ev.isFinal && ev.maxPointers > 1) {\n      setTimeout(() => {\n        // Handle case where one finger presses slightly\n        // after the first finger on a multi-tap event\n        if (this.isGestureRunning) {\n          this.cancelEvent(ev);\n        }\n      });\n    }\n\n    if (this.hasGestureFailed) {\n      return;\n    }\n    // Hammer doesn't send a `cancel` event for taps.\n    // Manually fail the event.\n    if (ev.isFinal) {\n      // Handle case where one finger presses slightly\n      // after the first finger on a multi-tap event\n      if (ev.maxPointers > 1) {\n        setTimeout(() => {\n          if (this.isGestureRunning) {\n            this.cancelEvent(ev);\n          }\n        });\n      }\n\n      // Clear last timer\n      clearTimeout(this._timer);\n      // Create time out for multi-taps.\n      this._timer = setTimeout(() => {\n        this.hasGestureFailed = true;\n        this.cancelEvent(ev);\n      }, this.maxDelayMs);\n    } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n      // Tap Gesture start event\n      const gesture = this.hammer.get(this.name);\n      if (gesture.options.enable(gesture, ev)) {\n        clearTimeout(this._multiTapTimer);\n\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n  }\n\n  getHammerConfig() {\n    return {\n      ...super.getHammerConfig(),\n      event: this.name,\n      taps: isnan(this.config.numberOfTaps) ? 1 : this.config.numberOfTaps,\n      interval: this.maxDelayMs,\n      time:\n        isnan(this.config.maxDurationMs) || this.config.maxDurationMs == null\n          ? 250\n          : this.config.maxDurationMs,\n    };\n  }\n\n  updateGestureConfig({\n    shouldCancelWhenOutside = true,\n    maxDeltaX = Number.NaN,\n    maxDeltaY = Number.NaN,\n    numberOfTaps = 1,\n    minDurationMs = 525,\n    maxDelayMs = Number.NaN,\n    maxDurationMs = Number.NaN,\n    maxDist = 2,\n    minPointers = 1,\n    maxPointers = 1,\n    ...props\n  }) {\n    return super.updateGestureConfig({\n      shouldCancelWhenOutside,\n      numberOfTaps,\n      maxDeltaX,\n      maxDeltaY,\n      minDurationMs,\n      maxDelayMs,\n      maxDist,\n      minPointers,\n      maxPointers,\n      ...props,\n    });\n  }\n\n  onGestureEnded(...props) {\n    clearTimeout(this._timer);\n    super.onGestureEnded(...props);\n  }\n\n  onWaitingEnded(gesture) {\n    if (this._shouldFireEndEvent) {\n      this.onSuccessfulTap(this._shouldFireEndEvent);\n      this._shouldFireEndEvent = null;\n    }\n  }\n}\nexport default TapGestureHandler;\n"]},"metadata":{},"sourceType":"module"}