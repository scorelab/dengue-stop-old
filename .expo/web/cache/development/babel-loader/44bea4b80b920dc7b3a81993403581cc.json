{"ast":null,"code":"export default function memoize(callback) {\n  var previous;\n  var result;\n  return function () {\n    var hasChanged = false;\n\n    for (var _len = arguments.length, dependencies = new Array(_len), _key = 0; _key < _len; _key++) {\n      dependencies[_key] = arguments[_key];\n    }\n\n    if (previous) {\n      if (previous.length !== dependencies.length) {\n        hasChanged = true;\n      } else {\n        for (var i = 0; i < previous.length; i++) {\n          if (previous[i] !== dependencies[i]) {\n            hasChanged = true;\n            break;\n          }\n        }\n      }\n    } else {\n      hasChanged = true;\n    }\n\n    previous = dependencies;\n\n    if (hasChanged || result === undefined) {\n      result = callback.apply(void 0, dependencies);\n    }\n\n    return result;\n  };\n}","map":{"version":3,"sources":["memoize.tsx"],"names":["dependencies","hasChanged","previous","i","result","callback"],"mappings":"AAAA,eAAe,SAAA,OAAA,CAAA,QAAA,EAEb;AACA,MAAA,QAAA;AACA,MAAA,MAAA;AAEA,SAAO,YAAmC;AACxC,QAAIC,UAAU,GAAd,KAAA;;AADwC,SAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAA/BD,YAA+B,GAAA,IAAA,KAAA,CAAA,IAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;AAA/BA,MAAAA,YAA+B,CAAA,IAAA,CAA/BA,GAA+B,SAAA,CAAA,IAAA,CAA/BA;AAGT;;AAAA,QAAA,QAAA,EAAc;AACZ,UAAIE,QAAQ,CAARA,MAAAA,KAAoBF,YAAY,CAApC,MAAA,EAA6C;AAC3CC,QAAAA,UAAU,GAAVA,IAAAA;AADF,OAAA,MAEO;AACL,aAAK,IAAIE,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGD,QAAQ,CAA5B,MAAA,EAAqCC,CAArC,EAAA,EAA0C;AACxC,cAAID,QAAQ,CAARA,CAAQ,CAARA,KAAgBF,YAAY,CAAhC,CAAgC,CAAhC,EAAqC;AACnCC,YAAAA,UAAU,GAAVA,IAAAA;AACA;AAEH;AACF;AACF;AAXD,KAAA,MAWO;AACLA,MAAAA,UAAU,GAAVA,IAAAA;AAGFC;;AAAAA,IAAAA,QAAQ,GAARA,YAAAA;;AAEA,QAAID,UAAU,IAAIG,MAAM,KAAxB,SAAA,EAAwC;AACtCA,MAAAA,MAAM,GAAGC,QAAQ,CAARA,KAAAA,CAAAA,KAAAA,CAAAA,EAATD,YAASC,CAATD;AAGF;;AAAA,WAAA,MAAA;AAxBF,GAAA;AA0BD","sourcesContent":["export default function memoize<Result, Deps extends readonly any[]>(\n  callback: (...deps: Deps) => Result\n) {\n  let previous: Deps | undefined;\n  let result: Result | undefined;\n\n  return (...dependencies: Deps): Result => {\n    let hasChanged = false;\n\n    if (previous) {\n      if (previous.length !== dependencies.length) {\n        hasChanged = true;\n      } else {\n        for (let i = 0; i < previous.length; i++) {\n          if (previous[i] !== dependencies[i]) {\n            hasChanged = true;\n            break;\n          }\n        }\n      }\n    } else {\n      hasChanged = true;\n    }\n\n    previous = dependencies;\n\n    if (hasChanged || result === undefined) {\n      result = callback(...dependencies);\n    }\n\n    return result;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}