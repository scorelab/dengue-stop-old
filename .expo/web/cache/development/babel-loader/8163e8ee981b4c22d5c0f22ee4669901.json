{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport AnimatedNode from \"./AnimatedNode\";\nimport { createOrReuseTransformNode } from \"./AnimatedTransform\";\nimport deepEqual from 'fbjs/lib/areEqual';\n\nfunction sanitizeStyle(inputStyle) {\n  var style = {};\n\n  for (var key in inputStyle) {\n    var value = inputStyle[key];\n\n    if (value instanceof AnimatedNode) {\n      style[key] = value.__nodeID;\n    }\n  }\n\n  return style;\n}\n\nexport function createOrReuseStyleNode(style, oldNode) {\n  style = StyleSheet.flatten(style) || {};\n\n  if (style.transform) {\n    style = _objectSpread({}, style, {\n      transform: createOrReuseTransformNode(style.transform, oldNode && oldNode._style.transform)\n    });\n  }\n\n  var config = sanitizeStyle(style);\n\n  if (oldNode && deepEqual(config, oldNode._config)) {\n    return oldNode;\n  }\n\n  return new AnimatedStyle(style, config);\n}\n\nvar AnimatedStyle = function (_AnimatedNode) {\n  _inherits(AnimatedStyle, _AnimatedNode);\n\n  function AnimatedStyle(style, config) {\n    var _this;\n\n    _classCallCheck(this, AnimatedStyle);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedStyle).call(this, {\n      type: 'style',\n      style: config\n    }, Object.values(style)));\n    _this._config = config;\n    _this._style = style;\n    return _this;\n  }\n\n  _createClass(AnimatedStyle, [{\n    key: \"_walkStyleAndGetAnimatedValues\",\n    value: function _walkStyleAndGetAnimatedValues(style) {\n      var updatedStyle = {};\n\n      for (var key in style) {\n        var value = style[key];\n\n        if (value instanceof AnimatedNode) {\n          updatedStyle[key] = value.__getValue();\n        } else if (value && !Array.isArray(value) && typeof value === 'object') {\n          updatedStyle[key] = this._walkStyleAndGetAnimatedValues(value);\n        }\n      }\n\n      return updatedStyle;\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      return this._walkStyleAndGetAnimatedValues(this._style);\n    }\n  }]);\n\n  return AnimatedStyle;\n}(AnimatedNode);\n\nexport { AnimatedStyle as default };","map":{"version":3,"sources":["C:/Users/Thivagar/Documents/GSOC Work/dengue-stop/node_modules/react-native-reanimated/src/core/AnimatedStyle.js"],"names":["AnimatedNode","createOrReuseTransformNode","deepEqual","sanitizeStyle","inputStyle","style","key","value","__nodeID","createOrReuseStyleNode","oldNode","StyleSheet","flatten","transform","_style","config","_config","AnimatedStyle","type","Object","values","updatedStyle","__getValue","Array","isArray","_walkStyleAndGetAnimatedValues"],"mappings":";;;;;;;;;;;;AAEA,OAAOA,YAAP;AACA,SAASC,0BAAT;AAEA,OAAOC,SAAP,MAAsB,mBAAtB;;AAEA,SAASC,aAAT,CAAuBC,UAAvB,EAAmC;AACjC,MAAMC,KAAK,GAAG,EAAd;;AACA,OAAK,IAAMC,GAAX,IAAkBF,UAAlB,EAA8B;AAC5B,QAAMG,KAAK,GAAGH,UAAU,CAACE,GAAD,CAAxB;;AACA,QAAIC,KAAK,YAAYP,YAArB,EAAmC;AACjCK,MAAAA,KAAK,CAACC,GAAD,CAAL,GAAaC,KAAK,CAACC,QAAnB;AACD;AACF;;AACD,SAAOH,KAAP;AACD;;AAED,OAAO,SAASI,sBAAT,CAAgCJ,KAAhC,EAAuCK,OAAvC,EAAgD;AACrDL,EAAAA,KAAK,GAAGM,UAAU,CAACC,OAAX,CAAmBP,KAAnB,KAA6B,EAArC;;AACA,MAAIA,KAAK,CAACQ,SAAV,EAAqB;AACnBR,IAAAA,KAAK,qBACAA,KADA;AAEHQ,MAAAA,SAAS,EAAEZ,0BAA0B,CACnCI,KAAK,CAACQ,SAD6B,EAEnCH,OAAO,IAAIA,OAAO,CAACI,MAAR,CAAeD,SAFS;AAFlC,MAAL;AAOD;;AACD,MAAME,MAAM,GAAGZ,aAAa,CAACE,KAAD,CAA5B;;AACA,MAAIK,OAAO,IAAIR,SAAS,CAACa,MAAD,EAASL,OAAO,CAACM,OAAjB,CAAxB,EAAmD;AACjD,WAAON,OAAP;AACD;;AACD,SAAO,IAAIO,aAAJ,CAAkBZ,KAAlB,EAAyBU,MAAzB,CAAP;AACD;;IAMoBE,a;;;AACnB,yBAAYZ,KAAZ,EAAmBU,MAAnB,EAA2B;AAAA;;AAAA;;AACzB,uFAAM;AAAEG,MAAAA,IAAI,EAAE,OAAR;AAAiBb,MAAAA,KAAK,EAAEU;AAAxB,KAAN,EAAwCI,MAAM,CAACC,MAAP,CAAcf,KAAd,CAAxC;AACA,UAAKW,OAAL,GAAeD,MAAf;AACA,UAAKD,MAAL,GAAcT,KAAd;AAHyB;AAI1B;;;;mDAE8BA,K,EAAO;AACpC,UAAMgB,YAAY,GAAG,EAArB;;AACA,WAAK,IAAMf,GAAX,IAAkBD,KAAlB,EAAyB;AACvB,YAAME,KAAK,GAAGF,KAAK,CAACC,GAAD,CAAnB;;AACA,YAAIC,KAAK,YAAYP,YAArB,EAAmC;AACjCqB,UAAAA,YAAY,CAACf,GAAD,CAAZ,GAAoBC,KAAK,CAACe,UAAN,EAApB;AACD,SAFD,MAEO,IAAIf,KAAK,IAAI,CAACgB,KAAK,CAACC,OAAN,CAAcjB,KAAd,CAAV,IAAkC,OAAOA,KAAP,KAAiB,QAAvD,EAAiE;AAEtEc,UAAAA,YAAY,CAACf,GAAD,CAAZ,GAAoB,KAAKmB,8BAAL,CAAoClB,KAApC,CAApB;AACD;AACF;;AACD,aAAOc,YAAP;AACD;;;mCAEc;AACb,aAAO,KAAKI,8BAAL,CAAoC,KAAKX,MAAzC,CAAP;AACD;;;;EAvBwCd,Y;;SAAtBiB,a","sourcesContent":["import { StyleSheet } from 'react-native';\n\nimport AnimatedNode from './AnimatedNode';\nimport { createOrReuseTransformNode } from './AnimatedTransform';\n\nimport deepEqual from 'fbjs/lib/areEqual';\n\nfunction sanitizeStyle(inputStyle) {\n  const style = {};\n  for (const key in inputStyle) {\n    const value = inputStyle[key];\n    if (value instanceof AnimatedNode) {\n      style[key] = value.__nodeID;\n    }\n  }\n  return style;\n}\n\nexport function createOrReuseStyleNode(style, oldNode) {\n  style = StyleSheet.flatten(style) || {};\n  if (style.transform) {\n    style = {\n      ...style,\n      transform: createOrReuseTransformNode(\n        style.transform,\n        oldNode && oldNode._style.transform\n      ),\n    };\n  }\n  const config = sanitizeStyle(style);\n  if (oldNode && deepEqual(config, oldNode._config)) {\n    return oldNode;\n  }\n  return new AnimatedStyle(style, config);\n}\n\n/**\n * AnimatedStyle should never be directly instantiated, use createOrReuseStyleNode\n * in order to make a new instance of this node.\n */\nexport default class AnimatedStyle extends AnimatedNode {\n  constructor(style, config) {\n    super({ type: 'style', style: config }, Object.values(style));\n    this._config = config;\n    this._style = style;\n  }\n\n  _walkStyleAndGetAnimatedValues(style) {\n    const updatedStyle = {};\n    for (const key in style) {\n      const value = style[key];\n      if (value instanceof AnimatedNode) {\n        updatedStyle[key] = value.__getValue();\n      } else if (value && !Array.isArray(value) && typeof value === 'object') {\n        // Support animating nested values (for example: shadowOffset.height)\n        updatedStyle[key] = this._walkStyleAndGetAnimatedValues(value);\n      }\n    }\n    return updatedStyle;\n  }\n\n  __onEvaluate() {\n    return this._walkStyleAndGetAnimatedValues(this._style);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}