{"ast":null,"code":"import ExecutionEnvironment from 'fbjs/lib/ExecutionEnvironment';\nimport findIndex from 'array-find-index';\nimport invariant from 'fbjs/lib/invariant';\nvar connection = ExecutionEnvironment.canUseDOM && (window.navigator.connection || window.navigator.mozConnection || window.navigator.webkitConnection);\n\nvar getConnectionInfoObject = function getConnectionInfoObject() {\n  var result = {\n    effectiveType: 'unknown',\n    type: 'unknown'\n  };\n\n  if (!connection) {\n    return result;\n  }\n\n  for (var prop in connection) {\n    var value = connection[prop];\n\n    if (typeof value !== 'function' && value != null) {\n      result[prop] = value;\n    }\n  }\n\n  return result;\n};\n\nvar eventTypesMap = {\n  change: 'change',\n  connectionChange: 'change'\n};\nvar eventTypes = Object.keys(eventTypesMap);\nvar connectionListeners = [];\nvar netInfoListeners = [];\nvar NetInfo = {\n  addEventListener: function addEventListener(type, handler) {\n    invariant(eventTypes.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n\n    if (type === 'change') {\n      console.warn('Listening to event `change` is deprecated. Use `connectionChange` instead.');\n    }\n\n    if (!connection) {\n      console.error('Network Connection API is not supported. Not listening for connection type changes.');\n      return {\n        remove: function remove() {}\n      };\n    }\n\n    var wrappedHandler = function wrappedHandler() {\n      return handler(getConnectionInfoObject());\n    };\n\n    netInfoListeners.push([handler, wrappedHandler]);\n    connection.addEventListener(eventTypesMap[type], wrappedHandler);\n    return {\n      remove: function remove() {\n        return NetInfo.removeEventListener(eventTypesMap[type], handler);\n      }\n    };\n  },\n  removeEventListener: function removeEventListener(type, handler) {\n    invariant(eventTypes.indexOf(type) !== -1, 'Trying to unsubscribe from unknown event: \"%s\"', type);\n\n    if (type === 'change') {\n      console.warn('Listening to event `change` is deprecated. Use `connectionChange` instead.');\n    }\n\n    var listenerIndex = findIndex(netInfoListeners, function (pair) {\n      return pair[0] === handler;\n    });\n    invariant(listenerIndex !== -1, 'Trying to remove NetInfo listener for unregistered handler');\n    var _netInfoListeners$lis = netInfoListeners[listenerIndex],\n        wrappedHandler = _netInfoListeners$lis[1];\n    connection.removeEventListener(eventTypesMap[type], wrappedHandler);\n    netInfoListeners.splice(listenerIndex, 1);\n  },\n  fetch: function fetch() {\n    console.warn('`fetch` is deprecated. Use `getConnectionInfo` instead.');\n    return new Promise(function (resolve, reject) {\n      try {\n        resolve(connection.type);\n      } catch (err) {\n        resolve('unknown');\n      }\n    });\n  },\n  getConnectionInfo: function getConnectionInfo() {\n    return new Promise(function (resolve, reject) {\n      resolve(getConnectionInfoObject());\n    });\n  },\n  isConnected: {\n    addEventListener: function addEventListener(type, handler) {\n      invariant(eventTypes.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n\n      if (type === 'change') {\n        console.warn('Listening to event `change` is deprecated. Use `connectionChange` instead.');\n      }\n\n      var onlineCallback = function onlineCallback() {\n        return handler(true);\n      };\n\n      var offlineCallback = function offlineCallback() {\n        return handler(false);\n      };\n\n      connectionListeners.push([handler, onlineCallback, offlineCallback]);\n      window.addEventListener('online', onlineCallback, false);\n      window.addEventListener('offline', offlineCallback, false);\n      return {\n        remove: function remove() {\n          return NetInfo.isConnected.removeEventListener(eventTypesMap[type], handler);\n        }\n      };\n    },\n    removeEventListener: function removeEventListener(type, handler) {\n      invariant(eventTypes.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n\n      if (type === 'change') {\n        console.warn('Listening to event `change` is deprecated. Use `connectionChange` instead.');\n      }\n\n      var listenerIndex = findIndex(connectionListeners, function (pair) {\n        return pair[0] === handler;\n      });\n      invariant(listenerIndex !== -1, 'Trying to remove NetInfo connection listener for unregistered handler');\n      var _connectionListeners$ = connectionListeners[listenerIndex],\n          onlineCallback = _connectionListeners$[1],\n          offlineCallback = _connectionListeners$[2];\n      window.removeEventListener('online', onlineCallback, false);\n      window.removeEventListener('offline', offlineCallback, false);\n      connectionListeners.splice(listenerIndex, 1);\n    },\n    fetch: function fetch() {\n      return new Promise(function (resolve, reject) {\n        try {\n          resolve(window.navigator.onLine);\n        } catch (err) {\n          resolve(true);\n        }\n      });\n    }\n  }\n};\nexport default NetInfo;","map":{"version":3,"sources":["C:/Users/Thivagar/Documents/GSOC Work/dengue-stop/node_modules/react-native-web/dist/exports/NetInfo/index.js"],"names":["ExecutionEnvironment","findIndex","invariant","connection","canUseDOM","window","navigator","mozConnection","webkitConnection","getConnectionInfoObject","result","effectiveType","type","prop","value","eventTypesMap","change","connectionChange","eventTypes","Object","keys","connectionListeners","netInfoListeners","NetInfo","addEventListener","handler","indexOf","console","warn","error","remove","wrappedHandler","push","removeEventListener","listenerIndex","pair","_netInfoListeners$lis","splice","fetch","Promise","resolve","reject","err","getConnectionInfo","isConnected","onlineCallback","offlineCallback","_connectionListeners$","onLine"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport ExecutionEnvironment from 'fbjs/lib/ExecutionEnvironment';\nimport findIndex from 'array-find-index';\nimport invariant from 'fbjs/lib/invariant';\nvar connection = ExecutionEnvironment.canUseDOM && (window.navigator.connection || window.navigator.mozConnection || window.navigator.webkitConnection); // Prevent the underlying event handlers from leaking and include additional\n// properties available in browsers\n\nvar getConnectionInfoObject = function getConnectionInfoObject() {\n  var result = {\n    effectiveType: 'unknown',\n    type: 'unknown'\n  };\n\n  if (!connection) {\n    return result;\n  }\n\n  for (var prop in connection) {\n    var value = connection[prop];\n\n    if (typeof value !== 'function' && value != null) {\n      result[prop] = value;\n    }\n  }\n\n  return result;\n}; // Map React Native events to browser equivalents\n\n\nvar eventTypesMap = {\n  change: 'change',\n  connectionChange: 'change'\n};\nvar eventTypes = Object.keys(eventTypesMap);\nvar connectionListeners = [];\nvar netInfoListeners = [];\n/**\n * Navigator online: https://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine/onLine\n * Network Connection API: https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation\n */\n\nvar NetInfo = {\n  addEventListener: function addEventListener(type, handler) {\n    invariant(eventTypes.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n\n    if (type === 'change') {\n      console.warn('Listening to event `change` is deprecated. Use `connectionChange` instead.');\n    }\n\n    if (!connection) {\n      console.error('Network Connection API is not supported. Not listening for connection type changes.');\n      return {\n        remove: function remove() {}\n      };\n    }\n\n    var wrappedHandler = function wrappedHandler() {\n      return handler(getConnectionInfoObject());\n    };\n\n    netInfoListeners.push([handler, wrappedHandler]);\n    connection.addEventListener(eventTypesMap[type], wrappedHandler);\n    return {\n      remove: function remove() {\n        return NetInfo.removeEventListener(eventTypesMap[type], handler);\n      }\n    };\n  },\n  removeEventListener: function removeEventListener(type, handler) {\n    invariant(eventTypes.indexOf(type) !== -1, 'Trying to unsubscribe from unknown event: \"%s\"', type);\n\n    if (type === 'change') {\n      console.warn('Listening to event `change` is deprecated. Use `connectionChange` instead.');\n    }\n\n    var listenerIndex = findIndex(netInfoListeners, function (pair) {\n      return pair[0] === handler;\n    });\n    invariant(listenerIndex !== -1, 'Trying to remove NetInfo listener for unregistered handler');\n    var _netInfoListeners$lis = netInfoListeners[listenerIndex],\n        wrappedHandler = _netInfoListeners$lis[1];\n    connection.removeEventListener(eventTypesMap[type], wrappedHandler);\n    netInfoListeners.splice(listenerIndex, 1);\n  },\n  fetch: function fetch() {\n    console.warn('`fetch` is deprecated. Use `getConnectionInfo` instead.');\n    return new Promise(function (resolve, reject) {\n      try {\n        resolve(connection.type);\n      } catch (err) {\n        resolve('unknown');\n      }\n    });\n  },\n  getConnectionInfo: function getConnectionInfo() {\n    return new Promise(function (resolve, reject) {\n      resolve(getConnectionInfoObject());\n    });\n  },\n  isConnected: {\n    addEventListener: function addEventListener(type, handler) {\n      invariant(eventTypes.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n\n      if (type === 'change') {\n        console.warn('Listening to event `change` is deprecated. Use `connectionChange` instead.');\n      }\n\n      var onlineCallback = function onlineCallback() {\n        return handler(true);\n      };\n\n      var offlineCallback = function offlineCallback() {\n        return handler(false);\n      };\n\n      connectionListeners.push([handler, onlineCallback, offlineCallback]);\n      window.addEventListener('online', onlineCallback, false);\n      window.addEventListener('offline', offlineCallback, false);\n      return {\n        remove: function remove() {\n          return NetInfo.isConnected.removeEventListener(eventTypesMap[type], handler);\n        }\n      };\n    },\n    removeEventListener: function removeEventListener(type, handler) {\n      invariant(eventTypes.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n\n      if (type === 'change') {\n        console.warn('Listening to event `change` is deprecated. Use `connectionChange` instead.');\n      }\n\n      var listenerIndex = findIndex(connectionListeners, function (pair) {\n        return pair[0] === handler;\n      });\n      invariant(listenerIndex !== -1, 'Trying to remove NetInfo connection listener for unregistered handler');\n      var _connectionListeners$ = connectionListeners[listenerIndex],\n          onlineCallback = _connectionListeners$[1],\n          offlineCallback = _connectionListeners$[2];\n      window.removeEventListener('online', onlineCallback, false);\n      window.removeEventListener('offline', offlineCallback, false);\n      connectionListeners.splice(listenerIndex, 1);\n    },\n    fetch: function fetch() {\n      return new Promise(function (resolve, reject) {\n        try {\n          resolve(window.navigator.onLine);\n        } catch (err) {\n          resolve(true);\n        }\n      });\n    }\n  }\n};\nexport default NetInfo;"]},"metadata":{},"sourceType":"module"}