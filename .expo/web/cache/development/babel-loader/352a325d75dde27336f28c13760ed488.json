{"ast":null,"code":"'use strict';\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nimport EventEmitter from \"../emitter/EventEmitter\";\nimport EventSubscriptionVendor from \"../emitter/EventSubscriptionVendor\";\n\nvar __DEV__ = process.env.NODE_ENV !== 'production';\n\nfunction checkNativeEventModule(eventType) {\n  if (eventType) {\n    if (eventType === 'appStateDidChange' || eventType === 'memoryWarning') {\n      throw new Error('`' + eventType + '` event should be registered via the AppState module');\n    }\n  }\n}\n\nvar RCTDeviceEventEmitter = function (_EventEmitter) {\n  _inheritsLoose(RCTDeviceEventEmitter, _EventEmitter);\n\n  function RCTDeviceEventEmitter() {\n    var _this;\n\n    var sharedSubscriber = new EventSubscriptionVendor();\n    _this = _EventEmitter.call(this, sharedSubscriber) || this;\n    _this.sharedSubscriber = sharedSubscriber;\n    return _this;\n  }\n\n  var _proto = RCTDeviceEventEmitter.prototype;\n\n  _proto.addListener = function addListener(eventType, listener, context) {\n    if (__DEV__) {\n      checkNativeEventModule(eventType);\n    }\n\n    return _EventEmitter.prototype.addListener.call(this, eventType, listener, context);\n  };\n\n  _proto.removeAllListeners = function removeAllListeners(eventType) {\n    if (__DEV__) {\n      checkNativeEventModule(eventType);\n    }\n\n    _EventEmitter.prototype.removeAllListeners.call(this, eventType);\n  };\n\n  _proto.removeSubscription = function removeSubscription(subscription) {\n    if (subscription.emitter !== this) {\n      subscription.emitter.removeSubscription(subscription);\n    } else {\n      _EventEmitter.prototype.removeSubscription.call(this, subscription);\n    }\n  };\n\n  return RCTDeviceEventEmitter;\n}(EventEmitter);\n\nexport default new RCTDeviceEventEmitter();","map":{"version":3,"sources":["C:/Users/Thivagar/Documents/GSOC Work/dengue-stop/node_modules/react-native-web/dist/vendor/react-native/NativeEventEmitter/RCTDeviceEventEmitter.js"],"names":["_inheritsLoose","subClass","superClass","prototype","Object","create","constructor","__proto__","EventEmitter","EventSubscriptionVendor","__DEV__","process","env","NODE_ENV","checkNativeEventModule","eventType","Error","RCTDeviceEventEmitter","_EventEmitter","_this","sharedSubscriber","call","_proto","addListener","listener","context","removeAllListeners","removeSubscription","subscription","emitter"],"mappings":"AASA;;AAEA,SAASA,cAAT,CAAwBC,QAAxB,EAAkCC,UAAlC,EAA8C;AAAED,EAAAA,QAAQ,CAACE,SAAT,GAAqBC,MAAM,CAACC,MAAP,CAAcH,UAAU,CAACC,SAAzB,CAArB;AAA0DF,EAAAA,QAAQ,CAACE,SAAT,CAAmBG,WAAnB,GAAiCL,QAAjC;AAA2CA,EAAAA,QAAQ,CAACM,SAAT,GAAqBL,UAArB;AAAkC;;AAEvL,OAAOM,YAAP;AACA,OAAOC,uBAAP;;AAEA,IAAIC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAvC;;AAEA,SAASC,sBAAT,CAAgCC,SAAhC,EAA2C;AACzC,MAAIA,SAAJ,EAAe;AACb,QAAIA,SAAS,KAAK,mBAAd,IAAqCA,SAAS,KAAK,eAAvD,EAAwE;AACtE,YAAM,IAAIC,KAAJ,CAAU,MAAMD,SAAN,GAAkB,sDAA5B,CAAN;AACD;AACF;AACF;;AAOD,IAAIE,qBAAqB,GAEzB,UAAUC,aAAV,EAAyB;AACvBlB,EAAAA,cAAc,CAACiB,qBAAD,EAAwBC,aAAxB,CAAd;;AAEA,WAASD,qBAAT,GAAiC;AAC/B,QAAIE,KAAJ;;AAEA,QAAIC,gBAAgB,GAAG,IAAIX,uBAAJ,EAAvB;AACAU,IAAAA,KAAK,GAAGD,aAAa,CAACG,IAAd,CAAmB,IAAnB,EAAyBD,gBAAzB,KAA8C,IAAtD;AACAD,IAAAA,KAAK,CAACC,gBAAN,GAAyBA,gBAAzB;AACA,WAAOD,KAAP;AACD;;AAED,MAAIG,MAAM,GAAGL,qBAAqB,CAACd,SAAnC;;AAEAmB,EAAAA,MAAM,CAACC,WAAP,GAAqB,SAASA,WAAT,CAAqBR,SAArB,EAAgCS,QAAhC,EAA0CC,OAA1C,EAAmD;AACtE,QAAIf,OAAJ,EAAa;AACXI,MAAAA,sBAAsB,CAACC,SAAD,CAAtB;AACD;;AAED,WAAOG,aAAa,CAACf,SAAd,CAAwBoB,WAAxB,CAAoCF,IAApC,CAAyC,IAAzC,EAA+CN,SAA/C,EAA0DS,QAA1D,EAAoEC,OAApE,CAAP;AACD,GAND;;AAQAH,EAAAA,MAAM,CAACI,kBAAP,GAA4B,SAASA,kBAAT,CAA4BX,SAA5B,EAAuC;AACjE,QAAIL,OAAJ,EAAa;AACXI,MAAAA,sBAAsB,CAACC,SAAD,CAAtB;AACD;;AAEDG,IAAAA,aAAa,CAACf,SAAd,CAAwBuB,kBAAxB,CAA2CL,IAA3C,CAAgD,IAAhD,EAAsDN,SAAtD;AACD,GAND;;AAQAO,EAAAA,MAAM,CAACK,kBAAP,GAA4B,SAASA,kBAAT,CAA4BC,YAA5B,EAA0C;AACpE,QAAIA,YAAY,CAACC,OAAb,KAAyB,IAA7B,EAAmC;AACjCD,MAAAA,YAAY,CAACC,OAAb,CAAqBF,kBAArB,CAAwCC,YAAxC;AACD,KAFD,MAEO;AACLV,MAAAA,aAAa,CAACf,SAAd,CAAwBwB,kBAAxB,CAA2CN,IAA3C,CAAgD,IAAhD,EAAsDO,YAAtD;AACD;AACF,GAND;;AAQA,SAAOX,qBAAP;AACD,CAvCD,CAuCET,YAvCF,CAFA;;AA2CA,eAAe,IAAIS,qBAAJ,EAAf","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */\n'use strict';\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\nimport EventEmitter from '../emitter/EventEmitter';\nimport EventSubscriptionVendor from '../emitter/EventSubscriptionVendor';\n\nvar __DEV__ = process.env.NODE_ENV !== 'production';\n\nfunction checkNativeEventModule(eventType) {\n  if (eventType) {\n    if (eventType === 'appStateDidChange' || eventType === 'memoryWarning') {\n      throw new Error('`' + eventType + '` event should be registered via the AppState module');\n    }\n  }\n}\n/**\n * Deprecated - subclass NativeEventEmitter to create granular event modules instead of\n * adding all event listeners directly to RCTDeviceEventEmitter.\n */\n\n\nvar RCTDeviceEventEmitter =\n/*#__PURE__*/\nfunction (_EventEmitter) {\n  _inheritsLoose(RCTDeviceEventEmitter, _EventEmitter);\n\n  function RCTDeviceEventEmitter() {\n    var _this;\n\n    var sharedSubscriber = new EventSubscriptionVendor();\n    _this = _EventEmitter.call(this, sharedSubscriber) || this;\n    _this.sharedSubscriber = sharedSubscriber;\n    return _this;\n  }\n\n  var _proto = RCTDeviceEventEmitter.prototype;\n\n  _proto.addListener = function addListener(eventType, listener, context) {\n    if (__DEV__) {\n      checkNativeEventModule(eventType);\n    }\n\n    return _EventEmitter.prototype.addListener.call(this, eventType, listener, context);\n  };\n\n  _proto.removeAllListeners = function removeAllListeners(eventType) {\n    if (__DEV__) {\n      checkNativeEventModule(eventType);\n    }\n\n    _EventEmitter.prototype.removeAllListeners.call(this, eventType);\n  };\n\n  _proto.removeSubscription = function removeSubscription(subscription) {\n    if (subscription.emitter !== this) {\n      subscription.emitter.removeSubscription(subscription);\n    } else {\n      _EventEmitter.prototype.removeSubscription.call(this, subscription);\n    }\n  };\n\n  return RCTDeviceEventEmitter;\n}(EventEmitter);\n\nexport default new RCTDeviceEventEmitter();"]},"metadata":{},"sourceType":"module"}