{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { TabRouter, StackActions, SceneView, createNavigator, SwitchActions } from 'react-navigation';\nexport default function createTabNavigator(TabView) {\n  var NavigationView = function (_React$Component) {\n    _inherits(NavigationView, _React$Component);\n\n    function NavigationView() {\n      var _getPrototypeOf2;\n\n      var _this;\n\n      _classCallCheck(this, NavigationView);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(NavigationView)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n      _defineProperty(_assertThisInitialized(_this), \"_renderScene\", function (_ref) {\n        var route = _ref.route;\n        var _this$props = _this.props,\n            screenProps = _this$props.screenProps,\n            descriptors = _this$props.descriptors;\n        var descriptor = descriptors[route.key];\n        var TabComponent = descriptor.getComponent();\n        return React.createElement(SceneView, {\n          screenProps: screenProps,\n          navigation: descriptor.navigation,\n          component: TabComponent\n        });\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"_renderIcon\", function (_ref2) {\n        var route = _ref2.route,\n            focused = _ref2.focused,\n            tintColor = _ref2.tintColor,\n            _ref2$horizontal = _ref2.horizontal,\n            horizontal = _ref2$horizontal === void 0 ? false : _ref2$horizontal;\n        var descriptors = _this.props.descriptors;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n\n        if (options.tabBarIcon) {\n          return typeof options.tabBarIcon === 'function' ? options.tabBarIcon({\n            focused: focused,\n            tintColor: tintColor,\n            horizontal: horizontal\n          }) : options.tabBarIcon;\n        }\n\n        return null;\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"_getLabelText\", function (_ref3) {\n        var route = _ref3.route;\n        var descriptors = _this.props.descriptors;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n\n        if (options.tabBarLabel) {\n          return options.tabBarLabel;\n        }\n\n        if (typeof options.title === 'string') {\n          return options.title;\n        }\n\n        return route.routeName;\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"_getAccessibilityLabel\", function (_ref4) {\n        var route = _ref4.route;\n        var descriptors = _this.props.descriptors;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n\n        if (typeof options.tabBarAccessibilityLabel !== 'undefined') {\n          return options.tabBarAccessibilityLabel;\n        }\n\n        var label = _this._getLabelText({\n          route: route\n        });\n\n        if (typeof label === 'string') {\n          var routes = _this.props.navigation.state.routes;\n          return \"\".concat(label, \", tab, \").concat(routes.indexOf(route) + 1, \" of \").concat(routes.length);\n        }\n\n        return undefined;\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"_getTestID\", function (_ref5) {\n        var route = _ref5.route;\n        var descriptors = _this.props.descriptors;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n        return options.tabBarTestID;\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"_makeDefaultHandler\", function (_ref6) {\n        var route = _ref6.route,\n            navigation = _ref6.navigation;\n        return function () {\n          if (navigation.isFocused()) {\n            if (route.hasOwnProperty('index') && route.index > 0) {\n              navigation.dispatch(StackActions.popToTop({\n                key: route.key\n              }));\n            } else {\n              navigation.emit('refocus');\n            }\n          } else {\n            _this._jumpTo(route.routeName);\n          }\n        };\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"_handleTabPress\", function (_ref7) {\n        var route = _ref7.route;\n        _this._isTabPress = true;\n        Promise.resolve().then(function () {\n          return _this._isTabPress = false;\n        });\n        var descriptors = _this.props.descriptors;\n        var descriptor = descriptors[route.key];\n        var navigation = descriptor.navigation,\n            options = descriptor.options;\n\n        var defaultHandler = _this._makeDefaultHandler({\n          route: route,\n          navigation: navigation\n        });\n\n        if (options.tabBarOnPress) {\n          options.tabBarOnPress({\n            navigation: navigation,\n            defaultHandler: defaultHandler\n          });\n        } else {\n          defaultHandler();\n        }\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"_handleTabLongPress\", function (_ref8) {\n        var route = _ref8.route;\n        var descriptors = _this.props.descriptors;\n        var descriptor = descriptors[route.key];\n        var navigation = descriptor.navigation,\n            options = descriptor.options;\n\n        var defaultHandler = _this._makeDefaultHandler({\n          route: route,\n          navigation: navigation\n        });\n\n        if (options.tabBarOnLongPress) {\n          options.tabBarOnLongPress({\n            navigation: navigation,\n            defaultHandler: defaultHandler\n          });\n        } else {\n          defaultHandler();\n        }\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"_handleIndexChange\", function (index) {\n        if (_this._isTabPress) {\n          _this._isTabPress = false;\n          return;\n        }\n\n        _this._jumpTo(_this.props.navigation.state.routes[index].routeName);\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"_jumpTo\", function (routeName) {\n        var navigation = _this.props.navigation;\n        navigation.dispatch(SwitchActions.jumpTo({\n          routeName: routeName,\n          key: navigation.state.key\n        }));\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"_isTabPress\", false);\n\n      return _this;\n    }\n\n    _createClass(NavigationView, [{\n      key: \"render\",\n      value: function render() {\n        var _this$props2 = this.props,\n            descriptors = _this$props2.descriptors,\n            navigation = _this$props2.navigation,\n            screenProps = _this$props2.screenProps,\n            navigationConfig = _this$props2.navigationConfig;\n        var state = navigation.state;\n        var route = state.routes[state.index];\n        var descriptor = descriptors[route.key];\n        return React.createElement(TabView, _extends({}, navigationConfig, descriptor.options, {\n          getLabelText: this._getLabelText,\n          getAccessibilityLabel: this._getAccessibilityLabel,\n          getTestID: this._getTestID,\n          renderIcon: this._renderIcon,\n          renderScene: this._renderScene,\n          onIndexChange: this._handleIndexChange,\n          onTabPress: this._handleTabPress,\n          onTabLongPress: this._handleTabLongPress,\n          navigation: navigation,\n          descriptors: descriptors,\n          screenProps: screenProps\n        }));\n      }\n    }]);\n\n    return NavigationView;\n  }(React.Component);\n\n  return function (routes) {\n    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var router = TabRouter(routes, config);\n    return createNavigator(NavigationView, router, config);\n  };\n}","map":{"version":3,"sources":["createTabNavigator.tsx"],"names":["React","route","descriptors","descriptor","TabComponent","horizontal","options","focused","tintColor","label","routes","navigation","key","Promise","defaultHandler","index","routeName","navigationConfig","state","screenProps","config","router","TabRouter","createNavigator"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,SAAA,EAAA,YAAA,EAAA,SAAA,EAAA,eAAA,EAAA,aAAA,QAAA,kBAAA;AAoDA,eAAe,SAAA,kBAAA,CAAA,OAAA,EAI2C;AAAA,MACxD,cADwD;AAAA;;AAGtD,8BAAA;AAAA;;AAAA;;AAAA;;AAAA,wCAAA,IAAA;AAAA,QAAA,IAAA;AAAA;;AAAA,+IAAA,IAAA;;AAAA,MAAA,eAAA,gCAAA,cAAA,EACe,gBAA2C;AAAA,YAAxCC,KAAwC,QAAxCA,KAAwC;AAAA,0BACnB,MAArC,KADwD;AAAA,YAClD,WADkD,eAClD,WADkD;AAAA,YACnCC,WADmC,eACnCA,WADmC;AAExD,YAAMC,UAAU,GAAGD,WAAW,CAACD,KAAK,CAApC,GAA8B,CAA9B;AACA,YAAMG,YAAY,GAAGD,UAAU,CAA/B,YAAqBA,EAArB;AACA,eACE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AACE,UAAA,WAAW,EADb,WAAA;AAEE,UAAA,UAAU,EAAEA,UAAU,CAFxB,UAAA;AAGE,UAAA,SAAS,EAAEC;AAHb,SAAA,CADF;AALF,OAAA,CAAA;;AAAA,MAAA,eAAA,gCAAA,aAAA,EAcc,iBAKS;AAAA,YALR,KAKQ,SALR,KAKQ;AAAA,YALR,OAKQ,SALR,OAKQ;AAAA,YALR,SAKQ,SALR,SAKQ;AAAA,qCADrBC,UACqB;AAAA,YADrBA,UACqB,iCADR,KACQ;AAAA,YACbH,WADa,GACG,MAAxB,KADqB,CACbA,WADa;AAErB,YAAMC,UAAU,GAAGD,WAAW,CAACD,KAAK,CAApC,GAA8B,CAA9B;AACA,YAAMK,OAAO,GAAGH,UAAU,CAA1B,OAAA;;AAEA,YAAIG,OAAO,CAAX,UAAA,EAAwB;AACtB,iBAAO,OAAOA,OAAO,CAAd,UAAA,KAAA,UAAA,GACH,OAAO,CAAP,UAAA,CAAmB;AAAEC,YAAAA,OAAF,EAAEA,OAAF;AAAWC,YAAAA,SAAX,EAAWA,SAAX;AAAsBH,YAAAA,UAAAA,EAAAA;AAAtB,WAAnB,CADG,GAEHC,OAAO,CAFX,UAAA;AAGD;;AAED,eAAA,IAAA;AA9BF,OAAA,CAAA;;AAAA,MAAA,eAAA,gCAAA,eAAA,EAiCgB,iBAA2C;AAAA,YAAxCL,KAAwC,SAAxCA,KAAwC;AAAA,YACjDC,WADiD,GACjC,MAAxB,KADyD,CACjDA,WADiD;AAEzD,YAAMC,UAAU,GAAGD,WAAW,CAACD,KAAK,CAApC,GAA8B,CAA9B;AACA,YAAMK,OAAO,GAAGH,UAAU,CAA1B,OAAA;;AAEA,YAAIG,OAAO,CAAX,WAAA,EAAyB;AACvB,iBAAOA,OAAO,CAAd,WAAA;AACD;;AAED,YAAI,OAAOA,OAAO,CAAd,KAAA,KAAJ,QAAA,EAAuC;AACrC,iBAAOA,OAAO,CAAd,KAAA;AACD;;AAED,eAAOL,KAAK,CAAZ,SAAA;AA9CF,OAAA,CAAA;;AAAA,MAAA,eAAA,gCAAA,wBAAA,EAiDyB,iBAA2C;AAAA,YAAxCA,KAAwC,SAAxCA,KAAwC;AAAA,YAC1DC,WAD0D,GAC1C,MAAxB,KADkE,CAC1DA,WAD0D;AAElE,YAAMC,UAAU,GAAGD,WAAW,CAACD,KAAK,CAApC,GAA8B,CAA9B;AACA,YAAMK,OAAO,GAAGH,UAAU,CAA1B,OAAA;;AAEA,YAAI,OAAOG,OAAO,CAAd,wBAAA,KAAJ,WAAA,EAA6D;AAC3D,iBAAOA,OAAO,CAAd,wBAAA;AACD;;AAED,YAAMG,KAAK,GAAG,MAAA,aAAA,CAAmB;AAAER,UAAAA,KAAAA,EAAAA;AAAF,SAAnB,CAAd;;AAEA,YAAI,OAAA,KAAA,KAAJ,QAAA,EAA+B;AAAA,cACrBS,MADqB,GACV,MAAA,KAAA,CAAA,UAAA,CAAnB,KAD6B,CACrBA,MADqB;AAE7B,iBAAA,GAAA,MAAA,CAAA,KAAA,EAAA,SAAA,EAAA,MAAA,CAAyBA,MAAM,CAANA,OAAAA,CAAAA,KAAAA,IAAzB,CAAA,EAAA,MAAA,EAAA,MAAA,CACEA,MAAM,CADR,MAAA,CAAA;AAGD;;AAED,eAAA,SAAA;AAnEF,OAAA,CAAA;;AAAA,MAAA,eAAA,gCAAA,YAAA,EAsEa,iBAA2C;AAAA,YAAxCT,KAAwC,SAAxCA,KAAwC;AAAA,YAC9CC,WAD8C,GAC9B,MAAxB,KADsD,CAC9CA,WAD8C;AAEtD,YAAMC,UAAU,GAAGD,WAAW,CAACD,KAAK,CAApC,GAA8B,CAA9B;AACA,YAAMK,OAAO,GAAGH,UAAU,CAA1B,OAAA;AAEA,eAAOG,OAAO,CAAd,YAAA;AA3EF,OAAA,CAAA;;AAAA,MAAA,eAAA,gCAAA,qBAAA,EA8EsB;AAAA,YAAC,KAAD,SAAC,KAAD;AAAA,YAEpBK,UAFoB,SAEpBA,UAFoB;AAAA,eAMhB,YAAM;AACV,cAAIA,UAAU,CAAd,SAAIA,EAAJ,EAA4B;AAC1B,gBAAIV,KAAK,CAALA,cAAAA,CAAAA,OAAAA,KAAiCA,KAAK,CAALA,KAAAA,GAArC,CAAA,EAAsD;AAEpDU,cAAAA,UAAU,CAAVA,QAAAA,CAAoB,YAAY,CAAZ,QAAA,CAAsB;AAAEC,gBAAAA,GAAG,EAAEX,KAAK,CAACW;AAAb,eAAtB,CAApBD;AAFF,aAAA,MAGO;AACLA,cAAAA,UAAU,CAAVA,IAAAA,CAAAA,SAAAA;AACD;AANH,WAAA,MAOO;AACL,kBAAA,OAAA,CAAaV,KAAK,CAAlB,SAAA;AACD;AA9FH,SA8EsB;AAAA,OA9EtB,CAAA;;AAAA,MAAA,eAAA,gCAAA,iBAAA,EAiGkB,iBAA2C;AAAA,YAAxCA,KAAwC,SAAxCA,KAAwC;AAC3D,cAAA,WAAA,GAD2D,IAC3D;AAIAY,QAAAA,OAAO,CAAPA,OAAAA,GAAAA,IAAAA,CAAuB;AAAA,iBAAO,MAAA,WAAA,GAA9BA,KAAuB;AAAA,SAAvBA;AAL2D,YAOnDX,WAPmD,GAOnC,MAAxB,KAP2D,CAOnDA,WAPmD;AAQ3D,YAAMC,UAAU,GAAGD,WAAW,CAACD,KAAK,CAApC,GAA8B,CAA9B;AAR2D,YASrD,UATqD,GAS3D,UAT2D,CASrD,UATqD;AAAA,YASvCK,OATuC,GAS3D,UAT2D,CASvCA,OATuC;;AAW3D,YAAMQ,cAAc,GAAG,MAAA,mBAAA,CAAyB;AAAEb,UAAAA,KAAF,EAAEA,KAAF;AAASU,UAAAA,UAAAA,EAAAA;AAAT,SAAzB,CAAvB;;AAEA,YAAIL,OAAO,CAAX,aAAA,EAA2B;AACzBA,UAAAA,OAAO,CAAPA,aAAAA,CAAsB;AAAEK,YAAAA,UAAF,EAAEA,UAAF;AAAcG,YAAAA,cAAAA,EAAAA;AAAd,WAAtBR;AADF,SAAA,MAEO;AACLQ,UAAAA,cAAc;AACf;AAlHH,OAAA,CAAA;;AAAA,MAAA,eAAA,gCAAA,qBAAA,EAqHsB,iBAA2C;AAAA,YAAxCb,KAAwC,SAAxCA,KAAwC;AAAA,YACvDC,WADuD,GACvC,MAAxB,KAD+D,CACvDA,WADuD;AAE/D,YAAMC,UAAU,GAAGD,WAAW,CAACD,KAAK,CAApC,GAA8B,CAA9B;AAF+D,YAGzD,UAHyD,GAG/D,UAH+D,CAGzD,UAHyD;AAAA,YAG3CK,OAH2C,GAG/D,UAH+D,CAG3CA,OAH2C;;AAK/D,YAAMQ,cAAc,GAAG,MAAA,mBAAA,CAAyB;AAAEb,UAAAA,KAAF,EAAEA,KAAF;AAASU,UAAAA,UAAAA,EAAAA;AAAT,SAAzB,CAAvB;;AAEA,YAAIL,OAAO,CAAX,iBAAA,EAA+B;AAC7BA,UAAAA,OAAO,CAAPA,iBAAAA,CAA0B;AAAEK,YAAAA,UAAF,EAAEA,UAAF;AAAcG,YAAAA,cAAAA,EAAAA;AAAd,WAA1BR;AADF,SAAA,MAEO;AACLQ,UAAAA,cAAc;AACf;AAhIH,OAAA,CAAA;;AAAA,MAAA,eAAA,gCAAA,oBAAA,EAmIsBC,UAAAA,KAAD,EAAmB;AACtC,YAAI,MAAJ,WAAA,EAAsB;AACpB,gBAAA,WAAA,GAAA,KAAA;AACA;AACD;;AAED,cAAA,OAAA,CAAa,MAAA,KAAA,CAAA,UAAA,CAAA,KAAA,CAAA,MAAA,CAAA,KAAA,EAAb,SAAA;AAzIF,OAAA,CAAA;;AAAA,MAAA,eAAA,gCAAA,SAAA,EA4IWC,UAAAA,SAAD,EAAuB;AAAA,YACvBL,UADuB,GACR,MAAvB,KAD+B,CACvBA,UADuB;AAG/BA,QAAAA,UAAU,CAAVA,QAAAA,CACE,aAAa,CAAb,MAAA,CAAqB;AACnBK,UAAAA,SADmB,EACnBA,SADmB;AAEnBJ,UAAAA,GAAG,EAAED,UAAU,CAAVA,KAAAA,CAAiBC;AAFH,SAArB,CADFD;AA/IF,OAAA,CAAA;;AAAA,MAAA,eAAA,gCAAA,aAAA,EAAA,KAAA,CAAA;;AAAA;AAAA;;AAHsD;AAAA;AAAA,+BA4J7C;AAAA,2BAMH,KALJ,KADO;AAAA,YACD,WADC,gBACD,WADC;AAAA,YACD,UADC,gBACD,UADC;AAAA,YACD,WADC,gBACD,WADC;AAAA,YAKLM,gBALK,gBAKLA,gBALK;AAAA,YAOCC,KAPD,GAOP,UAPO,CAOCA,KAPD;AAQP,YAAMjB,KAAK,GAAGiB,KAAK,CAALA,MAAAA,CAAaA,KAAK,CAAhC,KAAcA,CAAd;AACA,YAAMf,UAAU,GAAGD,WAAW,CAACD,KAAK,CAApC,GAA8B,CAA9B;AAEA,eAGE,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA,QAAA,CAAA,EAAA,EAAA,gBAAA,EAEME,UAAU,CAFhB,OAAA,EAAA;AAGE,UAAA,YAAY,EAAE,KAHhB,aAAA;AAIE,UAAA,qBAAqB,EAAE,KAJzB,sBAAA;AAKE,UAAA,SAAS,EAAE,KALb,UAAA;AAME,UAAA,UAAU,EAAE,KANd,WAAA;AAOE,UAAA,WAAW,EAAE,KAPf,YAAA;AAQE,UAAA,aAAa,EAAE,KARjB,kBAAA;AASE,UAAA,UAAU,EAAE,KATd,eAAA;AAUE,UAAA,cAAc,EAAE,KAVlB,mBAAA;AAWE,UAAA,UAAU,EAXZ,UAAA;AAYE,UAAA,WAAW,EAZb,WAAA;AAaE,UAAA,WAAW,EAAEgB;AAbf,SAAA,CAAA,CAHF;AAmBD;AA1LqD;;AAAA;AAAA,IAC3BnB,KAAK,CAAlC,SADwD;;AA6LxD,SAAO,UAAA,MAAA,EAQF;AAAA,QANHoB,MAMG,uEARE,EAQF;AACH,QAAMC,MAAM,GAAGC,SAAS,CAAA,MAAA,EAAxB,MAAwB,CAAxB;AAEA,WAAOC,eAAe,CAAA,cAAA,EAAA,MAAA,EAAtB,MAAsB,CAAtB;AAXF,GAAA;AAaD","sourcesContent":["import * as React from 'react';\nimport {\n  TabRouter,\n  StackActions,\n  SceneView,\n  createNavigator,\n  SwitchActions,\n  NavigationRoute,\n  NavigationRouteConfigMap,\n  CreateNavigatorConfig,\n  NavigationTabRouterConfig,\n} from 'react-navigation';\nimport {\n  NavigationTabProp,\n  NavigationCommonTabOptions,\n  SceneDescriptorMap,\n} from '../types';\n\ntype RouteConfig<Options> = NavigationRouteConfigMap<\n  Options,\n  NavigationTabProp<NavigationRoute, any>\n>;\n\ntype CommonProps = {\n  navigation: NavigationTabProp;\n  descriptors: SceneDescriptorMap;\n  screenProps?: unknown;\n};\n\ntype ExtraProps<Config extends {}> = {\n  navigationConfig: Config;\n};\n\nexport type RenderIconProps = {\n  route: NavigationRoute;\n  focused: boolean;\n  tintColor?: string;\n  horizontal?: boolean;\n};\n\nexport type NavigationViewProps = {\n  getLabelText: (props: { route: NavigationRoute }) => string | undefined;\n  getAccessibilityLabel: (props: {\n    route: NavigationRoute;\n  }) => string | undefined;\n  getTestID: (props: { route: NavigationRoute }) => string | undefined;\n  renderIcon: (props: RenderIconProps) => React.ReactNode;\n  renderScene: (props: { route: NavigationRoute }) => React.ReactNode;\n  onIndexChange: (index: number) => void;\n  onTabPress: (props: { route: NavigationRoute }) => void;\n  onTabLongPress: (props: { route: NavigationRoute }) => void;\n};\n\nexport default function createTabNavigator<\n  Config extends {},\n  Options extends NavigationCommonTabOptions,\n  Props extends NavigationViewProps & CommonProps\n>(TabView: React.ComponentType<Props & Config & Options>) {\n  class NavigationView extends React.Component<\n    Exclude<Props, NavigationViewProps> & ExtraProps<Config>\n  > {\n    _renderScene = ({ route }: { route: { key: string } }) => {\n      const { screenProps, descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const TabComponent = descriptor.getComponent();\n      return (\n        <SceneView\n          screenProps={screenProps}\n          navigation={descriptor.navigation}\n          component={TabComponent}\n        />\n      );\n    };\n\n    _renderIcon = ({\n      route,\n      focused,\n      tintColor,\n      horizontal = false,\n    }: RenderIconProps) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (options.tabBarIcon) {\n        return typeof options.tabBarIcon === 'function'\n          ? options.tabBarIcon({ focused, tintColor, horizontal })\n          : options.tabBarIcon;\n      }\n\n      return null;\n    };\n\n    _getLabelText = ({ route }: { route: NavigationRoute }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (options.tabBarLabel) {\n        return options.tabBarLabel;\n      }\n\n      if (typeof options.title === 'string') {\n        return options.title;\n      }\n\n      return route.routeName;\n    };\n\n    _getAccessibilityLabel = ({ route }: { route: NavigationRoute }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (typeof options.tabBarAccessibilityLabel !== 'undefined') {\n        return options.tabBarAccessibilityLabel;\n      }\n\n      const label = this._getLabelText({ route });\n\n      if (typeof label === 'string') {\n        const { routes } = this.props.navigation.state;\n        return `${label}, tab, ${routes.indexOf(route) + 1} of ${\n          routes.length\n        }`;\n      }\n\n      return undefined;\n    };\n\n    _getTestID = ({ route }: { route: NavigationRoute }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      return options.tabBarTestID;\n    };\n\n    _makeDefaultHandler = ({\n      route,\n      navigation,\n    }: {\n      route: NavigationRoute;\n      navigation: NavigationTabProp;\n    }) => () => {\n      if (navigation.isFocused()) {\n        if (route.hasOwnProperty('index') && route.index > 0) {\n          // If current tab has a nested navigator, pop to top\n          navigation.dispatch(StackActions.popToTop({ key: route.key }));\n        } else {\n          navigation.emit('refocus');\n        }\n      } else {\n        this._jumpTo(route.routeName);\n      }\n    };\n\n    _handleTabPress = ({ route }: { route: NavigationRoute }) => {\n      this._isTabPress = true;\n\n      // After tab press, handleIndexChange will be called synchronously\n      // So we reset it in promise callback\n      Promise.resolve().then(() => (this._isTabPress = false));\n\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const { navigation, options } = descriptor;\n\n      const defaultHandler = this._makeDefaultHandler({ route, navigation });\n\n      if (options.tabBarOnPress) {\n        options.tabBarOnPress({ navigation, defaultHandler });\n      } else {\n        defaultHandler();\n      }\n    };\n\n    _handleTabLongPress = ({ route }: { route: NavigationRoute }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const { navigation, options } = descriptor;\n\n      const defaultHandler = this._makeDefaultHandler({ route, navigation });\n\n      if (options.tabBarOnLongPress) {\n        options.tabBarOnLongPress({ navigation, defaultHandler });\n      } else {\n        defaultHandler();\n      }\n    };\n\n    _handleIndexChange = (index: number) => {\n      if (this._isTabPress) {\n        this._isTabPress = false;\n        return;\n      }\n\n      this._jumpTo(this.props.navigation.state.routes[index].routeName);\n    };\n\n    _jumpTo = (routeName: string) => {\n      const { navigation } = this.props;\n\n      navigation.dispatch(\n        SwitchActions.jumpTo({\n          routeName,\n          key: navigation.state.key,\n        })\n      );\n    };\n\n    _isTabPress: boolean = false;\n\n    render() {\n      const {\n        descriptors,\n        navigation,\n        screenProps,\n        navigationConfig,\n      } = this.props;\n      const { state } = navigation;\n      const route = state.routes[state.index];\n      const descriptor = descriptors[route.key];\n\n      return (\n        // TODO: don't have time to fix it right now\n        // @ts-ignore\n        <TabView\n          {...navigationConfig}\n          {...descriptor.options}\n          getLabelText={this._getLabelText}\n          getAccessibilityLabel={this._getAccessibilityLabel}\n          getTestID={this._getTestID}\n          renderIcon={this._renderIcon}\n          renderScene={this._renderScene}\n          onIndexChange={this._handleIndexChange}\n          onTabPress={this._handleTabPress}\n          onTabLongPress={this._handleTabLongPress}\n          navigation={navigation}\n          descriptors={descriptors}\n          screenProps={screenProps}\n        />\n      );\n    }\n  }\n\n  return (\n    routes: RouteConfig<Options>,\n    config: CreateNavigatorConfig<\n      Partial<Config>,\n      NavigationTabRouterConfig,\n      Partial<Options>,\n      NavigationTabProp<NavigationRoute, any>\n    > = {}\n  ) => {\n    const router = TabRouter(routes, config as any);\n\n    return createNavigator(NavigationView as any, router, config as any);\n  };\n}\n"]},"metadata":{},"sourceType":"module"}