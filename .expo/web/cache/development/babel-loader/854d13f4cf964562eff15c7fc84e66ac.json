{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport GestureHandler from \"./GestureHandler\";\nimport { TEST_MAX_IF_NOT_NAN } from \"./utils\";\n\nvar DiscreteGestureHandler = function (_GestureHandler) {\n  _inherits(DiscreteGestureHandler, _GestureHandler);\n\n  function DiscreteGestureHandler() {\n    _classCallCheck(this, DiscreteGestureHandler);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(DiscreteGestureHandler).apply(this, arguments));\n  }\n\n  _createClass(DiscreteGestureHandler, [{\n    key: \"shouldFailUnderCustomCriteria\",\n    value: function shouldFailUnderCustomCriteria(_ref, _ref2) {\n      var x = _ref.x,\n          y = _ref.y,\n          deltaX = _ref.deltaX,\n          deltaY = _ref.deltaY;\n      var maxDeltaX = _ref2.maxDeltaX,\n          maxDeltaY = _ref2.maxDeltaY,\n          maxDistSq = _ref2.maxDistSq,\n          shouldCancelWhenOutside = _ref2.shouldCancelWhenOutside;\n\n      if (shouldCancelWhenOutside) {\n        if (!this.isPointInView({\n          x: x,\n          y: y\n        })) {\n          return true;\n        }\n      }\n\n      return TEST_MAX_IF_NOT_NAN(Math.abs(deltaX), maxDeltaX) || TEST_MAX_IF_NOT_NAN(Math.abs(deltaY), maxDeltaY) || TEST_MAX_IF_NOT_NAN(Math.abs(deltaY * deltaY + deltaX * deltaX), maxDistSq);\n    }\n  }, {\n    key: \"transformNativeEvent\",\n    value: function transformNativeEvent(_ref3) {\n      var x = _ref3.x,\n          y = _ref3.y;\n      return {\n        absoluteX: x,\n        absoluteY: y,\n        x: x,\n        y: y\n      };\n    }\n  }, {\n    key: \"isGestureEnabledForEvent\",\n    value: function isGestureEnabledForEvent(_ref4, recognizer, _ref5) {\n      var minPointers = _ref4.minPointers,\n          maxPointers = _ref4.maxPointers,\n          maxDist = _ref4.maxDist,\n          maxDeltaX = _ref4.maxDeltaX,\n          maxDeltaY = _ref4.maxDeltaY,\n          maxDistSq = _ref4.maxDistSq,\n          shouldCancelWhenOutside = _ref4.shouldCancelWhenOutside;\n\n      var pointerLength = _ref5.maxPointers,\n          center = _ref5.center,\n          deltaX = _ref5.deltaX,\n          deltaY = _ref5.deltaY,\n          props = _objectWithoutProperties(_ref5, [\"maxPointers\", \"center\", \"deltaX\", \"deltaY\"]);\n\n      var validPointerCount = pointerLength >= minPointers && pointerLength <= maxPointers;\n\n      if (this.shouldFailUnderCustomCriteria(_objectSpread({}, center, {\n        deltaX: deltaX,\n        deltaY: deltaY\n      }), {\n        maxDeltaX: maxDeltaX,\n        maxDeltaY: maxDeltaY,\n        maxDistSq: maxDistSq,\n        shouldCancelWhenOutside: shouldCancelWhenOutside\n      }) || !validPointerCount && this.isGestureRunning) {\n        return {\n          failed: true\n        };\n      }\n\n      return {\n        success: validPointerCount\n      };\n    }\n  }, {\n    key: \"isDiscrete\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"shouldEnableGestureOnSetup\",\n    get: function get() {\n      return true;\n    }\n  }]);\n\n  return DiscreteGestureHandler;\n}(GestureHandler);\n\nexport default DiscreteGestureHandler;","map":{"version":3,"sources":["C:/Users/Thivagar/Documents/GSOC Work/dengue-stop/node_modules/react-native-gesture-handler/web/DiscreteGestureHandler.js"],"names":["GestureHandler","TEST_MAX_IF_NOT_NAN","DiscreteGestureHandler","x","y","deltaX","deltaY","maxDeltaX","maxDeltaY","maxDistSq","shouldCancelWhenOutside","isPointInView","Math","abs","absoluteX","absoluteY","recognizer","minPointers","maxPointers","maxDist","pointerLength","center","props","validPointerCount","shouldFailUnderCustomCriteria","isGestureRunning","failed","success"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,cAAP;AACA,SAASC,mBAAT;;IAEMC,sB;;;;;;;;;;;+DAYF;AAAA,UAFEC,CAEF,QAFEA,CAEF;AAAA,UAFKC,CAEL,QAFKA,CAEL;AAAA,UAFQC,MAER,QAFQA,MAER;AAAA,UAFgBC,MAEhB,QAFgBA,MAEhB;AAAA,UADEC,SACF,SADEA,SACF;AAAA,UADaC,SACb,SADaA,SACb;AAAA,UADwBC,SACxB,SADwBA,SACxB;AAAA,UADmCC,uBACnC,SADmCA,uBACnC;;AACA,UAAIA,uBAAJ,EAA6B;AAC3B,YAAI,CAAC,KAAKC,aAAL,CAAmB;AAAER,UAAAA,CAAC,EAADA,CAAF;AAAKC,UAAAA,CAAC,EAADA;AAAL,SAAnB,CAAL,EAAmC;AACjC,iBAAO,IAAP;AACD;AACF;;AACD,aACEH,mBAAmB,CAACW,IAAI,CAACC,GAAL,CAASR,MAAT,CAAD,EAAmBE,SAAnB,CAAnB,IACAN,mBAAmB,CAACW,IAAI,CAACC,GAAL,CAASP,MAAT,CAAD,EAAmBE,SAAnB,CADnB,IAEAP,mBAAmB,CAACW,IAAI,CAACC,GAAL,CAASP,MAAM,GAAGA,MAAT,GAAkBD,MAAM,GAAGA,MAApC,CAAD,EAA8CI,SAA9C,CAHrB;AAKD;;;gDAE8B;AAAA,UAARN,CAAQ,SAARA,CAAQ;AAAA,UAALC,CAAK,SAALA,CAAK;AAC7B,aAAO;AACLU,QAAAA,SAAS,EAAEX,CADN;AAELY,QAAAA,SAAS,EAAEX,CAFN;AAGLD,QAAAA,CAAC,EAADA,CAHK;AAILC,QAAAA,CAAC,EAADA;AAJK,OAAP;AAMD;;;oDAICY,U,SAEA;AAAA,UAHEC,WAGF,SAHEA,WAGF;AAAA,UAHeC,WAGf,SAHeA,WAGf;AAAA,UAH4BC,OAG5B,SAH4BA,OAG5B;AAAA,UAHqCZ,SAGrC,SAHqCA,SAGrC;AAAA,UAHgDC,SAGhD,SAHgDA,SAGhD;AAAA,UAH2DC,SAG3D,SAH2DA,SAG3D;AAAA,UAHsEC,uBAGtE,SAHsEA,uBAGtE;;AAAA,UADeU,aACf,SADEF,WACF;AAAA,UAD8BG,MAC9B,SAD8BA,MAC9B;AAAA,UADsChB,MACtC,SADsCA,MACtC;AAAA,UAD8CC,MAC9C,SAD8CA,MAC9C;AAAA,UADyDgB,KACzD;;AACA,UAAMC,iBAAiB,GAAGH,aAAa,IAAIH,WAAjB,IAAgCG,aAAa,IAAIF,WAA3E;;AAEA,UACE,KAAKM,6BAAL,mBACOH,MADP;AACehB,QAAAA,MAAM,EAANA,MADf;AACuBC,QAAAA,MAAM,EAANA;AADvB,UAEE;AACEC,QAAAA,SAAS,EAATA,SADF;AAEEC,QAAAA,SAAS,EAATA,SAFF;AAGEC,QAAAA,SAAS,EAATA,SAHF;AAIEC,QAAAA,uBAAuB,EAAvBA;AAJF,OAFF,KAWC,CAACa,iBAAD,IAAsB,KAAKE,gBAZ9B,EAaE;AACA,eAAO;AAAEC,UAAAA,MAAM,EAAE;AAAV,SAAP;AACD;;AAED,aAAO;AAAEC,QAAAA,OAAO,EAAEJ;AAAX,OAAP;AACD;;;wBA1DgB;AACf,aAAO,IAAP;AACD;;;wBAEgC;AAC/B,aAAO,IAAP;AACD;;;;EAPkCvB,c;;AA8DrC,eAAeE,sBAAf","sourcesContent":["import GestureHandler from './GestureHandler';\nimport { TEST_MAX_IF_NOT_NAN } from './utils';\n\nclass DiscreteGestureHandler extends GestureHandler {\n  get isDiscrete() {\n    return true;\n  }\n\n  get shouldEnableGestureOnSetup() {\n    return true;\n  }\n\n  shouldFailUnderCustomCriteria(\n    { x, y, deltaX, deltaY },\n    { maxDeltaX, maxDeltaY, maxDistSq, shouldCancelWhenOutside }\n  ) {\n    if (shouldCancelWhenOutside) {\n      if (!this.isPointInView({ x, y })) {\n        return true;\n      }\n    }\n    return (\n      TEST_MAX_IF_NOT_NAN(Math.abs(deltaX), maxDeltaX) ||\n      TEST_MAX_IF_NOT_NAN(Math.abs(deltaY), maxDeltaY) ||\n      TEST_MAX_IF_NOT_NAN(Math.abs(deltaY * deltaY + deltaX * deltaX), maxDistSq)\n    );\n  }\n\n  transformNativeEvent({ x, y }) {\n    return {\n      absoluteX: x,\n      absoluteY: y,\n      x,\n      y,\n    };\n  }\n\n  isGestureEnabledForEvent(\n    { minPointers, maxPointers, maxDist, maxDeltaX, maxDeltaY, maxDistSq, shouldCancelWhenOutside },\n    recognizer,\n    { maxPointers: pointerLength, center, deltaX, deltaY, ...props }\n  ) {\n    const validPointerCount = pointerLength >= minPointers && pointerLength <= maxPointers;\n\n    if (\n      this.shouldFailUnderCustomCriteria(\n        { ...center, deltaX, deltaY },\n        {\n          maxDeltaX,\n          maxDeltaY,\n          maxDistSq,\n          shouldCancelWhenOutside,\n        }\n      ) ||\n      // A user probably won't land a multi-pointer tap on the first tick (so we cannot just cancel each time)\n      // but if the gesture is running and the user adds or subtracts another pointer then it should fail.\n      (!validPointerCount && this.isGestureRunning)\n    ) {\n      return { failed: true };\n    }\n\n    return { success: validPointerCount };\n  }\n}\n\nexport default DiscreteGestureHandler;\n"]},"metadata":{},"sourceType":"module"}