{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/satya/Workspace/Projects/react-native-tab-view/src/Pager.tsx\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport { PanGestureHandler, State } from 'react-native-gesture-handler';\nimport Animated, { Easing } from 'react-native-reanimated';\nimport memoize from \"./memoize\";\nvar Clock = Animated.Clock,\n    Value = Animated.Value,\n    onChange = Animated.onChange,\n    and = Animated.and,\n    or = Animated.or,\n    abs = Animated.abs,\n    add = Animated.add,\n    block = Animated.block,\n    call = Animated.call,\n    ceil = Animated.ceil,\n    clockRunning = Animated.clockRunning,\n    cond = Animated.cond,\n    divide = Animated.divide,\n    eq = Animated.eq,\n    event = Animated.event,\n    floor = Animated.floor,\n    greaterThan = Animated.greaterThan,\n    lessThan = Animated.lessThan,\n    max = Animated.max,\n    min = Animated.min,\n    multiply = Animated.multiply,\n    neq = Animated.neq,\n    not = Animated.not,\n    round = Animated.round,\n    set = Animated.set,\n    spring = Animated.spring,\n    startClock = Animated.startClock,\n    stopClock = Animated.stopClock,\n    sub = Animated.sub,\n    timing = Animated.timing;\nvar PagerContext = React.createContext({});\nvar TRUE = 1;\nvar FALSE = 0;\nvar NOOP = 0;\nvar UNSET = -1;\nvar DIRECTION_LEFT = 1;\nvar DIRECTION_RIGHT = -1;\nvar SWIPE_DISTANCE_MINIMUM = 20;\nvar SWIPE_VELOCITY_IMPACT = 0.2;\nvar SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01\n};\nvar SPRING_VELOCITY_SCALE = 1;\nvar TIMING_CONFIG = {\n  duration: 200,\n  easing: Easing.out(Easing.cubic)\n};\n\nvar Pager = function (_React$Component) {\n  _inherits(Pager, _React$Component);\n\n  function Pager() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Pager);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Pager)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      enabled: true,\n      childPanGestureHandlerRefs: []\n    };\n    _this.providerVal = {\n      addGestureHandlerRef: function addGestureHandlerRef(ref) {\n        if (!_this.state.childPanGestureHandlerRefs.includes(ref)) {\n          _this.setState(function (prevState) {\n            return {\n              childPanGestureHandlerRefs: [].concat(_toConsumableArray(prevState.childPanGestureHandlerRefs), [ref])\n            };\n          });\n        }\n      }\n    };\n    _this.gestureHandlerRef = React.createRef();\n    _this.clock = new Clock();\n    _this.velocityX = new Value(0);\n    _this.gestureX = new Value(0);\n    _this.gestureState = new Value(State.UNDETERMINED);\n    _this.offsetX = new Value(0);\n    _this.gesturesEnabled = new Value(1);\n    _this.progress = new Value(_this.props.navigationState.index * _this.props.layout.width * DIRECTION_RIGHT);\n    _this.index = new Value(_this.props.navigationState.index);\n    _this.nextIndex = new Value(UNSET);\n    _this.lastEnteredIndex = new Value(_this.props.navigationState.index);\n    _this.isSwiping = new Value(FALSE);\n    _this.isSwipeGesture = new Value(FALSE);\n    _this.indexAtSwipeEnd = new Value(_this.props.navigationState.index);\n    _this.routesLength = new Value(_this.props.navigationState.routes.length);\n    _this.layoutWidth = new Value(_this.props.layout.width);\n    _this.swipeVelocityImpact = new Value(_this.props.swipeVelocityImpact !== undefined ? _this.props.swipeVelocityImpact : SWIPE_VELOCITY_IMPACT);\n    _this.springVelocityScale = new Value(_this.props.springVelocityScale !== undefined ? _this.props.springVelocityScale : SPRING_VELOCITY_SCALE);\n    _this.position = cond(_this.layoutWidth, divide(multiply(_this.progress, -1), _this.layoutWidth), _this.index);\n    _this.springConfig = {\n      damping: new Value(_this.props.springConfig.damping !== undefined ? _this.props.springConfig.damping : SPRING_CONFIG.damping),\n      mass: new Value(_this.props.springConfig.mass !== undefined ? _this.props.springConfig.mass : SPRING_CONFIG.mass),\n      stiffness: new Value(_this.props.springConfig.stiffness !== undefined ? _this.props.springConfig.stiffness : SPRING_CONFIG.stiffness),\n      restSpeedThreshold: new Value(_this.props.springConfig.restSpeedThreshold !== undefined ? _this.props.springConfig.restSpeedThreshold : SPRING_CONFIG.restSpeedThreshold),\n      restDisplacementThreshold: new Value(_this.props.springConfig.restDisplacementThreshold !== undefined ? _this.props.springConfig.restDisplacementThreshold : SPRING_CONFIG.restDisplacementThreshold)\n    };\n    _this.timingConfig = {\n      duration: new Value(_this.props.timingConfig.duration !== undefined ? _this.props.timingConfig.duration : TIMING_CONFIG.duration)\n    };\n    _this.initialVelocityForSpring = new Value(0);\n    _this.currentIndexValue = _this.props.navigationState.index;\n    _this.pendingIndexValue = undefined;\n    _this.previouslyFocusedTextInput = null;\n    _this.enterListeners = [];\n    _this.interactionHandle = null;\n\n    _this.jumpToIndex = function (index) {\n      _this.isSwipeGesture.setValue(FALSE);\n\n      _this.nextIndex.setValue(index);\n    };\n\n    _this.jumpTo = function (key) {\n      var _this$props = _this.props,\n          navigationState = _this$props.navigationState,\n          keyboardDismissMode = _this$props.keyboardDismissMode,\n          onIndexChange = _this$props.onIndexChange;\n      var index = navigationState.routes.findIndex(function (route) {\n        return route.key === key;\n      });\n\n      if (navigationState.index === index) {\n        _this.jumpToIndex(index);\n      } else {\n        onIndexChange(index);\n\n        if (keyboardDismissMode === 'auto') {\n          Keyboard.dismiss();\n        }\n      }\n    };\n\n    _this.addListener = function (type, listener) {\n      switch (type) {\n        case 'enter':\n          _this.enterListeners.push(listener);\n\n          break;\n      }\n    };\n\n    _this.removeListener = function (type, listener) {\n      switch (type) {\n        case 'enter':\n          {\n            var _index = _this.enterListeners.indexOf(listener);\n\n            if (_index > -1) {\n              _this.enterListeners.splice(_index, 1);\n            }\n\n            break;\n          }\n      }\n    };\n\n    _this.handleEnteredIndexChange = function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 1),\n          value = _ref2[0];\n\n      var index = Math.max(0, Math.min(value, _this.props.navigationState.routes.length - 1));\n\n      _this.enterListeners.forEach(function (listener) {\n        return listener(index);\n      });\n    };\n\n    _this.transitionTo = function (index) {\n      var toValue = new Value(0);\n      var frameTime = new Value(0);\n      var state = {\n        position: _this.progress,\n        time: new Value(0),\n        finished: new Value(FALSE)\n      };\n      return block([cond(clockRunning(_this.clock), NOOP, [set(toValue, multiply(index, _this.layoutWidth, DIRECTION_RIGHT)), set(frameTime, 0), set(state.time, 0), set(state.finished, FALSE), set(_this.index, index)]), cond(_this.isSwipeGesture, [cond(not(clockRunning(_this.clock)), I18nManager.isRTL ? set(_this.initialVelocityForSpring, multiply(-1, _this.velocityX, _this.springVelocityScale)) : set(_this.initialVelocityForSpring, multiply(_this.velocityX, _this.springVelocityScale))), spring(_this.clock, _objectSpread({}, state, {\n        velocity: _this.initialVelocityForSpring\n      }), _objectSpread({}, SPRING_CONFIG, {}, _this.springConfig, {\n        toValue: toValue\n      }))], timing(_this.clock, _objectSpread({}, state, {\n        frameTime: frameTime\n      }), _objectSpread({}, TIMING_CONFIG, {}, _this.timingConfig, {\n        toValue: toValue\n      }))), cond(not(clockRunning(_this.clock)), startClock(_this.clock)), cond(state.finished, [set(_this.isSwipeGesture, FALSE), set(_this.gestureX, 0), set(_this.velocityX, 0), stopClock(_this.clock)])]);\n    };\n\n    _this.handleGestureEvent = event([{\n      nativeEvent: {\n        translationX: _this.gestureX,\n        velocityX: _this.velocityX,\n        state: _this.gestureState\n      }\n    }]);\n    _this.extrapolatedPosition = add(_this.gestureX, multiply(_this.velocityX, _this.swipeVelocityImpact));\n\n    _this.toggleEnabled = function () {\n      if (_this.state.enabled) _this.setState({\n        enabled: false\n      }, function () {\n        _this.setState({\n          enabled: true\n        });\n      });\n    };\n\n    _this.maybeCancel = block([cond(and(_this.gesturesEnabled, or(and(eq(_this.index, sub(_this.routesLength, 1)), lessThan(_this.gestureX, 0)), and(eq(_this.index, 0), greaterThan(_this.gestureX, 0)))), set(_this.gesturesEnabled, 0))]);\n    _this.translateX = block([onChange(_this.gesturesEnabled, cond(not(_this.gesturesEnabled), call([_this.gesturesEnabled], _this.toggleEnabled))), onChange(_this.index, call([_this.index], function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 1),\n          value = _ref4[0];\n\n      _this.currentIndexValue = value;\n\n      if (value !== _this.props.navigationState.index) {\n        _this.props.onIndexChange(value);\n\n        _this.pendingIndexValue = value;\n\n        _this.forceUpdate();\n      }\n    })), onChange(_this.position, cond(I18nManager.isRTL ? lessThan(_this.gestureX, 0) : greaterThan(_this.gestureX, 0), cond(neq(floor(_this.position), _this.lastEnteredIndex), [set(_this.lastEnteredIndex, floor(_this.position)), call([floor(_this.position)], _this.handleEnteredIndexChange)]), cond(neq(ceil(_this.position), _this.lastEnteredIndex), [set(_this.lastEnteredIndex, ceil(_this.position)), call([ceil(_this.position)], _this.handleEnteredIndexChange)]))), onChange(_this.isSwiping, [cond(not(_this.isSwiping), set(_this.gesturesEnabled, 1)), call([_this.isSwiping, _this.indexAtSwipeEnd, _this.index], function (_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 3),\n          isSwiping = _ref6[0],\n          indexAtSwipeEnd = _ref6[1],\n          currentIndex = _ref6[2];\n\n      var _this$props2 = _this.props,\n          keyboardDismissMode = _this$props2.keyboardDismissMode,\n          onSwipeStart = _this$props2.onSwipeStart,\n          onSwipeEnd = _this$props2.onSwipeEnd;\n\n      if (isSwiping === TRUE) {\n        onSwipeStart == null ? void 0 : onSwipeStart();\n        _this.interactionHandle = InteractionManager.createInteractionHandle();\n\n        if (keyboardDismissMode === 'auto') {\n          var input = TextInput.State.currentlyFocusedField();\n          TextInput.State.blurTextInput(input);\n          _this.previouslyFocusedTextInput = input;\n        } else if (keyboardDismissMode === 'on-drag') {\n          Keyboard.dismiss();\n        }\n      } else {\n        onSwipeEnd == null ? void 0 : onSwipeEnd();\n\n        if (_this.interactionHandle !== null) {\n          InteractionManager.clearInteractionHandle(_this.interactionHandle);\n        }\n\n        if (keyboardDismissMode === 'auto') {\n          if (indexAtSwipeEnd === currentIndex) {\n            var _input = _this.previouslyFocusedTextInput;\n\n            if (_input) {\n              TextInput.State.focusTextInput(_input);\n            }\n          }\n\n          _this.previouslyFocusedTextInput = null;\n        }\n      }\n    })]), onChange(_this.nextIndex, cond(neq(_this.nextIndex, UNSET), [cond(clockRunning(_this.clock), stopClock(_this.clock)), set(_this.gestureX, 0), set(_this.index, _this.nextIndex), set(_this.nextIndex, UNSET)])), cond(eq(_this.gestureState, State.ACTIVE), [_this.maybeCancel, cond(_this.isSwiping, NOOP, [set(_this.isSwiping, TRUE), set(_this.isSwipeGesture, TRUE), set(_this.offsetX, _this.progress)]), set(_this.progress, I18nManager.isRTL ? sub(_this.offsetX, _this.gestureX) : add(_this.offsetX, _this.gestureX)), stopClock(_this.clock)], [set(_this.isSwiping, FALSE), set(_this.indexAtSwipeEnd, _this.index), _this.transitionTo(cond(and(greaterThan(abs(_this.gestureX), SWIPE_DISTANCE_MINIMUM), greaterThan(abs(_this.extrapolatedPosition), divide(_this.layoutWidth, 2))), round(min(max(0, sub(_this.index, cond(greaterThan(_this.extrapolatedPosition, 0), I18nManager.isRTL ? DIRECTION_RIGHT : DIRECTION_LEFT, I18nManager.isRTL ? DIRECTION_LEFT : DIRECTION_RIGHT))), sub(_this.routesLength, 1))), _this.index))]), _this.progress]);\n    _this.getTranslateX = memoize(function (layoutWidth, routesLength, translateX) {\n      return multiply(min(max(multiply(layoutWidth, sub(routesLength, 1), DIRECTION_RIGHT), translateX), 0), I18nManager.isRTL ? -1 : 1);\n    });\n    return _this;\n  }\n\n  _createClass(Pager, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.context && this.context.addGestureHandlerRef) {\n        this.context.addGestureHandlerRef(this.gestureHandlerRef);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props3 = this.props,\n          navigationState = _this$props3.navigationState,\n          layout = _this$props3.layout,\n          swipeVelocityImpact = _this$props3.swipeVelocityImpact,\n          springVelocityScale = _this$props3.springVelocityScale,\n          springConfig = _this$props3.springConfig,\n          timingConfig = _this$props3.timingConfig;\n      var index = navigationState.index,\n          routes = navigationState.routes;\n\n      if (index !== prevProps.navigationState.index && index !== this.currentIndexValue || typeof this.pendingIndexValue === 'number' && index !== this.pendingIndexValue) {\n        this.jumpToIndex(index);\n      }\n\n      this.pendingIndexValue = undefined;\n\n      if (prevProps.navigationState.routes.length !== routes.length) {\n        this.routesLength.setValue(routes.length);\n      }\n\n      if (prevProps.layout.width !== layout.width) {\n        this.progress.setValue(-index * layout.width);\n        this.layoutWidth.setValue(layout.width);\n      }\n\n      if (prevProps.swipeVelocityImpact !== swipeVelocityImpact) {\n        this.swipeVelocityImpact.setValue(swipeVelocityImpact !== undefined ? swipeVelocityImpact : SWIPE_VELOCITY_IMPACT);\n      }\n\n      if (prevProps.springVelocityScale !== springVelocityScale) {\n        this.springVelocityScale.setValue(springVelocityScale !== undefined ? springVelocityScale : SPRING_VELOCITY_SCALE);\n      }\n\n      if (prevProps.springConfig !== springConfig) {\n        this.springConfig.damping.setValue(springConfig.damping !== undefined ? springConfig.damping : SPRING_CONFIG.damping);\n        this.springConfig.mass.setValue(springConfig.mass !== undefined ? springConfig.mass : SPRING_CONFIG.mass);\n        this.springConfig.stiffness.setValue(springConfig.stiffness !== undefined ? springConfig.stiffness : SPRING_CONFIG.stiffness);\n        this.springConfig.restSpeedThreshold.setValue(springConfig.restSpeedThreshold !== undefined ? springConfig.restSpeedThreshold : SPRING_CONFIG.restSpeedThreshold);\n        this.springConfig.restDisplacementThreshold.setValue(springConfig.restDisplacementThreshold !== undefined ? springConfig.restDisplacementThreshold : SPRING_CONFIG.restDisplacementThreshold);\n      }\n\n      if (prevProps.timingConfig !== timingConfig) {\n        this.timingConfig.duration.setValue(timingConfig.duration !== undefined ? timingConfig.duration : TIMING_CONFIG.duration);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.interactionHandle !== null) {\n        InteractionManager.clearInteractionHandle(this.interactionHandle);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props4 = this.props,\n          layout = _this$props4.layout,\n          navigationState = _this$props4.navigationState,\n          swipeEnabled = _this$props4.swipeEnabled,\n          children = _this$props4.children,\n          removeClippedSubviews = _this$props4.removeClippedSubviews,\n          gestureHandlerProps = _this$props4.gestureHandlerProps;\n      var translateX = this.getTranslateX(this.layoutWidth, this.routesLength, this.translateX);\n      return children({\n        position: this.position,\n        addListener: this.addListener,\n        removeListener: this.removeListener,\n        jumpTo: this.jumpTo,\n        render: function render(children) {\n          return React.createElement(PanGestureHandler, _extends({\n            ref: _this2.gestureHandlerRef,\n            simultaneousHandlers: _this2.state.childPanGestureHandlerRefs,\n            waitFor: _this2.state.childPanGestureHandlerRefs,\n            enabled: layout.width !== 0 && swipeEnabled && _this2.state.enabled,\n            onGestureEvent: _this2.handleGestureEvent,\n            onHandlerStateChange: _this2.handleGestureEvent,\n            activeOffsetX: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n            failOffsetY: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]\n          }, gestureHandlerProps, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 769\n            }\n          }), React.createElement(Animated.View, {\n            removeClippedSubviews: removeClippedSubviews,\n            style: [styles.container, layout.width ? {\n              width: layout.width * navigationState.routes.length,\n              transform: [{\n                translateX: translateX\n              }]\n            } : null],\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 780\n            }\n          }, React.createElement(PagerContext.Provider, {\n            value: _this2.providerVal,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 792\n            }\n          }, children)));\n        }\n      });\n    }\n  }]);\n\n  return Pager;\n}(React.Component);\n\nPager.defaultProps = {\n  swipeVelocityImpact: SWIPE_VELOCITY_IMPACT,\n  springVelocityScale: SPRING_VELOCITY_SCALE\n};\nPager.contextType = PagerContext;\nexport { Pager as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row'\n  }\n});","map":{"version":3,"sources":["Pager.tsx"],"names":["Clock","Value","onChange","and","or","abs","add","block","call","ceil","clockRunning","cond","divide","eq","event","floor","greaterThan","lessThan","max","min","multiply","neq","not","round","set","spring","startClock","stopClock","sub","timing","Animated","PagerContext","React","TRUE","FALSE","NOOP","UNSET","DIRECTION_LEFT","DIRECTION_RIGHT","SWIPE_DISTANCE_MINIMUM","SWIPE_VELOCITY_IMPACT","SPRING_CONFIG","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","SPRING_VELOCITY_SCALE","TIMING_CONFIG","duration","easing","Easing","Pager","Component","defaultProps","swipeVelocityImpact","springVelocityScale","state","enabled","childPanGestureHandlerRefs","prevProps","navigationState","layout","springConfig","timingConfig","index","routes","InteractionManager","contextType","providerVal","addGestureHandlerRef","prevState","gestureHandlerRef","clock","velocityX","gestureX","gestureState","State","offsetX","gesturesEnabled","progress","nextIndex","lastEnteredIndex","isSwiping","isSwipeGesture","indexAtSwipeEnd","routesLength","layoutWidth","position","initialVelocityForSpring","currentIndexValue","pendingIndexValue","undefined","previouslyFocusedTextInput","enterListeners","interactionHandle","jumpToIndex","jumpTo","keyboardDismissMode","onIndexChange","route","Keyboard","addListener","removeListener","handleEnteredIndexChange","value","Math","listener","transitionTo","toValue","frameTime","time","finished","I18nManager","velocity","handleGestureEvent","nativeEvent","translationX","extrapolatedPosition","toggleEnabled","maybeCancel","translateX","currentIndex","onSwipeStart","onSwipeEnd","input","TextInput","getTranslateX","memoize","swipeEnabled","children","removeClippedSubviews","gestureHandlerProps","render","styles","width","transform","StyleSheet","container","flex","flexDirection"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  TextInput,\n  Keyboard,\n  I18nManager,\n  InteractionManager,\n} from 'react-native';\nimport { PanGestureHandler, State } from 'react-native-gesture-handler';\nimport Animated, { Easing } from 'react-native-reanimated';\nimport memoize from './memoize';\n\nimport {\n  Layout,\n  NavigationState,\n  Route,\n  Listener,\n  PagerCommonProps,\n  EventEmitterProps,\n} from './types';\n\ntype Binary = 0 | 1;\n\nexport type Props<T extends Route> = PagerCommonProps & {\n  onIndexChange: (index: number) => void;\n  navigationState: NavigationState<T>;\n  layout: Layout;\n  // Clip unfocused views to improve memory usage\n  // Don't enable this on iOS where this is buggy and views don't re-appear\n  removeClippedSubviews?: boolean;\n  children: (\n    props: EventEmitterProps & {\n      // Animated value which represents the state of current index\n      // It can include fractional digits as it represents the intermediate value\n      position: Animated.Node<number>;\n      // Function to actually render the content of the pager\n      // The parent component takes care of rendering\n      render: (children: React.ReactNode) => React.ReactNode;\n      // Callback to call when switching the tab\n      // The tab switch animation is performed even if the index in state is unchanged\n      jumpTo: (key: string) => void;\n    }\n  ) => React.ReactNode;\n  gestureHandlerProps: React.ComponentProps<typeof PanGestureHandler>;\n};\n\ntype ComponentState = {\n  enabled: boolean;\n  childPanGestureHandlerRefs: React.RefObject<PanGestureHandler>[];\n};\n\nconst {\n  Clock,\n  Value,\n  onChange,\n  and,\n  or,\n  abs,\n  add,\n  block,\n  call,\n  ceil,\n  clockRunning,\n  cond,\n  divide,\n  eq,\n  event,\n  floor,\n  greaterThan,\n  lessThan,\n  max,\n  min,\n  multiply,\n  neq,\n  not,\n  round,\n  set,\n  spring,\n  startClock,\n  stopClock,\n  sub,\n  timing,\n} = Animated;\n\nconst PagerContext = React.createContext({});\n\nconst TRUE = 1;\nconst FALSE = 0;\nconst NOOP = 0;\nconst UNSET = -1;\n\nconst DIRECTION_LEFT = 1;\nconst DIRECTION_RIGHT = -1;\n\nconst SWIPE_DISTANCE_MINIMUM = 20;\n\nconst SWIPE_VELOCITY_IMPACT = 0.2;\n\nconst SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01,\n};\n\nconst SPRING_VELOCITY_SCALE = 1;\n\nconst TIMING_CONFIG = {\n  duration: 200,\n  easing: Easing.out(Easing.cubic),\n};\n\nexport default class Pager<T extends Route> extends React.Component<\n  Props<T>,\n  ComponentState\n> {\n  static defaultProps = {\n    swipeVelocityImpact: SWIPE_VELOCITY_IMPACT,\n    springVelocityScale: SPRING_VELOCITY_SCALE,\n  };\n\n  state = {\n    enabled: true,\n    childPanGestureHandlerRefs: [] as React.RefObject<PanGestureHandler>[],\n  };\n\n  componentDidMount() {\n    // Register this PanGestureHandler with the parent (if parent exists)\n    // in order to coordinate gestures between handlers.\n    if (this.context && this.context.addGestureHandlerRef) {\n      this.context.addGestureHandlerRef(this.gestureHandlerRef);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props<T>) {\n    const {\n      navigationState,\n      layout,\n      swipeVelocityImpact,\n      springVelocityScale,\n      springConfig,\n      timingConfig,\n    } = this.props;\n    const { index, routes } = navigationState;\n\n    if (\n      // Check for index in state to avoid unintended transition if component updates during swipe\n      (index !== prevProps.navigationState.index &&\n        index !== this.currentIndexValue) ||\n      // Check if the user updated the index correctly after an update\n      (typeof this.pendingIndexValue === 'number' &&\n        index !== this.pendingIndexValue)\n    ) {\n      // Index in user's state is different from the index being tracked\n      this.jumpToIndex(index);\n    }\n\n    // Reset the pending index\n    this.pendingIndexValue = undefined;\n\n    // Update our mappings of animated nodes when props change\n    if (prevProps.navigationState.routes.length !== routes.length) {\n      this.routesLength.setValue(routes.length);\n    }\n\n    if (prevProps.layout.width !== layout.width) {\n      this.progress.setValue(-index * layout.width);\n      this.layoutWidth.setValue(layout.width);\n    }\n\n    if (prevProps.swipeVelocityImpact !== swipeVelocityImpact) {\n      this.swipeVelocityImpact.setValue(\n        swipeVelocityImpact !== undefined\n          ? swipeVelocityImpact\n          : SWIPE_VELOCITY_IMPACT\n      );\n    }\n\n    if (prevProps.springVelocityScale !== springVelocityScale) {\n      this.springVelocityScale.setValue(\n        springVelocityScale !== undefined\n          ? springVelocityScale\n          : SPRING_VELOCITY_SCALE\n      );\n    }\n\n    if (prevProps.springConfig !== springConfig) {\n      this.springConfig.damping.setValue(\n        springConfig.damping !== undefined\n          ? springConfig.damping\n          : SPRING_CONFIG.damping\n      );\n\n      this.springConfig.mass.setValue(\n        springConfig.mass !== undefined ? springConfig.mass : SPRING_CONFIG.mass\n      );\n\n      this.springConfig.stiffness.setValue(\n        springConfig.stiffness !== undefined\n          ? springConfig.stiffness\n          : SPRING_CONFIG.stiffness\n      );\n\n      this.springConfig.restSpeedThreshold.setValue(\n        springConfig.restSpeedThreshold !== undefined\n          ? springConfig.restSpeedThreshold\n          : SPRING_CONFIG.restSpeedThreshold\n      );\n\n      this.springConfig.restDisplacementThreshold.setValue(\n        springConfig.restDisplacementThreshold !== undefined\n          ? springConfig.restDisplacementThreshold\n          : SPRING_CONFIG.restDisplacementThreshold\n      );\n    }\n\n    if (prevProps.timingConfig !== timingConfig) {\n      this.timingConfig.duration.setValue(\n        timingConfig.duration !== undefined\n          ? timingConfig.duration\n          : TIMING_CONFIG.duration\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.interactionHandle !== null) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n    }\n  }\n\n  static contextType = PagerContext;\n\n  // Mechanism to add child PanGestureHandler refs in the case that this\n  // Pager is a parent to child Pagers. Allows for coordination between handlers\n  private providerVal = {\n    addGestureHandlerRef: (ref: React.RefObject<PanGestureHandler>) => {\n      if (!this.state.childPanGestureHandlerRefs.includes(ref)) {\n        this.setState((prevState: ComponentState) => ({\n          childPanGestureHandlerRefs: [\n            ...prevState.childPanGestureHandlerRefs,\n            ref,\n          ],\n        }));\n      }\n    },\n  };\n\n  // PanGestureHandler ref used for coordination with parent handlers\n  private gestureHandlerRef: React.RefObject<\n    PanGestureHandler\n  > = React.createRef();\n\n  // Clock used for tab transition animations\n  private clock = new Clock();\n\n  // Current state of the gesture\n  private velocityX = new Value(0);\n  private gestureX = new Value(0);\n  private gestureState = new Value(State.UNDETERMINED);\n  private offsetX = new Value(0);\n\n  // Tracks current state of gesture handler enabled\n  private gesturesEnabled = new Value(1);\n\n  // Current progress of the page (translateX value)\n  private progress = new Value(\n    // Initial value is based on the index and page width\n    this.props.navigationState.index * this.props.layout.width * DIRECTION_RIGHT\n  );\n\n  // Initial index of the tabs\n  private index = new Value(this.props.navigationState.index);\n\n  // Next index of the tabs, updated for navigation from outside (tab press, state update)\n  private nextIndex: Animated.Value<number> = new Value(UNSET);\n\n  // Scene that was last entered\n  private lastEnteredIndex = new Value(this.props.navigationState.index);\n\n  // Whether the user is currently dragging the screen\n  private isSwiping: Animated.Value<Binary> = new Value(FALSE);\n\n  // Whether the update was due to swipe gesture\n  // This controls whether the transition will use a spring or timing animation\n  // Remember to set it before transition needs to occur\n  private isSwipeGesture: Animated.Value<Binary> = new Value(FALSE);\n\n  // Track the index value when a swipe gesture has ended\n  // This lets us know if a gesture end triggered a tab switch or not\n  private indexAtSwipeEnd: Animated.Value<number> = new Value(\n    this.props.navigationState.index\n  );\n\n  // Mappings to some prop values\n  // We use them in animation calculations, so we need live animated nodes\n  private routesLength = new Value(this.props.navigationState.routes.length);\n  private layoutWidth = new Value(this.props.layout.width);\n\n  // Determines how relevant is a velocity while calculating next position while swiping\n  private swipeVelocityImpact = new Value(\n    this.props.swipeVelocityImpact !== undefined\n      ? this.props.swipeVelocityImpact\n      : SWIPE_VELOCITY_IMPACT\n  );\n\n  private springVelocityScale = new Value(\n    this.props.springVelocityScale !== undefined\n      ? this.props.springVelocityScale\n      : SPRING_VELOCITY_SCALE\n  );\n\n  // The position value represent the position of the pager on a scale of 0 - routes.length-1\n  // It is calculated based on the translate value and layout width\n  // If we don't have the layout yet, we should return the current index\n  private position = cond(\n    this.layoutWidth,\n    divide(multiply(this.progress, -1), this.layoutWidth),\n    this.index\n  );\n\n  // Animation configuration\n  private springConfig = {\n    damping: new Value(\n      this.props.springConfig.damping !== undefined\n        ? this.props.springConfig.damping\n        : SPRING_CONFIG.damping\n    ),\n    mass: new Value(\n      this.props.springConfig.mass !== undefined\n        ? this.props.springConfig.mass\n        : SPRING_CONFIG.mass\n    ),\n    stiffness: new Value(\n      this.props.springConfig.stiffness !== undefined\n        ? this.props.springConfig.stiffness\n        : SPRING_CONFIG.stiffness\n    ),\n    restSpeedThreshold: new Value(\n      this.props.springConfig.restSpeedThreshold !== undefined\n        ? this.props.springConfig.restSpeedThreshold\n        : SPRING_CONFIG.restSpeedThreshold\n    ),\n    restDisplacementThreshold: new Value(\n      this.props.springConfig.restDisplacementThreshold !== undefined\n        ? this.props.springConfig.restDisplacementThreshold\n        : SPRING_CONFIG.restDisplacementThreshold\n    ),\n  };\n\n  private timingConfig = {\n    duration: new Value(\n      this.props.timingConfig.duration !== undefined\n        ? this.props.timingConfig.duration\n        : TIMING_CONFIG.duration\n    ),\n  };\n\n  // The reason for using this value instead of simply passing `this._velocity`\n  // into a spring animation is that we need to reverse it if we're using RTL mode.\n  // Also, it's not possible to pass multiplied value there, because\n  // value passed to STATE of spring (the first argument) has to be Animated.Value\n  // and it's not allowed to pass other nodes there. The result of multiplying is not an\n  // Animated.Value. So this value is being updated on each start of spring animation.\n  private initialVelocityForSpring = new Value(0);\n\n  // The current index change caused by the pager's animation\n  // The pager is used as a controlled component\n  // We need to keep track of the index to determine when to trigger animation\n  // The state will change at various points, we should only respond when we are out of sync\n  // This will ensure smoother animation and avoid weird glitches\n  private currentIndexValue = this.props.navigationState.index;\n\n  // The pending index value as result of state update caused by swipe gesture\n  // We need to set it when state changes from inside this component\n  // It also needs to be reset right after componentDidUpdate fires\n  private pendingIndexValue: number | undefined = undefined;\n\n  // Numeric id of the previously focused text input\n  // When a gesture didn't change the tab, we can restore the focused input with this\n  private previouslyFocusedTextInput: number | null = null;\n\n  // Listeners for the entered screen\n  private enterListeners: Listener[] = [];\n\n  // InteractionHandle to handle tasks around animations\n  private interactionHandle: number | null = null;\n\n  private jumpToIndex = (index: number) => {\n    // If the index changed, we need to trigger a tab switch\n    this.isSwipeGesture.setValue(FALSE);\n    this.nextIndex.setValue(index);\n  };\n\n  private jumpTo = (key: string) => {\n    const { navigationState, keyboardDismissMode, onIndexChange } = this.props;\n\n    const index = navigationState.routes.findIndex(route => route.key === key);\n\n    // A tab switch might occur when we're in the middle of a transition\n    // In that case, the index might be same as before\n    // So we conditionally make the pager to update the position\n    if (navigationState.index === index) {\n      this.jumpToIndex(index);\n    } else {\n      onIndexChange(index);\n\n      // When the index changes, the focused input will no longer be in current tab\n      // So we should dismiss the keyboard\n      if (keyboardDismissMode === 'auto') {\n        Keyboard.dismiss();\n      }\n    }\n  };\n\n  private addListener = (type: 'enter', listener: Listener) => {\n    switch (type) {\n      case 'enter':\n        this.enterListeners.push(listener);\n        break;\n    }\n  };\n\n  private removeListener = (type: 'enter', listener: Listener) => {\n    switch (type) {\n      case 'enter': {\n        const index = this.enterListeners.indexOf(listener);\n\n        if (index > -1) {\n          this.enterListeners.splice(index, 1);\n        }\n\n        break;\n      }\n    }\n  };\n\n  private handleEnteredIndexChange = ([value]: readonly number[]) => {\n    const index = Math.max(\n      0,\n      Math.min(value, this.props.navigationState.routes.length - 1)\n    );\n\n    this.enterListeners.forEach(listener => listener(index));\n  };\n\n  private transitionTo = (index: Animated.Node<number>) => {\n    const toValue = new Value(0);\n    const frameTime = new Value(0);\n\n    const state = {\n      position: this.progress,\n      time: new Value(0),\n      finished: new Value(FALSE),\n    };\n\n    return block([\n      cond(clockRunning(this.clock), NOOP, [\n        // Animation wasn't running before\n        // Set the initial values and start the clock\n        set(toValue, multiply(index, this.layoutWidth, DIRECTION_RIGHT)),\n        set(frameTime, 0),\n        set(state.time, 0),\n        set(state.finished, FALSE),\n        set(this.index, index),\n      ]),\n      cond(\n        this.isSwipeGesture,\n        // Animate the values with a spring for swipe\n        [\n          cond(\n            not(clockRunning(this.clock)),\n            I18nManager.isRTL\n              ? set(\n                  this.initialVelocityForSpring,\n                  multiply(-1, this.velocityX, this.springVelocityScale)\n                )\n              : set(\n                  this.initialVelocityForSpring,\n                  multiply(this.velocityX, this.springVelocityScale)\n                )\n          ),\n          spring(\n            this.clock,\n            { ...state, velocity: this.initialVelocityForSpring },\n            { ...SPRING_CONFIG, ...this.springConfig, toValue }\n          ),\n        ],\n        // Otherwise use a timing animation for faster switching\n        timing(\n          this.clock,\n          { ...state, frameTime },\n          { ...TIMING_CONFIG, ...this.timingConfig, toValue }\n        )\n      ),\n      cond(not(clockRunning(this.clock)), startClock(this.clock)),\n      cond(state.finished, [\n        // Reset values\n        set(this.isSwipeGesture, FALSE),\n        set(this.gestureX, 0),\n        set(this.velocityX, 0),\n        // When the animation finishes, stop the clock\n        stopClock(this.clock),\n      ]),\n    ]);\n  };\n\n  private handleGestureEvent = event([\n    {\n      nativeEvent: {\n        translationX: this.gestureX,\n        velocityX: this.velocityX,\n        state: this.gestureState,\n      },\n    },\n  ]);\n\n  private extrapolatedPosition = add(\n    this.gestureX,\n    multiply(this.velocityX, this.swipeVelocityImpact)\n  );\n\n  private toggleEnabled = () => {\n    if (this.state.enabled)\n      this.setState({ enabled: false }, () => {\n        this.setState({ enabled: true });\n      });\n  };\n\n  // Cancel gesture if swiping back from the initial tab or forward from the last tab.\n  // Enables parent Pager to pick up the gesture if one exists.\n  private maybeCancel = block([\n    cond(\n      and(\n        this.gesturesEnabled,\n        or(\n          and(\n            eq(this.index, sub(this.routesLength, 1)),\n            lessThan(this.gestureX, 0)\n          ),\n          and(eq(this.index, 0), greaterThan(this.gestureX, 0))\n        )\n      ),\n      set(this.gesturesEnabled, 0)\n    ),\n  ]);\n\n  private translateX = block([\n    onChange(\n      this.gesturesEnabled,\n      cond(\n        not(this.gesturesEnabled),\n        call([this.gesturesEnabled], this.toggleEnabled)\n      )\n    ),\n    onChange(\n      this.index,\n      call([this.index], ([value]) => {\n        this.currentIndexValue = value;\n        // Without this check, the pager can go to an infinite update <-> animate loop for sync updates\n        if (value !== this.props.navigationState.index) {\n          // If the index changed, and previous animation has finished, update state\n          this.props.onIndexChange(value);\n\n          this.pendingIndexValue = value;\n\n          // Force componentDidUpdate to fire, whether user does a setState or not\n          // This allows us to detect when the user drops the update and revert back\n          // It's necessary to make sure that the state stays in sync\n          this.forceUpdate();\n        }\n      })\n    ),\n    onChange(\n      this.position,\n      // Listen to updates in the position to detect when we enter a screen\n      // This is useful for things such as lazy loading when index change will fire too late\n      cond(\n        I18nManager.isRTL\n          ? lessThan(this.gestureX, 0)\n          : greaterThan(this.gestureX, 0),\n        // Based on the direction of the gesture, determine if we're entering the previous or next screen\n        cond(neq(floor(this.position), this.lastEnteredIndex), [\n          set(this.lastEnteredIndex, floor(this.position)),\n          call([floor(this.position)], this.handleEnteredIndexChange),\n        ]),\n        cond(neq(ceil(this.position), this.lastEnteredIndex), [\n          set(this.lastEnteredIndex, ceil(this.position)),\n          call([ceil(this.position)], this.handleEnteredIndexChange),\n        ])\n      )\n    ),\n    onChange(\n      this.isSwiping,\n      // Listen to updates for this value only when it changes\n      // Without `onChange`, this will fire even if the value didn't change\n      // We don't want to call the listeners if the value didn't change\n      [\n        cond(not(this.isSwiping), set(this.gesturesEnabled, 1)),\n        call(\n          [this.isSwiping, this.indexAtSwipeEnd, this.index],\n          ([isSwiping, indexAtSwipeEnd, currentIndex]: readonly number[]) => {\n            const {\n              keyboardDismissMode,\n              onSwipeStart,\n              onSwipeEnd,\n            } = this.props;\n\n            if (isSwiping === TRUE) {\n              onSwipeStart?.();\n              this.interactionHandle = InteractionManager.createInteractionHandle();\n\n              if (keyboardDismissMode === 'auto') {\n                const input = TextInput.State.currentlyFocusedField();\n\n                // When a gesture begins, blur the currently focused input\n                TextInput.State.blurTextInput(input);\n\n                // Store the id of this input so we can refocus it if gesture was cancelled\n                this.previouslyFocusedTextInput = input;\n              } else if (keyboardDismissMode === 'on-drag') {\n                Keyboard.dismiss();\n              }\n            } else {\n              onSwipeEnd?.();\n\n              if (this.interactionHandle !== null) {\n                InteractionManager.clearInteractionHandle(\n                  this.interactionHandle\n                );\n              }\n\n              if (keyboardDismissMode === 'auto') {\n                if (indexAtSwipeEnd === currentIndex) {\n                  // The index didn't change, we should restore the focus of text input\n                  const input = this.previouslyFocusedTextInput;\n\n                  if (input) {\n                    TextInput.State.focusTextInput(input);\n                  }\n                }\n\n                this.previouslyFocusedTextInput = null;\n              }\n            }\n          }\n        ),\n      ]\n    ),\n    onChange(\n      this.nextIndex,\n      cond(neq(this.nextIndex, UNSET), [\n        // Stop any running animations\n        cond(clockRunning(this.clock), stopClock(this.clock)),\n        set(this.gestureX, 0),\n        // Update the index to trigger the transition\n        set(this.index, this.nextIndex),\n        set(this.nextIndex, UNSET),\n      ])\n    ),\n    cond(\n      eq(this.gestureState, State.ACTIVE),\n      [\n        this.maybeCancel,\n        cond(this.isSwiping, NOOP, [\n          // We weren't dragging before, set it to true\n          set(this.isSwiping, TRUE),\n          set(this.isSwipeGesture, TRUE),\n          // Also update the drag offset to the last progress\n          set(this.offsetX, this.progress),\n        ]),\n        // Update progress with previous offset + gesture distance\n        set(\n          this.progress,\n          I18nManager.isRTL\n            ? sub(this.offsetX, this.gestureX)\n            : add(this.offsetX, this.gestureX)\n        ),\n        // Stop animations while we're dragging\n        stopClock(this.clock),\n      ],\n      [\n        set(this.isSwiping, FALSE),\n        set(this.indexAtSwipeEnd, this.index),\n        this.transitionTo(\n          cond(\n            and(\n              // We should consider velocity and gesture distance only when a swipe ends\n              // The gestureX value will be non-zero when swipe has happened\n              // We check against a minimum distance instead of 0 because `activeOffsetX` doesn't seem to be respected on Android\n              // For other factors such as state update, the velocity and gesture distance don't matter\n              greaterThan(abs(this.gestureX), SWIPE_DISTANCE_MINIMUM),\n              greaterThan(\n                abs(this.extrapolatedPosition),\n                divide(this.layoutWidth, 2)\n              )\n            ),\n            // For swipe gesture, to calculate the index, determine direction and add to index\n            // When the user swipes towards the left, we transition to the next tab\n            // When the user swipes towards the right, we transition to the previous tab\n            round(\n              min(\n                max(\n                  0,\n                  sub(\n                    this.index,\n                    cond(\n                      greaterThan(this.extrapolatedPosition, 0),\n                      I18nManager.isRTL ? DIRECTION_RIGHT : DIRECTION_LEFT,\n                      I18nManager.isRTL ? DIRECTION_LEFT : DIRECTION_RIGHT\n                    )\n                  )\n                ),\n                sub(this.routesLength, 1)\n              )\n            ),\n            // Index didn't change/changed due to state update\n            this.index\n          )\n        ),\n      ]\n    ),\n    this.progress,\n  ]);\n\n  private getTranslateX = memoize(\n    (\n      layoutWidth: Animated.Node<number>,\n      routesLength: Animated.Node<number>,\n      translateX: Animated.Node<number>\n    ) =>\n      multiply(\n        // Make sure that the translation doesn't exceed the bounds to prevent overscrolling\n        min(\n          max(\n            multiply(layoutWidth, sub(routesLength, 1), DIRECTION_RIGHT),\n            translateX\n          ),\n          0\n        ),\n        I18nManager.isRTL ? -1 : 1\n      )\n  );\n\n  render() {\n    const {\n      layout,\n      navigationState,\n      swipeEnabled,\n      children,\n      removeClippedSubviews,\n      gestureHandlerProps,\n    } = this.props;\n\n    const translateX = this.getTranslateX(\n      this.layoutWidth,\n      this.routesLength,\n      this.translateX\n    );\n\n    return children({\n      position: this.position,\n      addListener: this.addListener,\n      removeListener: this.removeListener,\n      jumpTo: this.jumpTo,\n      render: children => (\n        <PanGestureHandler\n          ref={this.gestureHandlerRef}\n          simultaneousHandlers={this.state.childPanGestureHandlerRefs}\n          waitFor={this.state.childPanGestureHandlerRefs}\n          enabled={layout.width !== 0 && swipeEnabled && this.state.enabled}\n          onGestureEvent={this.handleGestureEvent}\n          onHandlerStateChange={this.handleGestureEvent}\n          activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          {...gestureHandlerProps}\n        >\n          <Animated.View\n            removeClippedSubviews={removeClippedSubviews}\n            style={[\n              styles.container,\n              layout.width\n                ? {\n                    width: layout.width * navigationState.routes.length,\n                    transform: [{ translateX }] as any,\n                  }\n                : null,\n            ]}\n          >\n            <PagerContext.Provider value={this.providerVal}>\n              {children}\n            </PagerContext.Provider>\n          </Animated.View>\n        </PanGestureHandler>\n      ),\n    });\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}