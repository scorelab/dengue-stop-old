{"ast":null,"code":"'use strict';\n\nvar EventEmitter = require('events').EventEmitter,\n    inherits = require('inherits'),\n    JSON3 = require('json3'),\n    utils = require(\"./utils/event\"),\n    IframeTransport = require(\"./transport/iframe\"),\n    InfoReceiverIframe = require(\"./info-iframe-receiver\");\n\nvar debug = function debug() {};\n\nif (process.env.NODE_ENV !== 'production') {\n  debug = require('debug')('sockjs-client:info-iframe');\n}\n\nfunction InfoIframe(baseUrl, url) {\n  var self = this;\n  EventEmitter.call(this);\n\n  var go = function go() {\n    var ifr = self.ifr = new IframeTransport(InfoReceiverIframe.transportName, url, baseUrl);\n    ifr.once('message', function (msg) {\n      if (msg) {\n        var d;\n\n        try {\n          d = JSON3.parse(msg);\n        } catch (e) {\n          debug('bad json', msg);\n          self.emit('finish');\n          self.close();\n          return;\n        }\n\n        var info = d[0],\n            rtt = d[1];\n        self.emit('finish', info, rtt);\n      }\n\n      self.close();\n    });\n    ifr.once('close', function () {\n      self.emit('finish');\n      self.close();\n    });\n  };\n\n  if (!global.document.body) {\n    utils.attachEvent('load', go);\n  } else {\n    go();\n  }\n}\n\ninherits(InfoIframe, EventEmitter);\n\nInfoIframe.enabled = function () {\n  return IframeTransport.enabled();\n};\n\nInfoIframe.prototype.close = function () {\n  if (this.ifr) {\n    this.ifr.close();\n  }\n\n  this.removeAllListeners();\n  this.ifr = null;\n};\n\nmodule.exports = InfoIframe;","map":{"version":3,"sources":["C:/Users/Thivagar/AppData/Roaming/npm/node_modules/expo-cli/node_modules/sockjs-client/lib/info-iframe.js"],"names":["EventEmitter","require","inherits","JSON3","utils","IframeTransport","InfoReceiverIframe","debug","process","env","NODE_ENV","InfoIframe","baseUrl","url","self","call","go","ifr","transportName","once","msg","d","parse","e","emit","close","info","rtt","global","document","body","attachEvent","enabled","prototype","removeAllListeners","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,QAAD,CAAP,CAAkBD,YAArC;AAAA,IACIE,QAAQ,GAAGD,OAAO,CAAC,UAAD,CADtB;AAAA,IAEIE,KAAK,GAAGF,OAAO,CAAC,OAAD,CAFnB;AAAA,IAGIG,KAAK,GAAGH,OAAO,iBAHnB;AAAA,IAIII,eAAe,GAAGJ,OAAO,sBAJ7B;AAAA,IAKIK,kBAAkB,GAAGL,OAAO,0BALhC;;AAQA,IAAIM,KAAK,GAAG,iBAAW,CAAE,CAAzB;;AACA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCH,EAAAA,KAAK,GAAGN,OAAO,CAAC,OAAD,CAAP,CAAiB,2BAAjB,CAAR;AACD;;AAED,SAASU,UAAT,CAAoBC,OAApB,EAA6BC,GAA7B,EAAkC;AAChC,MAAIC,IAAI,GAAG,IAAX;AACAd,EAAAA,YAAY,CAACe,IAAb,CAAkB,IAAlB;;AAEA,MAAIC,EAAE,GAAG,SAALA,EAAK,GAAW;AAClB,QAAIC,GAAG,GAAGH,IAAI,CAACG,GAAL,GAAW,IAAIZ,eAAJ,CAAoBC,kBAAkB,CAACY,aAAvC,EAAsDL,GAAtD,EAA2DD,OAA3D,CAArB;AAEAK,IAAAA,GAAG,CAACE,IAAJ,CAAS,SAAT,EAAoB,UAASC,GAAT,EAAc;AAChC,UAAIA,GAAJ,EAAS;AACP,YAAIC,CAAJ;;AACA,YAAI;AACFA,UAAAA,CAAC,GAAGlB,KAAK,CAACmB,KAAN,CAAYF,GAAZ,CAAJ;AACD,SAFD,CAEE,OAAOG,CAAP,EAAU;AACVhB,UAAAA,KAAK,CAAC,UAAD,EAAaa,GAAb,CAAL;AACAN,UAAAA,IAAI,CAACU,IAAL,CAAU,QAAV;AACAV,UAAAA,IAAI,CAACW,KAAL;AACA;AACD;;AAED,YAAIC,IAAI,GAAGL,CAAC,CAAC,CAAD,CAAZ;AAAA,YAAiBM,GAAG,GAAGN,CAAC,CAAC,CAAD,CAAxB;AACAP,QAAAA,IAAI,CAACU,IAAL,CAAU,QAAV,EAAoBE,IAApB,EAA0BC,GAA1B;AACD;;AACDb,MAAAA,IAAI,CAACW,KAAL;AACD,KAhBD;AAkBAR,IAAAA,GAAG,CAACE,IAAJ,CAAS,OAAT,EAAkB,YAAW;AAC3BL,MAAAA,IAAI,CAACU,IAAL,CAAU,QAAV;AACAV,MAAAA,IAAI,CAACW,KAAL;AACD,KAHD;AAID,GAzBD;;AA4BA,MAAI,CAACG,MAAM,CAACC,QAAP,CAAgBC,IAArB,EAA2B;AACzB1B,IAAAA,KAAK,CAAC2B,WAAN,CAAkB,MAAlB,EAA0Bf,EAA1B;AACD,GAFD,MAEO;AACLA,IAAAA,EAAE;AACH;AACF;;AAEDd,QAAQ,CAACS,UAAD,EAAaX,YAAb,CAAR;;AAEAW,UAAU,CAACqB,OAAX,GAAqB,YAAW;AAC9B,SAAO3B,eAAe,CAAC2B,OAAhB,EAAP;AACD,CAFD;;AAIArB,UAAU,CAACsB,SAAX,CAAqBR,KAArB,GAA6B,YAAW;AACtC,MAAI,KAAKR,GAAT,EAAc;AACZ,SAAKA,GAAL,CAASQ,KAAT;AACD;;AACD,OAAKS,kBAAL;AACA,OAAKjB,GAAL,GAAW,IAAX;AACD,CAND;;AAQAkB,MAAM,CAACC,OAAP,GAAiBzB,UAAjB","sourcesContent":["'use strict';\n\nvar EventEmitter = require('events').EventEmitter\n  , inherits = require('inherits')\n  , JSON3 = require('json3')\n  , utils = require('./utils/event')\n  , IframeTransport = require('./transport/iframe')\n  , InfoReceiverIframe = require('./info-iframe-receiver')\n  ;\n\nvar debug = function() {};\nif (process.env.NODE_ENV !== 'production') {\n  debug = require('debug')('sockjs-client:info-iframe');\n}\n\nfunction InfoIframe(baseUrl, url) {\n  var self = this;\n  EventEmitter.call(this);\n\n  var go = function() {\n    var ifr = self.ifr = new IframeTransport(InfoReceiverIframe.transportName, url, baseUrl);\n\n    ifr.once('message', function(msg) {\n      if (msg) {\n        var d;\n        try {\n          d = JSON3.parse(msg);\n        } catch (e) {\n          debug('bad json', msg);\n          self.emit('finish');\n          self.close();\n          return;\n        }\n\n        var info = d[0], rtt = d[1];\n        self.emit('finish', info, rtt);\n      }\n      self.close();\n    });\n\n    ifr.once('close', function() {\n      self.emit('finish');\n      self.close();\n    });\n  };\n\n  // TODO this seems the same as the 'needBody' from transports\n  if (!global.document.body) {\n    utils.attachEvent('load', go);\n  } else {\n    go();\n  }\n}\n\ninherits(InfoIframe, EventEmitter);\n\nInfoIframe.enabled = function() {\n  return IframeTransport.enabled();\n};\n\nInfoIframe.prototype.close = function() {\n  if (this.ifr) {\n    this.ifr.close();\n  }\n  this.removeAllListeners();\n  this.ifr = null;\n};\n\nmodule.exports = InfoIframe;\n"]},"metadata":{},"sourceType":"script"}