{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport AnimatedNode from \"./AnimatedNode\";\nimport deepEqual from 'fbjs/lib/areEqual';\n\nfunction sanitizeTransform(inputTransform) {\n  var outputTransform = [];\n  inputTransform.forEach(function (transform) {\n    for (var key in transform) {\n      var value = transform[key];\n\n      if (value instanceof AnimatedNode) {\n        outputTransform.push({\n          property: key,\n          nodeID: value.__nodeID\n        });\n      } else {\n        outputTransform.push({\n          property: key,\n          value: value\n        });\n      }\n    }\n  });\n  return outputTransform;\n}\n\nfunction extractAnimatedParentNodes(transform) {\n  var parents = [];\n  transform.forEach(function (transform) {\n    for (var key in transform) {\n      var value = transform[key];\n\n      if (value instanceof AnimatedNode) {\n        parents.push(value);\n      }\n    }\n  });\n  return parents;\n}\n\nexport function createOrReuseTransformNode(transform, oldNode) {\n  var config = sanitizeTransform(transform);\n\n  if (oldNode && deepEqual(config, oldNode._config)) {\n    return oldNode;\n  }\n\n  return new AnimatedTransform(transform, config);\n}\n\nvar AnimatedTransform = function (_AnimatedNode) {\n  _inherits(AnimatedTransform, _AnimatedNode);\n\n  function AnimatedTransform(transform, config) {\n    var _this;\n\n    _classCallCheck(this, AnimatedTransform);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedTransform).call(this, {\n      type: 'transform',\n      transform: config\n    }, extractAnimatedParentNodes(transform)));\n    _this._config = config;\n    _this._transform = transform;\n    return _this;\n  }\n\n  _createClass(AnimatedTransform, [{\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      return this._transform.map(function (transform) {\n        var result = {};\n\n        for (var key in transform) {\n          var value = transform[key];\n\n          if (value instanceof AnimatedNode) {\n            result[key] = value.__getValue();\n          }\n        }\n\n        return result;\n      });\n    }\n  }]);\n\n  return AnimatedTransform;\n}(AnimatedNode);","map":{"version":3,"sources":["C:/Users/Thivagar/Documents/GSOC Work/dengue-stop/node_modules/react-native-reanimated/src/core/AnimatedTransform.js"],"names":["AnimatedNode","deepEqual","sanitizeTransform","inputTransform","outputTransform","forEach","transform","key","value","push","property","nodeID","__nodeID","extractAnimatedParentNodes","parents","createOrReuseTransformNode","oldNode","config","_config","AnimatedTransform","type","_transform","map","result","__getValue"],"mappings":";;;;;AAAA,OAAOA,YAAP;AAEA,OAAOC,SAAP,MAAsB,mBAAtB;;AAEA,SAASC,iBAAT,CAA2BC,cAA3B,EAA2C;AACzC,MAAMC,eAAe,GAAG,EAAxB;AACAD,EAAAA,cAAc,CAACE,OAAf,CAAuB,UAAAC,SAAS,EAAI;AAClC,SAAK,IAAMC,GAAX,IAAkBD,SAAlB,EAA6B;AAC3B,UAAME,KAAK,GAAGF,SAAS,CAACC,GAAD,CAAvB;;AACA,UAAIC,KAAK,YAAYR,YAArB,EAAmC;AACjCI,QAAAA,eAAe,CAACK,IAAhB,CAAqB;AACnBC,UAAAA,QAAQ,EAAEH,GADS;AAEnBI,UAAAA,MAAM,EAAEH,KAAK,CAACI;AAFK,SAArB;AAID,OALD,MAKO;AACLR,QAAAA,eAAe,CAACK,IAAhB,CAAqB;AACnBC,UAAAA,QAAQ,EAAEH,GADS;AAEnBC,UAAAA,KAAK,EAALA;AAFmB,SAArB;AAID;AACF;AACF,GAfD;AAgBA,SAAOJ,eAAP;AACD;;AAED,SAASS,0BAAT,CAAoCP,SAApC,EAA+C;AAC7C,MAAMQ,OAAO,GAAG,EAAhB;AACAR,EAAAA,SAAS,CAACD,OAAV,CAAkB,UAAAC,SAAS,EAAI;AAC7B,SAAK,IAAMC,GAAX,IAAkBD,SAAlB,EAA6B;AAC3B,UAAME,KAAK,GAAGF,SAAS,CAACC,GAAD,CAAvB;;AACA,UAAIC,KAAK,YAAYR,YAArB,EAAmC;AACjCc,QAAAA,OAAO,CAACL,IAAR,CAAaD,KAAb;AACD;AACF;AACF,GAPD;AAQA,SAAOM,OAAP;AACD;;AAED,OAAO,SAASC,0BAAT,CAAoCT,SAApC,EAA+CU,OAA/C,EAAwD;AAC7D,MAAMC,MAAM,GAAGf,iBAAiB,CAACI,SAAD,CAAhC;;AACA,MAAIU,OAAO,IAAIf,SAAS,CAACgB,MAAD,EAASD,OAAO,CAACE,OAAjB,CAAxB,EAAmD;AACjD,WAAOF,OAAP;AACD;;AACD,SAAO,IAAIG,iBAAJ,CAAsBb,SAAtB,EAAiCW,MAAjC,CAAP;AACD;;IAEKE,iB;;;AACJ,6BAAYb,SAAZ,EAAuBW,MAAvB,EAA+B;AAAA;;AAAA;;AAC7B,2FACE;AAAEG,MAAAA,IAAI,EAAE,WAAR;AAAqBd,MAAAA,SAAS,EAAEW;AAAhC,KADF,EAEEJ,0BAA0B,CAACP,SAAD,CAF5B;AAIA,UAAKY,OAAL,GAAeD,MAAf;AACA,UAAKI,UAAL,GAAkBf,SAAlB;AAN6B;AAO9B;;;;mCAEc;AACb,aAAO,KAAKe,UAAL,CAAgBC,GAAhB,CAAoB,UAAAhB,SAAS,EAAI;AACtC,YAAMiB,MAAM,GAAG,EAAf;;AACA,aAAK,IAAMhB,GAAX,IAAkBD,SAAlB,EAA6B;AAC3B,cAAME,KAAK,GAAGF,SAAS,CAACC,GAAD,CAAvB;;AACA,cAAIC,KAAK,YAAYR,YAArB,EAAmC;AACjCuB,YAAAA,MAAM,CAAChB,GAAD,CAAN,GAAcC,KAAK,CAACgB,UAAN,EAAd;AACD;AACF;;AACD,eAAOD,MAAP;AACD,OATM,CAAP;AAUD;;;;EArB6BvB,Y","sourcesContent":["import AnimatedNode from './AnimatedNode';\n\nimport deepEqual from 'fbjs/lib/areEqual';\n\nfunction sanitizeTransform(inputTransform) {\n  const outputTransform = [];\n  inputTransform.forEach(transform => {\n    for (const key in transform) {\n      const value = transform[key];\n      if (value instanceof AnimatedNode) {\n        outputTransform.push({\n          property: key,\n          nodeID: value.__nodeID,\n        });\n      } else {\n        outputTransform.push({\n          property: key,\n          value,\n        });\n      }\n    }\n  });\n  return outputTransform;\n}\n\nfunction extractAnimatedParentNodes(transform) {\n  const parents = [];\n  transform.forEach(transform => {\n    for (const key in transform) {\n      const value = transform[key];\n      if (value instanceof AnimatedNode) {\n        parents.push(value);\n      }\n    }\n  });\n  return parents;\n}\n\nexport function createOrReuseTransformNode(transform, oldNode) {\n  const config = sanitizeTransform(transform);\n  if (oldNode && deepEqual(config, oldNode._config)) {\n    return oldNode;\n  }\n  return new AnimatedTransform(transform, config);\n}\n\nclass AnimatedTransform extends AnimatedNode {\n  constructor(transform, config) {\n    super(\n      { type: 'transform', transform: config },\n      extractAnimatedParentNodes(transform)\n    );\n    this._config = config;\n    this._transform = transform;\n  }\n\n  __onEvaluate() {\n    return this._transform.map(transform => {\n      const result = {};\n      for (const key in transform) {\n        const value = transform[key];\n        if (value instanceof AnimatedNode) {\n          result[key] = value.__getValue();\n        }\n      }\n      return result;\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}