{"ast":null,"code":"'use strict';\n\nimport ListViewDataSource from \"../ListView/ListViewDataSource\";\n\nvar SwipeableListViewDataSource = function () {\n  function SwipeableListViewDataSource(params) {\n    var _this = this;\n\n    this._dataSource = new ListViewDataSource({\n      getRowData: params.getRowData,\n      getSectionHeaderData: params.getSectionHeaderData,\n      rowHasChanged: function rowHasChanged(row1, row2) {\n        return row1.id !== _this._previousOpenRowID && row2.id === _this._openRowID || row1.id === _this._previousOpenRowID && row2.id !== _this._openRowID || params.rowHasChanged(row1, row2);\n      },\n      sectionHeaderHasChanged: params.sectionHeaderHasChanged\n    });\n  }\n\n  var _proto = SwipeableListViewDataSource.prototype;\n\n  _proto.cloneWithRowsAndSections = function cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities) {\n    this._dataSource = this._dataSource.cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities);\n    this._dataBlob = dataBlob;\n    this.rowIdentities = this._dataSource.rowIdentities;\n    this.sectionIdentities = this._dataSource.sectionIdentities;\n    return this;\n  };\n\n  _proto.getDataSource = function getDataSource() {\n    return this._dataSource;\n  };\n\n  _proto.getOpenRowID = function getOpenRowID() {\n    return this._openRowID;\n  };\n\n  _proto.getFirstRowID = function getFirstRowID() {\n    if (this.rowIdentities) {\n      return this.rowIdentities[0] && this.rowIdentities[0][0];\n    }\n\n    return Object.keys(this._dataBlob)[0];\n  };\n\n  _proto.getLastRowID = function getLastRowID() {\n    if (this.rowIdentities && this.rowIdentities.length) {\n      var lastSection = this.rowIdentities[this.rowIdentities.length - 1];\n\n      if (lastSection && lastSection.length) {\n        return lastSection[lastSection.length - 1];\n      }\n    }\n\n    return Object.keys(this._dataBlob)[this._dataBlob.length - 1];\n  };\n\n  _proto.setOpenRowID = function setOpenRowID(rowID) {\n    this._previousOpenRowID = this._openRowID;\n    this._openRowID = rowID;\n    this._dataSource = this._dataSource.cloneWithRowsAndSections(this._dataBlob, this.sectionIdentities, this.rowIdentities);\n    return this;\n  };\n\n  return SwipeableListViewDataSource;\n}();\n\nexport default SwipeableListViewDataSource;","map":{"version":3,"sources":["C:/Users/Thivagar/Documents/GSOC Work/dengue-stop/node_modules/react-native-web/dist/vendor/react-native/SwipeableListView/SwipeableListViewDataSource.js"],"names":["ListViewDataSource","SwipeableListViewDataSource","params","_this","_dataSource","getRowData","getSectionHeaderData","rowHasChanged","row1","row2","id","_previousOpenRowID","_openRowID","sectionHeaderHasChanged","_proto","prototype","cloneWithRowsAndSections","dataBlob","sectionIdentities","rowIdentities","_dataBlob","getDataSource","getOpenRowID","getFirstRowID","Object","keys","getLastRowID","length","lastSection","setOpenRowID","rowID"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule SwipeableListViewDataSource\n */\n'use strict';\n\nimport ListViewDataSource from '../ListView/ListViewDataSource';\n/**\n * Data source wrapper around ListViewDataSource to allow for tracking of\n * which row is swiped open and close opened row(s) when another row is swiped\n * open.\n *\n * See https://github.com/facebook/react-native/pull/5602 for why\n * ListViewDataSource is not subclassed.\n */\n\nvar SwipeableListViewDataSource =\n/*#__PURE__*/\nfunction () {\n  function SwipeableListViewDataSource(params) {\n    var _this = this;\n\n    this._dataSource = new ListViewDataSource({\n      getRowData: params.getRowData,\n      getSectionHeaderData: params.getSectionHeaderData,\n      rowHasChanged: function rowHasChanged(row1, row2) {\n        /**\n         * Row needs to be re-rendered if its swiped open/close status is\n         * changed, or its data blob changed.\n         */\n        return row1.id !== _this._previousOpenRowID && row2.id === _this._openRowID || row1.id === _this._previousOpenRowID && row2.id !== _this._openRowID || params.rowHasChanged(row1, row2);\n      },\n      sectionHeaderHasChanged: params.sectionHeaderHasChanged\n    });\n  }\n\n  var _proto = SwipeableListViewDataSource.prototype;\n\n  _proto.cloneWithRowsAndSections = function cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities) {\n    this._dataSource = this._dataSource.cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities);\n    this._dataBlob = dataBlob;\n    this.rowIdentities = this._dataSource.rowIdentities;\n    this.sectionIdentities = this._dataSource.sectionIdentities;\n    return this;\n  } // For the actual ListView to use\n  ;\n\n  _proto.getDataSource = function getDataSource() {\n    return this._dataSource;\n  };\n\n  _proto.getOpenRowID = function getOpenRowID() {\n    return this._openRowID;\n  };\n\n  _proto.getFirstRowID = function getFirstRowID() {\n    /**\n     * If rowIdentities is specified, find the first data row from there since\n     * we don't want to attempt to bounce section headers. If unspecified, find\n     * the first data row from _dataBlob.\n     */\n    if (this.rowIdentities) {\n      return this.rowIdentities[0] && this.rowIdentities[0][0];\n    }\n\n    return Object.keys(this._dataBlob)[0];\n  };\n\n  _proto.getLastRowID = function getLastRowID() {\n    if (this.rowIdentities && this.rowIdentities.length) {\n      var lastSection = this.rowIdentities[this.rowIdentities.length - 1];\n\n      if (lastSection && lastSection.length) {\n        return lastSection[lastSection.length - 1];\n      }\n    }\n\n    return Object.keys(this._dataBlob)[this._dataBlob.length - 1];\n  };\n\n  _proto.setOpenRowID = function setOpenRowID(rowID) {\n    this._previousOpenRowID = this._openRowID;\n    this._openRowID = rowID;\n    this._dataSource = this._dataSource.cloneWithRowsAndSections(this._dataBlob, this.sectionIdentities, this.rowIdentities);\n    return this;\n  };\n\n  return SwipeableListViewDataSource;\n}();\n\nexport default SwipeableListViewDataSource;"]},"metadata":{},"sourceType":"module"}