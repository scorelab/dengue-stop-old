{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport DiscreteGestureHandler from \"./DiscreteGestureHandler\";\nimport * as NodeManager from \"./NodeManager\";\nimport PressGestureHandler from \"./PressGestureHandler\";\nimport { TEST_MIN_IF_NOT_NAN, VEC_LEN_SQ } from \"./utils\";\n\nvar NativeViewGestureHandler = function (_PressGestureHandler) {\n  _inherits(NativeViewGestureHandler, _PressGestureHandler);\n\n  function NativeViewGestureHandler() {\n    _classCallCheck(this, NativeViewGestureHandler);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(NativeViewGestureHandler).apply(this, arguments));\n  }\n\n  _createClass(NativeViewGestureHandler, [{\n    key: \"onRawEvent\",\n    value: function onRawEvent(ev) {\n      var _this = this;\n\n      _get(_getPrototypeOf(NativeViewGestureHandler.prototype), \"onRawEvent\", this).call(this, ev);\n\n      if (!ev.isFinal) {\n        if (TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ({\n          x: ev.deltaX,\n          y: ev.deltaY\n        }), 10)) {\n          if (this.config.disallowInterruption) {\n            var gestures = Object.values(NodeManager.getNodes()).filter(function (gesture) {\n              var handlerTag = gesture.handlerTag,\n                  view = gesture.view,\n                  isGestureRunning = gesture.isGestureRunning;\n              return handlerTag !== _this.handlerTag && isGestureRunning && gesture instanceof DiscreteGestureHandler && view && _this.view.contains(view);\n            });\n\n            for (var _iterator = gestures, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n              var _ref;\n\n              if (_isArray) {\n                if (_i >= _iterator.length) break;\n                _ref = _iterator[_i++];\n              } else {\n                _i = _iterator.next();\n                if (_i.done) break;\n                _ref = _i.value;\n              }\n\n              var _gesture = _ref;\n\n              _gesture.forceInvalidate(ev);\n            }\n          }\n        }\n      }\n    }\n  }]);\n\n  return NativeViewGestureHandler;\n}(PressGestureHandler);\n\nexport default NativeViewGestureHandler;","map":{"version":3,"sources":["C:/Users/Thivagar/Documents/GSOC Work/dengue-stop/node_modules/react-native-gesture-handler/web/NativeViewGestureHandler.js"],"names":["DiscreteGestureHandler","NodeManager","PressGestureHandler","TEST_MIN_IF_NOT_NAN","VEC_LEN_SQ","NativeViewGestureHandler","ev","isFinal","x","deltaX","y","deltaY","config","disallowInterruption","gestures","Object","values","getNodes","filter","gesture","handlerTag","view","isGestureRunning","contains","forceInvalidate"],"mappings":";;;;;;AAAA,OAAOA,sBAAP;AACA,OAAO,KAAKC,WAAZ;AACA,OAAOC,mBAAP;AACA,SAASC,mBAAT,EAA8BC,UAA9B;;IAEMC,wB;;;;;;;;;;;+BACOC,E,EAAI;AAAA;;AACb,+FAAiBA,EAAjB;;AACA,UAAI,CAACA,EAAE,CAACC,OAAR,EAAiB;AAEf,YAAIJ,mBAAmB,CAACC,UAAU,CAAC;AAAEI,UAAAA,CAAC,EAAEF,EAAE,CAACG,MAAR;AAAgBC,UAAAA,CAAC,EAAEJ,EAAE,CAACK;AAAtB,SAAD,CAAX,EAA6C,EAA7C,CAAvB,EAAyE;AACvE,cAAI,KAAKC,MAAL,CAAYC,oBAAhB,EAAsC;AACpC,gBAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAcf,WAAW,CAACgB,QAAZ,EAAd,EAAsCC,MAAtC,CAA6C,UAAAC,OAAO,EAAI;AAAA,kBAC/DC,UAD+D,GACxBD,OADwB,CAC/DC,UAD+D;AAAA,kBACnDC,IADmD,GACxBF,OADwB,CACnDE,IADmD;AAAA,kBAC7CC,gBAD6C,GACxBH,OADwB,CAC7CG,gBAD6C;AAEvE,qBAEEF,UAAU,KAAK,KAAI,CAACA,UAApB,IAEAE,gBAFA,IAIAH,OAAO,YAAYnB,sBAJnB,IAMAqB,IANA,IAOA,KAAI,CAACA,IAAL,CAAUE,QAAV,CAAmBF,IAAnB,CATF;AAWD,aAbgB,CAAjB;;AAeA,iCAAsBP,QAAtB,gKAAgC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,kBAArBK,QAAqB;;AAE9BA,cAAAA,QAAO,CAACK,eAAR,CAAwBlB,EAAxB;AACD;AACF;AACF;AACF;AACF;;;;EA7BoCJ,mB;;AAgCvC,eAAeG,wBAAf","sourcesContent":["import DiscreteGestureHandler from './DiscreteGestureHandler';\nimport * as NodeManager from './NodeManager';\nimport PressGestureHandler from './PressGestureHandler';\nimport { TEST_MIN_IF_NOT_NAN, VEC_LEN_SQ } from './utils';\n\nclass NativeViewGestureHandler extends PressGestureHandler {\n  onRawEvent(ev) {\n    super.onRawEvent(ev);\n    if (!ev.isFinal) {\n      // if (this.ref instanceof ScrollView) {\n      if (TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ({ x: ev.deltaX, y: ev.deltaY }), 10)) {\n        if (this.config.disallowInterruption) {\n          const gestures = Object.values(NodeManager.getNodes()).filter(gesture => {\n            const { handlerTag, view, isGestureRunning } = gesture;\n            return (\n              // Check if this gesture isn't self\n              handlerTag !== this.handlerTag &&\n              // Ensure the gesture needs to be cancelled\n              isGestureRunning &&\n              // ScrollView can cancel discrete gestures like taps and presses\n              gesture instanceof DiscreteGestureHandler &&\n              // Ensure a view exists and is a child of the current view\n              view &&\n              this.view.contains(view)\n            );\n          });\n          // Cancel all of the gestures that passed the filter\n          for (const gesture of gestures) {\n            // TODO: Bacon: Send some cached event.\n            gesture.forceInvalidate(ev);\n          }\n        }\n      }\n    }\n  }\n}\n\nexport default NativeViewGestureHandler;\n"]},"metadata":{},"sourceType":"module"}