{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/satya/Workspace/Callstack/react-navigation-stack/src/views/Transitioner.tsx\";\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport NavigationScenesReducer from \"./ScenesReducer\";\nvar DefaultTransitionSpec = {\n  duration: 250,\n  easing: Easing.inOut(Easing.ease),\n  timing: Animated.timing\n};\n\nvar Transitioner = function (_React$Component) {\n  _inherits(Transitioner, _React$Component);\n\n  function Transitioner(_props) {\n    var _this;\n\n    _classCallCheck(this, Transitioner);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Transitioner).call(this, _props));\n\n    _this.computeScenes = function (props, nextProps) {\n      var nextScenes = NavigationScenesReducer(_this.state.scenes, nextProps.navigation.state, props.navigation.state, nextProps.descriptors);\n\n      if (!nextProps.navigation.state.isTransitioning) {\n        nextScenes = filterStale(nextScenes);\n      }\n\n      if (nextProps.screenProps !== _this.props.screenProps) {\n        _this.setState({\n          nextScenes: nextScenes\n        });\n      }\n\n      if (nextScenes === _this.state.scenes) {\n        return;\n      }\n\n      return nextScenes;\n    };\n\n    _this.handleLayout = function (event) {\n      var _event$nativeEvent$la = event.nativeEvent.layout,\n          height = _event$nativeEvent$la.height,\n          width = _event$nativeEvent$la.width;\n\n      if (_this.state.layout.initWidth === width && _this.state.layout.initHeight === height) {\n        return;\n      }\n\n      var layout = _objectSpread({}, _this.state.layout, {\n        initHeight: height,\n        initWidth: width,\n        isMeasured: true\n      });\n\n      layout.height.setValue(height);\n      layout.width.setValue(width);\n\n      var nextState = _objectSpread({}, _this.state, {\n        layout: layout\n      });\n\n      _this.transitionProps = buildTransitionProps(_this.props, nextState);\n\n      _this.setState(nextState);\n    };\n\n    _this.handleTransitionEnd = function () {\n      if (!_this.isComponentMounted) {\n        return;\n      }\n\n      var prevTransitionProps = _this.prevTransitionProps;\n      _this.prevTransitionProps = undefined;\n      var scenes = filterStale(_this.state.scenes);\n\n      var nextState = _objectSpread({}, _this.state, {\n        scenes: scenes\n      });\n\n      _this.transitionProps = buildTransitionProps(_this.props, nextState);\n\n      _this.setState(nextState, function _callee() {\n        var result, prevProps;\n        return _regeneratorRuntime.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!_this.props.onTransitionEnd) {\n                  _context.next = 5;\n                  break;\n                }\n\n                result = _this.props.onTransitionEnd(_this.transitionProps, prevTransitionProps);\n\n                if (!(result instanceof Promise)) {\n                  _context.next = 5;\n                  break;\n                }\n\n                _context.next = 5;\n                return _regeneratorRuntime.awrap(result);\n\n              case 5:\n                if (_this.queuedTransition) {\n                  prevProps = _this.queuedTransition.prevProps;\n                  _this.queuedTransition = null;\n\n                  _this.startTransition(prevProps, _this.props);\n                } else {\n                  _this.isTransitionRunning = false;\n                }\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        });\n      });\n    };\n\n    var _layout = {\n      height: new Animated.Value(0),\n      initHeight: 0,\n      initWidth: 0,\n      isMeasured: false,\n      width: new Animated.Value(0)\n    };\n    var position = new Animated.Value(_this.props.navigation.state.index);\n    _this.positionListener = position.addListener(function () {});\n    _this.state = {\n      layout: _layout,\n      position: position,\n      scenes: NavigationScenesReducer([], _this.props.navigation.state, null, _this.props.descriptors)\n    };\n    _this.prevTransitionProps = undefined;\n    _this.transitionProps = buildTransitionProps(_props, _this.state);\n    _this.isComponentMounted = false;\n    _this.isTransitionRunning = false;\n    _this.queuedTransition = null;\n    return _this;\n  }\n\n  _createClass(Transitioner, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.isComponentMounted = true;\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isComponentMounted = false;\n      this.positionListener && this.state.position.removeListener(this.positionListener);\n    }\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      if (this.isTransitionRunning) {\n        if (!this.queuedTransition) {\n          this.queuedTransition = {\n            prevProps: this.props\n          };\n        }\n\n        return;\n      }\n\n      this.startTransition(this.props, nextProps);\n    }\n  }, {\n    key: \"startTransition\",\n    value: function startTransition(props, nextProps) {\n      var _this2 = this;\n\n      var indexHasChanged = props.navigation.state.index !== nextProps.navigation.state.index;\n      var nextScenes = this.computeScenes(props, nextProps);\n\n      if (!nextScenes) {\n        this.prevTransitionProps = this.transitionProps;\n        this.state.position.setValue(props.navigation.state.index);\n        this.handleTransitionEnd();\n        return;\n      }\n\n      var nextState = _objectSpread({}, this.state, {\n        scenes: nextScenes\n      });\n\n      var position = nextState.position;\n      var toValue = nextProps.navigation.state.index;\n      this.prevTransitionProps = this.transitionProps;\n      this.transitionProps = buildTransitionProps(nextProps, nextState);\n      var isTransitioning = this.transitionProps.navigation.state.isTransitioning;\n\n      if (!isTransitioning || !indexHasChanged) {\n        this.setState(nextState, function _callee2() {\n          var result;\n          return _regeneratorRuntime.async(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  if (!nextProps.onTransitionStart) {\n                    _context2.next = 5;\n                    break;\n                  }\n\n                  result = nextProps.onTransitionStart(_this2.transitionProps, _this2.prevTransitionProps);\n\n                  if (!(result instanceof Promise)) {\n                    _context2.next = 5;\n                    break;\n                  }\n\n                  _context2.next = 5;\n                  return _regeneratorRuntime.awrap(result);\n\n                case 5:\n                  indexHasChanged && position.setValue(toValue);\n\n                  _this2.handleTransitionEnd();\n\n                case 7:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          });\n        });\n      } else if (isTransitioning) {\n        this.isTransitionRunning = true;\n        this.setState(nextState, function _callee3() {\n          var result, transitionUserSpec, transitionSpec, timing, positionHasChanged;\n          return _regeneratorRuntime.async(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  if (!nextProps.onTransitionStart) {\n                    _context3.next = 5;\n                    break;\n                  }\n\n                  result = nextProps.onTransitionStart(_this2.transitionProps, _this2.prevTransitionProps);\n\n                  if (!(result instanceof Promise)) {\n                    _context3.next = 5;\n                    break;\n                  }\n\n                  _context3.next = 5;\n                  return _regeneratorRuntime.awrap(result);\n\n                case 5:\n                  transitionUserSpec = nextProps.configureTransition ? nextProps.configureTransition(_this2.transitionProps, _this2.prevTransitionProps) : null;\n                  transitionSpec = _objectSpread({}, DefaultTransitionSpec, transitionUserSpec);\n                  timing = transitionSpec.timing;\n                  delete transitionSpec.timing;\n                  positionHasChanged = position.__getValue() !== toValue;\n\n                  if (indexHasChanged && positionHasChanged) {\n                    timing(position, _objectSpread({}, transitionSpec, {\n                      toValue: nextProps.navigation.state.index\n                    })).start(function () {\n                      requestAnimationFrame(_this2.handleTransitionEnd);\n                    });\n                  } else {\n                    _this2.handleTransitionEnd();\n                  }\n\n                case 11:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          });\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        onLayout: this.handleLayout,\n        style: styles.main,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267\n        }\n      }, this.props.render(this.transitionProps, this.prevTransitionProps));\n    }\n  }]);\n\n  return Transitioner;\n}(React.Component);\n\nfunction buildTransitionProps(props, state) {\n  var navigation = props.navigation;\n  var layout = state.layout,\n      position = state.position,\n      scenes = state.scenes;\n  var scene = scenes.find(isSceneActive);\n\n  if (!scene) {\n    throw new Error('Could not find active scene');\n  }\n\n  return {\n    layout: layout,\n    navigation: navigation,\n    position: position,\n    scenes: scenes,\n    scene: scene,\n    index: scene.index\n  };\n}\n\nfunction isSceneNotStale(scene) {\n  return !scene.isStale;\n}\n\nfunction filterStale(scenes) {\n  var filtered = scenes.filter(isSceneNotStale);\n\n  if (filtered.length === scenes.length) {\n    return scenes;\n  }\n\n  return filtered;\n}\n\nfunction isSceneActive(scene) {\n  return scene.isActive;\n}\n\nvar styles = StyleSheet.create({\n  main: {\n    flex: 1\n  }\n});\nexport default Transitioner;","map":{"version":3,"sources":["Transitioner.tsx"],"names":["DefaultTransitionSpec","duration","easing","Easing","timing","Animated","Transitioner","React","Component","layout","height","initHeight","initWidth","isMeasured","width","position","scenes","NavigationScenesReducer","buildTransitionProps","nextProps","prevProps","nextScenes","props","filterStale","indexHasChanged","nextState","toValue","isTransitioning","result","transitionUserSpec","transitionSpec","positionHasChanged","requestAnimationFrame","styles","event","prevTransitionProps","navigation","state","scene","index","filtered","StyleSheet","main","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  Easing,\n  StyleSheet,\n  View,\n  LayoutChangeEvent,\n} from 'react-native';\n\nimport NavigationScenesReducer from './ScenesReducer';\nimport {\n  NavigationStackProp,\n  Scene,\n  SceneDescriptorMap,\n  TransitionerLayout,\n  TransitionProps,\n} from '../types';\n\ntype TransitionSpec = {};\n\ntype Props = {\n  render: (\n    current: TransitionProps,\n    previous?: TransitionProps\n  ) => React.ReactNode;\n  configureTransition?: (\n    current: TransitionProps,\n    previous?: TransitionProps\n  ) => TransitionSpec;\n  onTransitionStart?: (\n    current: TransitionProps,\n    previous?: TransitionProps\n  ) => void | Promise<any>;\n  onTransitionEnd?: (\n    current: TransitionProps,\n    previous?: TransitionProps\n  ) => void | Promise<any>;\n  navigation: NavigationStackProp;\n  descriptors: SceneDescriptorMap;\n  screenProps?: unknown;\n};\n\ntype State = {\n  layout: TransitionerLayout;\n  position: Animated.Value;\n  scenes: Scene[];\n  nextScenes?: Scene[];\n};\n\n// Used for all animations unless overriden\nconst DefaultTransitionSpec = {\n  duration: 250,\n  easing: Easing.inOut(Easing.ease),\n  timing: Animated.timing,\n};\n\nclass Transitioner extends React.Component<Props, State> {\n  private positionListener: string;\n\n  private prevTransitionProps: TransitionProps | undefined;\n  private transitionProps: TransitionProps;\n\n  private isComponentMounted: boolean;\n  private isTransitionRunning: boolean;\n  private queuedTransition: { prevProps: Props } | null;\n\n  constructor(props: Props) {\n    super(props);\n\n    // The initial layout isn't measured. Measured layout will be only available\n    // when the component is mounted.\n    const layout: TransitionerLayout = {\n      height: new Animated.Value(0),\n      initHeight: 0,\n      initWidth: 0,\n      isMeasured: false,\n      width: new Animated.Value(0),\n    };\n\n    const position = new Animated.Value(this.props.navigation.state.index);\n    this.positionListener = position.addListener((/* { value } */) => {\n      // This should work until we detach position from a view! so we have to be\n      // careful to not ever detach it, thus the gymnastics in _getPosition in\n      // StackViewLayout\n      // This should log each frame when releasing the gesture or when pressing\n      // the back button! If not, something has gone wrong with the animated\n      // value subscription\n      // console.log(value);\n    });\n\n    this.state = {\n      layout,\n      position,\n      scenes: NavigationScenesReducer(\n        [],\n        this.props.navigation.state,\n        null,\n        this.props.descriptors\n      ),\n    };\n\n    this.prevTransitionProps = undefined;\n    this.transitionProps = buildTransitionProps(props, this.state);\n\n    this.isComponentMounted = false;\n    this.isTransitionRunning = false;\n    this.queuedTransition = null;\n  }\n\n  componentDidMount() {\n    this.isComponentMounted = true;\n  }\n\n  componentWillUnmount() {\n    this.isComponentMounted = false;\n    this.positionListener &&\n      this.state.position.removeListener(this.positionListener);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (this.isTransitionRunning) {\n      if (!this.queuedTransition) {\n        this.queuedTransition = { prevProps: this.props };\n      }\n      return;\n    }\n\n    this.startTransition(this.props, nextProps);\n  }\n\n  private computeScenes = (props: Props, nextProps: Props) => {\n    let nextScenes = NavigationScenesReducer(\n      this.state.scenes,\n      nextProps.navigation.state,\n      props.navigation.state,\n      nextProps.descriptors\n    );\n\n    if (!nextProps.navigation.state.isTransitioning) {\n      nextScenes = filterStale(nextScenes);\n    }\n\n    // Update nextScenes when we change screenProps\n    // This is a workaround for https://github.com/react-navigation/react-navigation/issues/4271\n    if (nextProps.screenProps !== this.props.screenProps) {\n      this.setState({ nextScenes });\n    }\n\n    if (nextScenes === this.state.scenes) {\n      return;\n    }\n\n    return nextScenes;\n  };\n\n  private startTransition(props: Props, nextProps: Props) {\n    const indexHasChanged =\n      props.navigation.state.index !== nextProps.navigation.state.index;\n    let nextScenes = this.computeScenes(props, nextProps);\n\n    if (!nextScenes) {\n      // prevTransitionProps are the same as transitionProps in this case\n      // because nothing changed\n      this.prevTransitionProps = this.transitionProps;\n\n      // Unsure if this is actually a good idea... Also related to\n      // https://github.com/react-navigation/react-navigation/issues/5247\n      // - the animation is interrupted before completion so this ensures\n      // that it is properly set to the final position before firing\n      // onTransitionEnd\n      this.state.position.setValue(props.navigation.state.index);\n\n      this.handleTransitionEnd();\n      return;\n    }\n\n    const nextState = {\n      ...this.state,\n      scenes: nextScenes,\n    };\n\n    // grab the position animated value\n    const { position } = nextState;\n\n    // determine where we are meant to transition to\n    const toValue = nextProps.navigation.state.index;\n\n    // compute transitionProps\n    this.prevTransitionProps = this.transitionProps;\n    this.transitionProps = buildTransitionProps(nextProps, nextState);\n    let { isTransitioning } = this.transitionProps.navigation.state;\n\n    // if the state isn't transitioning that is meant to signal that we should\n    // transition immediately to the new index. if the index hasn't changed, do\n    // the same thing here. it's not clear to me why we ever start a transition\n    // when the index hasn't changed, this requires further investigation.\n    if (!isTransitioning || !indexHasChanged) {\n      this.setState(nextState, async () => {\n        if (nextProps.onTransitionStart) {\n          const result = nextProps.onTransitionStart(\n            this.transitionProps,\n            this.prevTransitionProps\n          );\n          if (result instanceof Promise) {\n            // why do we bother awaiting the result here?\n            await result;\n          }\n        }\n        // jump immediately to the new value\n        indexHasChanged && position.setValue(toValue);\n        // end the transition\n        this.handleTransitionEnd();\n      });\n    } else if (isTransitioning) {\n      this.isTransitionRunning = true;\n      this.setState(nextState, async () => {\n        if (nextProps.onTransitionStart) {\n          const result = nextProps.onTransitionStart(\n            this.transitionProps,\n            this.prevTransitionProps\n          );\n\n          // Wait for the onTransitionStart to resolve if needed.\n          if (result instanceof Promise) {\n            await result;\n          }\n        }\n\n        // get the transition spec.\n        const transitionUserSpec = nextProps.configureTransition\n          ? nextProps.configureTransition(\n              this.transitionProps,\n              this.prevTransitionProps\n            )\n          : null;\n\n        const transitionSpec = {\n          ...DefaultTransitionSpec,\n          ...transitionUserSpec,\n        };\n\n        const { timing } = transitionSpec;\n        delete transitionSpec.timing;\n\n        // if swiped back, indexHasChanged == true && positionHasChanged == false\n        // @ts-ignore\n        const positionHasChanged = position.__getValue() !== toValue;\n        if (indexHasChanged && positionHasChanged) {\n          timing(position, {\n            ...transitionSpec,\n            toValue: nextProps.navigation.state.index,\n          }).start(() => {\n            // In case the animation is immediately interrupted for some reason,\n            // we move this to the next frame so that onTransitionStart can fire\n            // first (https://github.com/react-navigation/react-navigation/issues/5247)\n            requestAnimationFrame(this.handleTransitionEnd);\n          });\n        } else {\n          this.handleTransitionEnd();\n        }\n      });\n    }\n  }\n\n  render() {\n    return (\n      <View onLayout={this.handleLayout} style={styles.main}>\n        {this.props.render(this.transitionProps, this.prevTransitionProps)}\n      </View>\n    );\n  }\n\n  private handleLayout = (event: LayoutChangeEvent) => {\n    const { height, width } = event.nativeEvent.layout;\n    if (\n      this.state.layout.initWidth === width &&\n      this.state.layout.initHeight === height\n    ) {\n      return;\n    }\n    const layout: TransitionerLayout = {\n      ...this.state.layout,\n      initHeight: height,\n      initWidth: width,\n      isMeasured: true,\n    };\n\n    layout.height.setValue(height);\n    layout.width.setValue(width);\n\n    const nextState = {\n      ...this.state,\n      layout,\n    };\n\n    this.transitionProps = buildTransitionProps(this.props, nextState);\n    this.setState(nextState);\n  };\n\n  private handleTransitionEnd = () => {\n    if (!this.isComponentMounted) {\n      return;\n    }\n    const prevTransitionProps = this.prevTransitionProps;\n    this.prevTransitionProps = undefined;\n\n    const scenes = filterStale(this.state.scenes);\n\n    const nextState = {\n      ...this.state,\n      scenes,\n    };\n\n    this.transitionProps = buildTransitionProps(this.props, nextState);\n\n    this.setState(nextState, async () => {\n      if (this.props.onTransitionEnd) {\n        const result = this.props.onTransitionEnd(\n          this.transitionProps,\n          prevTransitionProps\n        );\n\n        if (result instanceof Promise) {\n          await result;\n        }\n      }\n\n      if (this.queuedTransition) {\n        let { prevProps } = this.queuedTransition;\n        this.queuedTransition = null;\n        this.startTransition(prevProps, this.props);\n      } else {\n        this.isTransitionRunning = false;\n      }\n    });\n  };\n}\n\nfunction buildTransitionProps(props: Props, state: State): TransitionProps {\n  const { navigation } = props;\n\n  const { layout, position, scenes } = state;\n\n  const scene = scenes.find(isSceneActive);\n\n  if (!scene) {\n    throw new Error('Could not find active scene');\n  }\n\n  return {\n    layout,\n    navigation,\n    position,\n    scenes,\n    scene,\n    index: scene.index,\n  };\n}\n\nfunction isSceneNotStale(scene: Scene) {\n  return !scene.isStale;\n}\n\nfunction filterStale(scenes: Scene[]) {\n  const filtered = scenes.filter(isSceneNotStale);\n  if (filtered.length === scenes.length) {\n    return scenes;\n  }\n  return filtered;\n}\n\nfunction isSceneActive(scene: Scene) {\n  return scene.isActive;\n}\n\nconst styles = StyleSheet.create({\n  main: {\n    flex: 1,\n  },\n});\n\nexport default Transitioner;\n"]},"metadata":{},"sourceType":"module"}