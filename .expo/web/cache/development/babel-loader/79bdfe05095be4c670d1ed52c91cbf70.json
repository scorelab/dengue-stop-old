{"ast":null,"code":"function getSceneIndicesForInterpolationInputRange(props) {\n  var scene = props.scene,\n      scenes = props.scenes;\n  var index = scene.index;\n  var lastSceneIndexInScenes = scenes.length - 1;\n  var isBack = !scenes[lastSceneIndexInScenes].isActive;\n\n  if (isBack) {\n    var currentSceneIndexInScenes = scenes.findIndex(function (item) {\n      return item === scene;\n    });\n    var targetSceneIndexInScenes = scenes.findIndex(function (item) {\n      return item.isActive;\n    });\n    var targetSceneIndex = scenes[targetSceneIndexInScenes].index;\n    var lastSceneIndex = scenes[lastSceneIndexInScenes].index;\n\n    if (index !== targetSceneIndex && currentSceneIndexInScenes === lastSceneIndexInScenes) {\n      return {\n        first: Math.min(targetSceneIndex, index - 1),\n        last: index + 1\n      };\n    } else if (index === targetSceneIndex && currentSceneIndexInScenes === targetSceneIndexInScenes) {\n      return {\n        first: index - 1,\n        last: Math.max(lastSceneIndex, index + 1)\n      };\n    } else if (index === targetSceneIndex || currentSceneIndexInScenes > targetSceneIndexInScenes) {\n      return null;\n    } else {\n      return {\n        first: index - 1,\n        last: index + 1\n      };\n    }\n  } else {\n    return {\n      first: index - 1,\n      last: index + 1\n    };\n  }\n}\n\nexport default getSceneIndicesForInterpolationInputRange;","map":{"version":3,"sources":["getSceneIndicesForInterpolationInputRange.tsx"],"names":["scene","scenes","props","index","lastSceneIndexInScenes","isBack","currentSceneIndexInScenes","item","targetSceneIndexInScenes","targetSceneIndex","lastSceneIndex","first","Math","last"],"mappings":"AAOA,SAAA,yCAAA,CAAA,KAAA,EAAiE;AAAA,MACvDA,KADuD,GACrCE,KADqC,CAAA,KAAA;AAAA,MAChDD,MADgD,GACrCC,KADqC,CAAA,MAAA;AAE/D,MAAMC,KAAK,GAAGH,KAAK,CAAnB,KAAA;AACA,MAAMI,sBAAsB,GAAGH,MAAM,CAANA,MAAAA,GAA/B,CAAA;AACA,MAAMI,MAAM,GAAG,CAACJ,MAAM,CAANA,sBAAM,CAANA,CAAhB,QAAA;;AAEA,MAAA,MAAA,EAAY;AACV,QAAMK,yBAAyB,GAAGL,MAAM,CAANA,SAAAA,CAAiB,UAAA,IAAA,EAAI;AAAA,aAAIM,IAAI,KAAR,KAAA;AAAvD,KAAkCN,CAAlC;AACA,QAAMO,wBAAwB,GAAGP,MAAM,CAANA,SAAAA,CAAiB,UAAA,IAAA,EAAI;AAAA,aAAIM,IAAI,CAAR,QAAA;AAAtD,KAAiCN,CAAjC;AACA,QAAMQ,gBAAgB,GAAGR,MAAM,CAANA,wBAAM,CAANA,CAAzB,KAAA;AACA,QAAMS,cAAc,GAAGT,MAAM,CAANA,sBAAM,CAANA,CAAvB,KAAA;;AAEA,QACEE,KAAK,KAALA,gBAAAA,IACAG,yBAAyB,KAF3B,sBAAA,EAGE;AACA,aAAO;AACLK,QAAAA,KAAK,EAAEC,IAAI,CAAJA,GAAAA,CAAAA,gBAAAA,EAA2BT,KAAK,GADlC,CACES,CADF;AAELC,QAAAA,IAAI,EAAEV,KAAK,GAFb;AAAO,OAAP;AAJF,KAAA,MAQO,IACLA,KAAK,KAALA,gBAAAA,IACAG,yBAAyB,KAFpB,wBAAA,EAGL;AACA,aAAO;AACLK,QAAAA,KAAK,EAAER,KAAK,GADP,CAAA;AAELU,QAAAA,IAAI,EAAED,IAAI,CAAJA,GAAAA,CAAAA,cAAAA,EAAyBT,KAAK,GAFtC,CAEQS;AAFD,OAAP;AAJK,KAAA,MAQA,IACLT,KAAK,KAALA,gBAAAA,IACAG,yBAAyB,GAFpB,wBAAA,EAGL;AACA,aAAA,IAAA;AAJK,KAAA,MAKA;AACL,aAAO;AAAEK,QAAAA,KAAK,EAAER,KAAK,GAAd,CAAA;AAAoBU,QAAAA,IAAI,EAAEV,KAAK,GAAtC;AAAO,OAAP;AAEH;AA9BD,GAAA,MA8BO;AACL,WAAO;AAAEQ,MAAAA,KAAK,EAAER,KAAK,GAAd,CAAA;AAAoBU,MAAAA,IAAI,EAAEV,KAAK,GAAtC;AAAO,KAAP;AAEH;AAED;;AAAA,eAAA,yCAAA","sourcesContent":["import { Scene } from '../types';\n\ntype Props = {\n  scene: Scene;\n  scenes: Scene[];\n};\n\nfunction getSceneIndicesForInterpolationInputRange(props: Props) {\n  const { scene, scenes } = props;\n  const index = scene.index;\n  const lastSceneIndexInScenes = scenes.length - 1;\n  const isBack = !scenes[lastSceneIndexInScenes].isActive;\n\n  if (isBack) {\n    const currentSceneIndexInScenes = scenes.findIndex(item => item === scene);\n    const targetSceneIndexInScenes = scenes.findIndex(item => item.isActive);\n    const targetSceneIndex = scenes[targetSceneIndexInScenes].index;\n    const lastSceneIndex = scenes[lastSceneIndexInScenes].index;\n\n    if (\n      index !== targetSceneIndex &&\n      currentSceneIndexInScenes === lastSceneIndexInScenes\n    ) {\n      return {\n        first: Math.min(targetSceneIndex, index - 1),\n        last: index + 1,\n      };\n    } else if (\n      index === targetSceneIndex &&\n      currentSceneIndexInScenes === targetSceneIndexInScenes\n    ) {\n      return {\n        first: index - 1,\n        last: Math.max(lastSceneIndex, index + 1),\n      };\n    } else if (\n      index === targetSceneIndex ||\n      currentSceneIndexInScenes > targetSceneIndexInScenes\n    ) {\n      return null;\n    } else {\n      return { first: index - 1, last: index + 1 };\n    }\n  } else {\n    return { first: index - 1, last: index + 1 };\n  }\n}\n\nexport default getSceneIndicesForInterpolationInputRange;\n"]},"metadata":{},"sourceType":"module"}