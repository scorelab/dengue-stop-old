{"ast":null,"code":"import createDOMProps from \"../createDOMProps\";\nimport findNodeHandle from \"../../exports/findNodeHandle\";\nimport styleResolver from \"../../exports/StyleSheet/styleResolver\";\nimport UIManager from \"../../exports/UIManager\";\nvar NativeMethodsMixin = {\n  blur: function blur() {\n    UIManager.blur(findNodeHandle(this));\n  },\n  focus: function focus() {\n    UIManager.focus(findNodeHandle(this));\n  },\n  measure: function measure(callback) {\n    UIManager.measure(findNodeHandle(this), callback);\n  },\n  measureInWindow: function measureInWindow(callback) {\n    UIManager.measureInWindow(findNodeHandle(this), callback);\n  },\n  measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail) {\n    UIManager.measureLayout(findNodeHandle(this), relativeToNativeNode, onFail, onSuccess);\n  },\n  setNativeProps: function setNativeProps(nativeProps) {\n    if (!nativeProps) {\n      return;\n    }\n\n    var node = findNodeHandle(this);\n\n    if (node) {\n      var domProps = createDOMProps(null, nativeProps, function (style) {\n        return styleResolver.resolveWithNode(style, node);\n      });\n      UIManager.updateView(node, domProps, this);\n    }\n  }\n};\nexport default NativeMethodsMixin;","map":{"version":3,"sources":["C:/Users/Thivagar/Documents/GSOC Work/dengue-stop/node_modules/react-native-web/dist/modules/NativeMethodsMixin/index.js"],"names":["createDOMProps","findNodeHandle","styleResolver","UIManager","NativeMethodsMixin","blur","focus","measure","callback","measureInWindow","measureLayout","relativeToNativeNode","onSuccess","onFail","setNativeProps","nativeProps","node","domProps","style","resolveWithNode","updateView"],"mappings":"AASA,OAAOA,cAAP;AACA,OAAOC,cAAP;AACA,OAAOC,aAAP;AACA,OAAOC,SAAP;AACA,IAAIC,kBAAkB,GAAG;AAIvBC,EAAAA,IAAI,EAAE,SAASA,IAAT,GAAgB;AACpBF,IAAAA,SAAS,CAACE,IAAV,CAAeJ,cAAc,CAAC,IAAD,CAA7B;AACD,GANsB;AAYvBK,EAAAA,KAAK,EAAE,SAASA,KAAT,GAAiB;AACtBH,IAAAA,SAAS,CAACG,KAAV,CAAgBL,cAAc,CAAC,IAAD,CAA9B;AACD,GAdsB;AAmBvBM,EAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBC,QAAjB,EAA2B;AAClCL,IAAAA,SAAS,CAACI,OAAV,CAAkBN,cAAc,CAAC,IAAD,CAAhC,EAAwCO,QAAxC;AACD,GArBsB;AAsCvBC,EAAAA,eAAe,EAAE,SAASA,eAAT,CAAyBD,QAAzB,EAAmC;AAClDL,IAAAA,SAAS,CAACM,eAAV,CAA0BR,cAAc,CAAC,IAAD,CAAxC,EAAgDO,QAAhD;AACD,GAxCsB;AA6CvBE,EAAAA,aAAa,EAAE,SAASA,aAAT,CAAuBC,oBAAvB,EAA6CC,SAA7C,EAAwDC,MAAxD,EAAgE;AAC7EV,IAAAA,SAAS,CAACO,aAAV,CAAwBT,cAAc,CAAC,IAAD,CAAtC,EAA8CU,oBAA9C,EAAoEE,MAApE,EAA4ED,SAA5E;AACD,GA/CsB;AAuDvBE,EAAAA,cAAc,EAAE,SAASA,cAAT,CAAwBC,WAAxB,EAAqC;AACnD,QAAI,CAACA,WAAL,EAAkB;AAChB;AACD;;AAED,QAAIC,IAAI,GAAGf,cAAc,CAAC,IAAD,CAAzB;;AAEA,QAAIe,IAAJ,EAAU;AAGR,UAAIC,QAAQ,GAAGjB,cAAc,CAAC,IAAD,EAAOe,WAAP,EAAoB,UAAUG,KAAV,EAAiB;AAChE,eAAOhB,aAAa,CAACiB,eAAd,CAA8BD,KAA9B,EAAqCF,IAArC,CAAP;AACD,OAF4B,CAA7B;AAGAb,MAAAA,SAAS,CAACiB,UAAV,CAAqBJ,IAArB,EAA2BC,QAA3B,EAAqC,IAArC;AACD;AACF;AAtEsB,CAAzB;AAwEA,eAAeb,kBAAf","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport createDOMProps from '../createDOMProps';\nimport findNodeHandle from '../../exports/findNodeHandle';\nimport styleResolver from '../../exports/StyleSheet/styleResolver';\nimport UIManager from '../../exports/UIManager';\nvar NativeMethodsMixin = {\n  /**\n   * Removes focus from an input or view. This is the opposite of `focus()`.\n   */\n  blur: function blur() {\n    UIManager.blur(findNodeHandle(this));\n  },\n\n  /**\n   * Requests focus for the given input or view.\n   * The exact behavior triggered will depend the type of view.\n   */\n  focus: function focus() {\n    UIManager.focus(findNodeHandle(this));\n  },\n\n  /**\n   * Determines the position and dimensions of the view\n   */\n  measure: function measure(callback) {\n    UIManager.measure(findNodeHandle(this), callback);\n  },\n\n  /**\n   * Determines the location of the given view in the window and returns the\n   * values via an async callback. If the React root view is embedded in\n   * another native view, this will give you the absolute coordinates. If\n   * successful, the callback will be called be called with the following\n   * arguments:\n   *\n   *  - x\n   *  - y\n   *  - width\n   *  - height\n   *\n   * Note that these measurements are not available until after the rendering\n   * has been completed.\n   */\n  measureInWindow: function measureInWindow(callback) {\n    UIManager.measureInWindow(findNodeHandle(this), callback);\n  },\n\n  /**\n   * Measures the view relative to another view (usually an ancestor)\n   */\n  measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail) {\n    UIManager.measureLayout(findNodeHandle(this), relativeToNativeNode, onFail, onSuccess);\n  },\n\n  /**\n   * This function sends props straight to the underlying DOM node.\n   * This works as if all styles were set as inline styles. Since a DOM node\n   * may aleady be styled with class names and inline styles, we need to get\n   * the initial styles from the DOM node and merge them with incoming props.\n   */\n  setNativeProps: function setNativeProps(nativeProps) {\n    if (!nativeProps) {\n      return;\n    }\n\n    var node = findNodeHandle(this);\n\n    if (node) {\n      // Next state is determined by comparison to existing state (in the DOM).\n      // Existing state has already gone through i18n transform\n      var domProps = createDOMProps(null, nativeProps, function (style) {\n        return styleResolver.resolveWithNode(style, node);\n      });\n      UIManager.updateView(node, domProps, this);\n    }\n  }\n};\nexport default NativeMethodsMixin;"]},"metadata":{},"sourceType":"module"}