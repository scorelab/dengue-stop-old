{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport AnimatedNode from \"./AnimatedNode\";\nimport { val } from \"../val\";\nimport { adapt } from \"../core/AnimatedBlock\";\nimport invariant from 'fbjs/lib/invariant';\n\nvar AnimatedSet = function (_AnimatedNode) {\n  _inherits(AnimatedSet, _AnimatedNode);\n\n  function AnimatedSet(what, value) {\n    var _this;\n\n    _classCallCheck(this, AnimatedSet);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedSet).call(this, {\n      type: 'set',\n      what: what.__nodeID,\n      value: value.__nodeID\n    }, [value]));\n    invariant(!what._constant, 'Value to be set cannot be constant');\n    _this._what = what;\n    _this._value = value;\n    return _this;\n  }\n\n  _createClass(AnimatedSet, [{\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      var newValue = val(this._value);\n\n      this._what._updateValue(newValue);\n\n      return newValue;\n    }\n  }]);\n\n  return AnimatedSet;\n}(AnimatedNode);\n\nexport function createAnimatedSet(what, value) {\n  return new AnimatedSet(what, adapt(value));\n}","map":{"version":3,"sources":["C:/Users/Thivagar/Documents/GSOC Work/dengue-stop/node_modules/react-native-reanimated/src/core/AnimatedSet.js"],"names":["AnimatedNode","val","adapt","invariant","AnimatedSet","what","value","type","__nodeID","_constant","_what","_value","newValue","_updateValue","createAnimatedSet"],"mappings":";;;;;AAAA,OAAOA,YAAP;AACA,SAASC,GAAT;AACA,SAASC,KAAT;AAEA,OAAOC,SAAP,MAAsB,oBAAtB;;IAEMC,W;;;AAIJ,uBAAYC,IAAZ,EAAkBC,KAAlB,EAAyB;AAAA;;AAAA;;AACvB,qFAAM;AAAEC,MAAAA,IAAI,EAAE,KAAR;AAAeF,MAAAA,IAAI,EAAEA,IAAI,CAACG,QAA1B;AAAoCF,MAAAA,KAAK,EAAEA,KAAK,CAACE;AAAjD,KAAN,EAAmE,CAACF,KAAD,CAAnE;AACAH,IAAAA,SAAS,CAAC,CAACE,IAAI,CAACI,SAAP,EAAkB,oCAAlB,CAAT;AACA,UAAKC,KAAL,GAAaL,IAAb;AACA,UAAKM,MAAL,GAAcL,KAAd;AAJuB;AAKxB;;;;mCAEc;AACb,UAAMM,QAAQ,GAAGX,GAAG,CAAC,KAAKU,MAAN,CAApB;;AACA,WAAKD,KAAL,CAAWG,YAAX,CAAwBD,QAAxB;;AACA,aAAOA,QAAP;AACD;;;;EAfuBZ,Y;;AAkB1B,OAAO,SAASc,iBAAT,CAA2BT,IAA3B,EAAiCC,KAAjC,EAAwC;AAC7C,SAAO,IAAIF,WAAJ,CAAgBC,IAAhB,EAAsBH,KAAK,CAACI,KAAD,CAA3B,CAAP;AACD","sourcesContent":["import AnimatedNode from './AnimatedNode';\nimport { val } from '../val';\nimport { adapt } from '../core/AnimatedBlock';\n\nimport invariant from 'fbjs/lib/invariant';\n\nclass AnimatedSet extends AnimatedNode {\n  _what;\n  _value;\n\n  constructor(what, value) {\n    super({ type: 'set', what: what.__nodeID, value: value.__nodeID }, [value]);\n    invariant(!what._constant, 'Value to be set cannot be constant');\n    this._what = what;\n    this._value = value;\n  }\n\n  __onEvaluate() {\n    const newValue = val(this._value);\n    this._what._updateValue(newValue);\n    return newValue;\n  }\n}\n\nexport function createAnimatedSet(what, value) {\n  return new AnimatedSet(what, adapt(value));\n}\n"]},"metadata":{},"sourceType":"module"}