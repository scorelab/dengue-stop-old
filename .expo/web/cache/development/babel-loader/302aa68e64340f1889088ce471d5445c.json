{"ast":null,"code":"function emptyFunction() {}\n\nvar AccessibilityInfo = {\n  fetch: function fetch() {\n    return new Promise(function (resolve, reject) {\n      resolve(true);\n    });\n  },\n  addEventListener: function addEventListener(eventName, handler) {\n    return {\n      remove: emptyFunction\n    };\n  },\n  setAccessibilityFocus: function setAccessibilityFocus(reactTag) {},\n  announceForAccessibility: function announceForAccessibility(announcement) {},\n  removeEventListener: function removeEventListener(eventName, handler) {\n    return;\n  }\n};\nexport default AccessibilityInfo;","map":{"version":3,"sources":["C:/Users/Thivagar/Documents/GSOC Work/dengue-stop/node_modules/react-native-web/dist/exports/AccessibilityInfo/index.js"],"names":["emptyFunction","AccessibilityInfo","fetch","Promise","resolve","reject","addEventListener","eventName","handler","remove","setAccessibilityFocus","reactTag","announceForAccessibility","announcement","removeEventListener"],"mappings":"AAQA,SAASA,aAAT,GAAyB,CAAE;;AAE3B,IAAIC,iBAAiB,GAAG;AAOtBC,EAAAA,KAAK,EAAE,SAASA,KAAT,GAAiB;AACtB,WAAO,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC5CD,MAAAA,OAAO,CAAC,IAAD,CAAP;AACD,KAFM,CAAP;AAGD,GAXqB;AAgBtBE,EAAAA,gBAAgB,EAAE,SAASA,gBAAT,CAA0BC,SAA1B,EAAqCC,OAArC,EAA8C;AAC9D,WAAO;AACLC,MAAAA,MAAM,EAAET;AADH,KAAP;AAGD,GApBqB;AAyBtBU,EAAAA,qBAAqB,EAAE,SAASA,qBAAT,CAA+BC,QAA/B,EAAyC,CAAE,CAzB5C;AA8BtBC,EAAAA,wBAAwB,EAAE,SAASA,wBAAT,CAAkCC,YAAlC,EAAgD,CAAE,CA9BtD;AAmCtBC,EAAAA,mBAAmB,EAAE,SAASA,mBAAT,CAA6BP,SAA7B,EAAwCC,OAAxC,EAAiD;AACpE;AACD;AArCqB,CAAxB;AAuCA,eAAeP,iBAAf","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nfunction emptyFunction() {}\n\nvar AccessibilityInfo = {\n  /**\n   * Query whether a screen reader is currently enabled.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when a screen reader is enabled and `false` otherwise.\n   */\n  fetch: function fetch() {\n    return new Promise(function (resolve, reject) {\n      resolve(true);\n    });\n  },\n\n  /**\n   * Add an event handler. Supported events:\n   */\n  addEventListener: function addEventListener(eventName, handler) {\n    return {\n      remove: emptyFunction\n    };\n  },\n\n  /**\n   * Set accessibility focus to a react component.\n   */\n  setAccessibilityFocus: function setAccessibilityFocus(reactTag) {},\n\n  /**\n   * Post a string to be announced by the screen reader.\n   */\n  announceForAccessibility: function announceForAccessibility(announcement) {},\n\n  /**\n   * Remove an event handler.\n   */\n  removeEventListener: function removeEventListener(eventName, handler) {\n    return;\n  }\n};\nexport default AccessibilityInfo;"]},"metadata":{},"sourceType":"module"}