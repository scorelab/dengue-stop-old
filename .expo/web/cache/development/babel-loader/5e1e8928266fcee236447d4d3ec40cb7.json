{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport hoistNonReactStatic from 'hoist-non-react-statics';\nexport var isOrientationLandscape = function isOrientationLandscape(_ref) {\n  var width = _ref.width,\n      height = _ref.height;\n  return width > height;\n};\nexport default function withDimensions(WrappedComponent) {\n  var EnhancedComponent = function (_React$Component) {\n    _inherits(EnhancedComponent, _React$Component);\n\n    function EnhancedComponent(props) {\n      var _this;\n\n      _classCallCheck(this, EnhancedComponent);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(EnhancedComponent).call(this, props));\n\n      _defineProperty(_assertThisInitialized(_this), \"handleOrientationChange\", function (_ref2) {\n        var window = _ref2.window;\n        var width = window.width,\n            height = window.height;\n\n        _this.setState({\n          dimensions: {\n            width: width,\n            height: height\n          },\n          isLandscape: isOrientationLandscape({\n            width: width,\n            height: height\n          })\n        });\n      });\n\n      var _Dimensions$get = Dimensions.get('window'),\n          _width = _Dimensions$get.width,\n          _height = _Dimensions$get.height;\n\n      _this.state = {\n        dimensions: {\n          width: _width,\n          height: _height\n        },\n        isLandscape: isOrientationLandscape({\n          width: _width,\n          height: _height\n        })\n      };\n      return _this;\n    }\n\n    _createClass(EnhancedComponent, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        Dimensions.addEventListener('change', this.handleOrientationChange);\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        Dimensions.removeEventListener('change', this.handleOrientationChange);\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        return React.createElement(WrappedComponent, _extends({}, this.props, this.state));\n      }\n    }]);\n\n    return EnhancedComponent;\n  }(React.Component);\n\n  _defineProperty(EnhancedComponent, \"displayName\", \"withDimensions(\".concat(WrappedComponent.displayName, \")\"));\n\n  return hoistNonReactStatic(EnhancedComponent, WrappedComponent);\n}","map":{"version":3,"sources":["withDimensions.tsx"],"names":["isOrientationLandscape","height","width","React","WrappedComponent","constructor","Dimensions","dimensions","isLandscape","window","hoistNonReactStatic"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;AAEA,OAAA,mBAAA,MAAA,yBAAA;AAYA,OAAO,IAAMA,sBAAsB,GAAG,SAAzBA,sBAAyB;AAAA,MAAC,KAAD,QAAC,KAAD;AAAA,MAAUC,MAAV,QAAUA,MAAV;AAAA,SACpCC,KAAK,GADA,MAA+B;AAAA,CAA/B;AAGP,eAAe,SAAA,cAAA,CAAA,gBAAA,EAEgE;AAAA,MAC7E,iBAD6E;AAAA;;AAI3EG,+BAAW,KAAXA,EAA0B;AAAA;;AAAA;;AACxB,6FAAA,KAAA;;AADwB,MAAA,eAAA,gCAAA,yBAAA,EAkBA,iBAAwC;AAAA,YAArCI,MAAqC,SAArCA,MAAqC;AAAA,YAC1D,KAD0D,GAChE,MADgE,CAC1D,KAD0D;AAAA,YACjDR,MADiD,GAChE,MADgE,CACjDA,MADiD;;AAEhE,cAAA,QAAA,CAAc;AACZM,UAAAA,UAAU,EAAE;AAAEL,YAAAA,KAAF,EAAEA,KAAF;AAASD,YAAAA,MAAAA,EAAAA;AAAT,WADA;AAEZO,UAAAA,WAAW,EAAER,sBAAsB,CAAC;AAAEE,YAAAA,KAAF,EAAEA,KAAF;AAASD,YAAAA,MAAAA,EAAAA;AAAT,WAAD;AAFvB,SAAd;AApBwB,OAAA,CAAA;;AAAA,4BAGEK,UAAU,CAAVA,GAAAA,CAA1B,QAA0BA,CAHF;AAAA,UAGlB,MAHkB,mBAGhBJ,KAHgB;AAAA,UAGTD,OAHS,mBAGTA,MAHS;;AAIxB,YAAA,KAAA,GAAa;AACXM,QAAAA,UAAU,EAAE;AAAEL,UAAAA,KAAK,EAAP,MAAA;AAASD,UAAAA,MAAM,EAANA;AAAT,SADD;AAEXO,QAAAA,WAAW,EAAER,sBAAsB,CAAC;AAAEE,UAAAA,KAAK,EAAP,MAAA;AAASD,UAAAA,MAAM,EAANA;AAAT,SAAD;AAFxB,OAAb;AAJwB;AAQzB;;AAZ0E;AAAA;AAAA,0CAcvD;AAClBK,QAAAA,UAAU,CAAVA,gBAAAA,CAAAA,QAAAA,EAAsC,KAAtCA,uBAAAA;AACD;AAhB0E;AAAA;AAAA,6CAkBpD;AACrBA,QAAAA,UAAU,CAAVA,mBAAAA,CAAAA,QAAAA,EAAyC,KAAzCA,uBAAAA;AACD;AApB0E;AAAA;AAAA,+BA8BlE;AAEP,eAAO,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAA,QAAA,CAAA,EAAA,EAAsB,KAAtB,KAAA,EAAsC,KAA7C,KAAO,CAAA,CAAP;AACD;AAjC0E;;AAAA;AAAA,IAC7CH,KAAK,CAArC,SAD6E;;AAAA,EAAA,eAAA,CAAA,iBAAA,EAAA,aAAA,EAAA,kBAAA,MAAA,CAEpCC,gBAAgB,CAFoB,WAAA,EAAA,GAAA,CAAA,CAAA;;AAqC7E,SAAOM,mBAAmB,CAAA,iBAAA,EAA1B,gBAA0B,CAA1B;AACD","sourcesContent":["import * as React from 'react';\nimport { Dimensions, ScaledSize } from 'react-native';\nimport hoistNonReactStatic from 'hoist-non-react-statics';\n\ntype DimensionsType = {\n  width: number;\n  height: number;\n};\n\ntype InjectedProps = {\n  dimensions: DimensionsType;\n  isLandscape: boolean;\n};\n\nexport const isOrientationLandscape = ({ width, height }: DimensionsType) =>\n  width > height;\n\nexport default function withDimensions<Props extends InjectedProps>(\n  WrappedComponent: React.ComponentType<Props>\n): React.ComponentType<Pick<Props, Exclude<keyof Props, keyof InjectedProps>>> {\n  class EnhancedComponent extends React.Component {\n    static displayName = `withDimensions(${WrappedComponent.displayName})`;\n\n    constructor(props: Props) {\n      super(props);\n\n      const { width, height } = Dimensions.get('window');\n      this.state = {\n        dimensions: { width, height },\n        isLandscape: isOrientationLandscape({ width, height }),\n      };\n    }\n\n    componentDidMount() {\n      Dimensions.addEventListener('change', this.handleOrientationChange);\n    }\n\n    componentWillUnmount() {\n      Dimensions.removeEventListener('change', this.handleOrientationChange);\n    }\n\n    handleOrientationChange = ({ window }: { window: ScaledSize }) => {\n      const { width, height } = window;\n      this.setState({\n        dimensions: { width, height },\n        isLandscape: isOrientationLandscape({ width, height }),\n      });\n    };\n\n    render() {\n      // @ts-ignore\n      return <WrappedComponent {...this.props} {...this.state} />;\n    }\n  }\n\n  // @ts-ignore\n  return hoistNonReactStatic(EnhancedComponent, WrappedComponent);\n}\n"]},"metadata":{},"sourceType":"module"}