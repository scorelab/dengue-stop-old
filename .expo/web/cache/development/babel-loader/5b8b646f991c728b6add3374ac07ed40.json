{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Screen, screensEnabled } from 'react-native-screens';\nvar FAR_FAR_AWAY = 3000;\n\nvar ResourceSavingScene = function (_React$Component) {\n  _inherits(ResourceSavingScene, _React$Component);\n\n  function ResourceSavingScene() {\n    _classCallCheck(this, ResourceSavingScene);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ResourceSavingScene).apply(this, arguments));\n  }\n\n  _createClass(ResourceSavingScene, [{\n    key: \"render\",\n    value: function render() {\n      if (screensEnabled === null || screensEnabled === void 0 ? void 0 : screensEnabled()) {\n        var _this$props = this.props,\n            _isVisible = _this$props.isVisible,\n            _rest = _objectWithoutProperties(_this$props, [\"isVisible\"]);\n\n        return React.createElement(Screen, _extends({\n          active: _isVisible ? 1 : 0\n        }, _rest));\n      }\n\n      var _this$props2 = this.props,\n          isVisible = _this$props2.isVisible,\n          children = _this$props2.children,\n          style = _this$props2.style,\n          rest = _objectWithoutProperties(_this$props2, [\"isVisible\", \"children\", \"style\"]);\n\n      return React.createElement(View, _extends({\n        style: [styles.container, style],\n        collapsable: false,\n        removeClippedSubviews: Platform.OS === 'ios' ? !isVisible : true,\n        pointerEvents: isVisible ? 'auto' : 'none'\n      }, rest), React.createElement(View, {\n        style: isVisible ? styles.attached : styles.detached\n      }, children));\n    }\n  }]);\n\n  return ResourceSavingScene;\n}(React.Component);\n\nexport { ResourceSavingScene as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  attached: {\n    flex: 1\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY\n  }\n});","map":{"version":3,"sources":["ResourceSavingScene.tsx"],"names":["FAR_FAR_AWAY","React","screensEnabled","isVisible","style","styles","Platform","detached","container","flex","overflow","attached","top"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,OAAO,KAAP,KAAA,MAAA,OAAA;;;;AAEA,SAAA,MAAA,EAAA,cAAA,QAAA,sBAAA;AAQA,IAAMA,YAAY,GAAlB,IAAA;;IAEe,mB;;;;;;;;;;;6BACJ;AACP,UAAIE,cAAJ,KAAA,IAAIA,IAAAA,cAAJ,KAAA,KAAA,CAAIA,GAAJ,KAAA,CAAIA,GAAAA,cAAJ,EAAA,EAAwB;AACtB,YAAA,WAAA,GAA+B,KAA/B,KAAA;AAAA,YAAQC,UAAR,GAAA,WAAA,CAAQA,SAAR;AAAA,YAAA,KAAA,GAAA,wBAAA,CAAA,WAAA,EAAA,CADsB,WACtB,CAAA,CAAA;;AAGA,eAAO,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,QAAA,CAAA;AAAQ,UAAA,MAAM,EAAEA,UAAS,GAAA,CAAA,GAAO;AAAhC,SAAA,EAAP,KAAO,CAAA,CAAP;AACD;;AACD,UAAA,YAAA,GAAgD,KAAhD,KAAA;AAAA,UAAM,SAAN,GAAA,YAAA,CAAM,SAAN;AAAA,UAAM,QAAN,GAAA,YAAA,CAAM,QAAN;AAAA,UAA6BC,KAA7B,GAAA,YAAA,CAA6BA,KAA7B;AAAA,UAAA,IAAA,GAAA,wBAAA,CAAA,YAAA,EAAA,CAAA,WAAA,EAAA,UAAA,EAAA,OAAA,CAAA,CAAA;;AAEA,aACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AACE,QAAA,KAAK,EAAE,CAACC,MAAM,CAAP,SAAA,EADT,KACS,CADT;AAEE,QAAA,WAAW,EAFb,KAAA;AAGE,QAAA,qBAAqB,EAGnBC,QAAQ,CAARA,EAAAA,KAAAA,KAAAA,GAAwB,CAAxBA,SAAAA,GANJ,IAAA;AAQE,QAAA,aAAa,EAAEH,SAAS,GAAA,MAAA,GAAY;AARtC,OAAA,EAAA,IAAA,CAAA,EAWE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,QAAA,KAAK,EAAEA,SAAS,GAAGE,MAAM,CAAT,QAAA,GAAqBA,MAAM,CAACE;AAAlD,OAAA,EAZJ,QAYI,CAXF,CADF;AAiBD;;;;EA3B8CN,KAAK,CAAvC,S;;SAAA,mB;AA8Bf,IAAMI,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BG,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EADK,CAAA;AAETC,IAAAA,QAAQ,EAAE;AAFD,GADoB;AAK/BC,EAAAA,QAAQ,EAAE;AACRF,IAAAA,IAAI,EAAE;AADE,GALqB;AAQ/BF,EAAAA,QAAQ,EAAE;AACRE,IAAAA,IAAI,EADI,CAAA;AAERG,IAAAA,GAAG,EAAEZ;AAFG;AARqB,CAAlB,CAAf","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport { Platform, StyleSheet, View } from 'react-native';\nimport { Screen, screensEnabled } from 'react-native-screens';\n\ntype Props = {\n  isVisible: boolean;\n  children: React.ReactNode;\n  style?: any;\n};\n\nconst FAR_FAR_AWAY = 3000; // this should be big enough to move the whole view out of its container\n\nexport default class ResourceSavingScene extends React.Component<Props> {\n  render() {\n    if (screensEnabled?.()) {\n      const { isVisible, ...rest } = this.props;\n\n      // @ts-ignore\n      return <Screen active={isVisible ? 1 : 0} {...rest} />;\n    }\n    const { isVisible, children, style, ...rest } = this.props;\n\n    return (\n      <View\n        style={[styles.container, style]}\n        collapsable={false}\n        removeClippedSubviews={\n          // On iOS, set removeClippedSubviews to true only when not focused\n          // This is an workaround for a bug where the clipped view never re-appears\n          Platform.OS === 'ios' ? !isVisible : true\n        }\n        pointerEvents={isVisible ? 'auto' : 'none'}\n        {...rest}\n      >\n        <View style={isVisible ? styles.attached : styles.detached}>\n          {children}\n        </View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  attached: {\n    flex: 1,\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}