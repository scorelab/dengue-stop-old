{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport withNavigation from \"./withNavigation\";\nvar EventNameToPropName = {\n  willFocus: 'onWillFocus',\n  didFocus: 'onDidFocus',\n  willBlur: 'onWillBlur',\n  didBlur: 'onDidBlur'\n};\nvar EventNames = Object.keys(EventNameToPropName);\n\nvar NavigationEvents = function (_React$Component) {\n  _inherits(NavigationEvents, _React$Component);\n\n  function NavigationEvents() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, NavigationEvents);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(NavigationEvents)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"getPropListener\", function (eventName) {\n      return _this.props[EventNameToPropName[eventName]];\n    });\n\n    return _this;\n  }\n\n  _createClass(NavigationEvents, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.subscriptions = {};\n      EventNames.forEach(function (eventName) {\n        _this2.subscriptions[eventName] = _this2.props.navigation.addListener(eventName, function () {\n          var propListener = _this2.getPropListener(eventName);\n\n          return propListener && propListener.apply(void 0, arguments);\n        });\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var _this3 = this;\n\n      EventNames.forEach(function (eventName) {\n        _this3.subscriptions[eventName].remove();\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }]);\n\n  return NavigationEvents;\n}(React.Component);\n\nexport default withNavigation(NavigationEvents);","map":{"version":3,"sources":["NavigationEvents.js"],"names":["EventNameToPropName","willFocus","didFocus","willBlur","didBlur","EventNames","Object","React","eventName","propListener","withNavigation"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,cAAA;AAEA,IAAMA,mBAAmB,GAAG;AAC1BC,EAAAA,SAAS,EADiB,aAAA;AAE1BC,EAAAA,QAAQ,EAFkB,YAAA;AAG1BC,EAAAA,QAAQ,EAHkB,YAAA;AAI1BC,EAAAA,OAAO,EAAE;AAJiB,CAA5B;AAOA,IAAMC,UAAU,GAAGC,MAAM,CAANA,IAAAA,CAAnB,mBAAmBA,CAAnB;;IAEA,gB;;;AAA+C,8BAAA;AAAA;;AAAA;;AAAA;;AAAA,sCAAA,IAAA;AAAA,MAAA,IAAA;AAAA;;AAAA,+IAAA,IAAA;;AAAA,IAAA,eAAA,gCAAA,iBAAA,EAwB3BE,UAAAA,SAAS;AAAA,aAAI,MAAA,KAAA,CAAWR,mBAAmB,CAxBhB,SAwBgB,CAA9B,CAAJ;AAAA,KAxBkB,CAAA;;AAAA;AAAA;;;;wCACzB;AAAA;;AAClB,WAAA,aAAA,GADkB,EAClB;AAKAK,MAAAA,UAAU,CAAVA,OAAAA,CAAmBG,UAAAA,SAAS,EAAI;AAC9B,QAAA,MAAA,CAAA,aAAA,CAAA,SAAA,IAAgC,MAAA,CAAA,KAAA,CAAA,UAAA,CAAA,WAAA,CAAA,SAAA,EAE9B,YAAa;AACX,cAAMC,YAAY,GAAG,MAAA,CAAA,eAAA,CAArB,SAAqB,CAArB;;AACA,iBAAOA,YAAY,IAAIA,YAAvB,MAAuBA,mBAAvB;AAJJ,SAAgC,CAAhC;AADFJ,OAAAA;AASD;;;2CAEsB;AAAA;;AACrBA,MAAAA,UAAU,CAAVA,OAAAA,CAAmBG,UAAAA,SAAS,EAAI;AAC9B,QAAA,MAAA,CAAA,aAAA,CAAA,SAAA,EAAA,MAAA;AADFH,OAAAA;AAGD;;;6BAIQ;AACP,aAAA,IAAA;AACD;;;;EA5B4BE,KAAK,CAApC,S;;AA+BA,eAAeG,cAAc,CAA7B,gBAA6B,CAA7B","sourcesContent":["import React from 'react';\nimport withNavigation from './withNavigation';\n\nconst EventNameToPropName = {\n  willFocus: 'onWillFocus',\n  didFocus: 'onDidFocus',\n  willBlur: 'onWillBlur',\n  didBlur: 'onDidBlur',\n};\n\nconst EventNames = Object.keys(EventNameToPropName);\n\nclass NavigationEvents extends React.Component {\n  componentDidMount() {\n    this.subscriptions = {};\n\n    // We register all navigation listeners on mount to ensure listener stability across re-render\n    // A former implementation was replacing (removing/adding) listeners on all update (if prop provided)\n    // but there were issues (see https://github.com/react-navigation/react-navigation/issues/5058)\n    EventNames.forEach(eventName => {\n      this.subscriptions[eventName] = this.props.navigation.addListener(\n        eventName,\n        (...args) => {\n          const propListener = this.getPropListener(eventName);\n          return propListener && propListener(...args);\n        }\n      );\n    });\n  }\n\n  componentWillUnmount() {\n    EventNames.forEach(eventName => {\n      this.subscriptions[eventName].remove();\n    });\n  }\n\n  getPropListener = eventName => this.props[EventNameToPropName[eventName]];\n\n  render() {\n    return null;\n  }\n}\n\nexport default withNavigation(NavigationEvents);\n"]},"metadata":{},"sourceType":"module"}