{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/satya/Workspace/Projects/react-native-tab-view/src/TouchableItem.tsx\";\nimport * as React from 'react';\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport View from \"react-native-web/dist/exports/View\";\nvar LOLLIPOP = 21;\n\nvar TouchableItem = function (_React$Component) {\n  _inherits(TouchableItem, _React$Component);\n\n  function TouchableItem() {\n    _classCallCheck(this, TouchableItem);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TouchableItem).apply(this, arguments));\n  }\n\n  _createClass(TouchableItem, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          style = _this$props.style,\n          pressOpacity = _this$props.pressOpacity,\n          pressColor = _this$props.pressColor,\n          borderless = _this$props.borderless,\n          children = _this$props.children,\n          rest = _objectWithoutProperties(_this$props, [\"style\", \"pressOpacity\", \"pressColor\", \"borderless\", \"children\"]);\n\n      if (Platform.OS === 'android' && Platform.Version >= LOLLIPOP) {\n        return React.createElement(TouchableNativeFeedback, _extends({}, rest, {\n          background: TouchableNativeFeedback.Ripple(pressColor, borderless),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          }\n        }), React.createElement(View, {\n          style: style,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          }\n        }, React.Children.only(children)));\n      } else {\n        return React.createElement(TouchableOpacity, _extends({}, rest, {\n          style: style,\n          activeOpacity: pressOpacity,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          }\n        }), children);\n      }\n    }\n  }]);\n\n  return TouchableItem;\n}(React.Component);\n\nTouchableItem.defaultProps = {\n  pressColor: 'rgba(255, 255, 255, .4)'\n};\nexport { TouchableItem as default };","map":{"version":3,"sources":["TouchableItem.tsx"],"names":["LOLLIPOP","TouchableItem","React","Component","defaultProps","pressColor","style","pressOpacity","borderless","children","rest","Platform","TouchableNativeFeedback"],"mappings":";;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;;;AAsBA,IAAMA,QAAQ,GAAd,EAAA;;AAEqBC,IAAAA,a;;;;;;;;;;;6BAKV;AAAA,UAAA,WAAA,GAQH,KARG,KAAA;AAAA,UAELK,KAFK,GAAA,WAAA,CAAA,KAAA;AAAA,UAGLC,YAHK,GAAA,WAAA,CAAA,YAAA;AAAA,UAILF,UAJK,GAAA,WAAA,CAAA,UAAA;AAAA,UAKLG,UALK,GAAA,WAAA,CAAA,UAAA;AAAA,UAMLC,QANK,GAAA,WAAA,CAAA,QAAA;AAAA,UAOFC,IAPE,GAAA,wBAAA,CAAA,WAAA,EAAA,CAAA,OAAA,EAAA,cAAA,EAAA,YAAA,EAAA,YAAA,EAAA,UAAA,CAAA,CAAA;;AAUP,UAAIC,QAAQ,CAARA,EAAAA,KAAAA,SAAAA,IAA6BA,QAAQ,CAARA,OAAAA,IAAjC,QAAA,EAA+D;AAC7D,eACE,KAAA,CAAA,aAAA,CAAA,uBAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEE,UAAA,UAAU,EAAEC,uBAAuB,CAAvBA,MAAAA,CAAAA,UAAAA,EAFd,UAEcA,CAFd;AAAA,UAAA,QAAA,EAAA;AAAA,YAAA,QAAA,EAAA,YAAA;AAAA,YAAA,UAAA,EAAA;AAAA;AAAA,SAAA,CAAA,EAIE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,UAAA,KAAK,EAAX,KAAA;AAAA,UAAA,QAAA,EAAA;AAAA,YAAA,QAAA,EAAA,YAAA;AAAA,YAAA,UAAA,EAAA;AAAA;AAAA,SAAA,EAAqBV,KAAK,CAALA,QAAAA,CAAAA,IAAAA,CALzB,QAKyBA,CAArB,CAJF,CADF;AADF,OAAA,MASO;AACL,eACE,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAA4B,UAAA,KAAK,EAAjC,KAAA;AAA0C,UAAA,aAAa,EAAvD,YAAA;AAAA,UAAA,QAAA,EAAA;AAAA,YAAA,QAAA,EAAA,YAAA;AAAA,YAAA,UAAA,EAAA;AAAA;AAAA,SAAA,CAAA,EADF,QACE,CADF;AAMH;;;;;EA/BwCA,KAAK,CAACC,S,CAA5BF;;AAAAA,a,CACZG,YADYH,GACG;AACpBI,EAAAA,UAAU,EADU;AAAA,CADHJ;SAAAA,a","sourcesContent":["import * as React from 'react';\nimport {\n  TouchableNativeFeedback,\n  TouchableOpacity,\n  Platform,\n  View,\n  StyleProp,\n  ViewStyle,\n  ViewProps,\n} from 'react-native';\n\ntype Props = ViewProps & {\n  onPress: () => void;\n  onLongPress?: () => void;\n  delayPressIn?: number;\n  borderless?: boolean;\n  pressColor: string;\n  pressOpacity?: number;\n  children?: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\nconst LOLLIPOP = 21;\n\nexport default class TouchableItem extends React.Component<Props> {\n  static defaultProps = {\n    pressColor: 'rgba(255, 255, 255, .4)',\n  };\n\n  render() {\n    const {\n      style,\n      pressOpacity,\n      pressColor,\n      borderless,\n      children,\n      ...rest\n    } = this.props;\n\n    if (Platform.OS === 'android' && Platform.Version >= LOLLIPOP) {\n      return (\n        <TouchableNativeFeedback\n          {...rest}\n          background={TouchableNativeFeedback.Ripple(pressColor, borderless)}\n        >\n          <View style={style}>{React.Children.only(children)}</View>\n        </TouchableNativeFeedback>\n      );\n    } else {\n      return (\n        <TouchableOpacity {...rest} style={style} activeOpacity={pressOpacity}>\n          {children}\n        </TouchableOpacity>\n      );\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}