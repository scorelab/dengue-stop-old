{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport invariant from \"../utils/invariant\";\nimport getScreenForRouteName from \"./getScreenForRouteName\";\nimport createConfigGetter from \"./createConfigGetter\";\nimport * as NavigationActions from \"../NavigationActions\";\nimport * as SwitchActions from \"./SwitchActions\";\nimport * as StackActions from \"./StackActions\";\nimport validateRouteConfigMap from \"./validateRouteConfigMap\";\nimport { createPathParser } from \"./pathUtils\";\n\nvar defaultActionCreators = function defaultActionCreators() {\n  return {};\n};\n\nexport default (function (routeConfigs) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  validateRouteConfigMap(routeConfigs);\n  var order = config.order || Object.keys(routeConfigs);\n  var getCustomActionCreators = config.getCustomActionCreators || defaultActionCreators;\n  var initialRouteParams = config.initialRouteParams;\n  var initialRouteName = config.initialRouteName || order[0];\n  var backBehavior = config.backBehavior || 'none';\n  var resetOnBlur = config.hasOwnProperty('resetOnBlur') ? config.resetOnBlur : true;\n  var initialRouteIndex = order.indexOf(initialRouteName);\n\n  if (initialRouteIndex === -1) {\n    throw new Error(\"Invalid initialRouteName '\".concat(initialRouteName, \"'.\") + \"Should be one of \".concat(order.map(function (n) {\n      return \"\\\"\".concat(n, \"\\\"\");\n    }).join(', ')));\n  }\n\n  var childRouters = {};\n  order.forEach(function (routeName) {\n    childRouters[routeName] = null;\n    var screen = getScreenForRouteName(routeConfigs, routeName);\n\n    if (screen.router) {\n      childRouters[routeName] = screen.router;\n    }\n  });\n\n  function getParamsForRoute(routeName, params) {\n    var routeConfig = routeConfigs[routeName];\n\n    if (routeConfig && routeConfig.params) {\n      return _objectSpread({}, routeConfig.params, {}, params);\n    } else {\n      return params;\n    }\n  }\n\n  var _createPathParser = createPathParser(childRouters, routeConfigs, config),\n      getPathAndParamsForRoute = _createPathParser.getPathAndParamsForRoute,\n      _getActionForPathAndParams = _createPathParser.getActionForPathAndParams;\n\n  function resetChildRoute(routeName) {\n    var initialParams = routeName === initialRouteName ? initialRouteParams : undefined;\n    var params = getParamsForRoute(routeName, initialParams);\n    var childRouter = childRouters[routeName];\n\n    if (childRouter) {\n      var childAction = NavigationActions.init();\n      return _objectSpread({}, childRouter.getStateForAction(childAction), {\n        key: routeName,\n        routeName: routeName,\n        params: params\n      });\n    }\n\n    return {\n      key: routeName,\n      routeName: routeName,\n      params: params\n    };\n  }\n\n  function getNextState(action, prevState, possibleNextState) {\n    function updateNextStateHistory(prevState, nextState) {\n      if (backBehavior !== 'history' || prevState && nextState && nextState.index === prevState.index) {\n        return nextState;\n      }\n\n      var nextRouteKeyHistory = prevState ? prevState.routeKeyHistory : [];\n\n      if (action.type === NavigationActions.NAVIGATE) {\n        nextRouteKeyHistory = _toConsumableArray(nextRouteKeyHistory);\n        var keyToAdd = nextState.routes[nextState.index].key;\n        nextRouteKeyHistory = nextRouteKeyHistory.filter(function (k) {\n          return k !== keyToAdd;\n        });\n        nextRouteKeyHistory.push(keyToAdd);\n      } else if (action.type === NavigationActions.BACK) {\n        nextRouteKeyHistory = _toConsumableArray(nextRouteKeyHistory);\n        nextRouteKeyHistory.pop();\n      }\n\n      return _objectSpread({}, nextState, {\n        routeKeyHistory: nextRouteKeyHistory\n      });\n    }\n\n    var nextState = possibleNextState;\n\n    if (prevState && possibleNextState && prevState.index !== possibleNextState.index && resetOnBlur) {\n      var prevRouteName = prevState.routes[prevState.index].routeName;\n\n      var nextRoutes = _toConsumableArray(possibleNextState.routes);\n\n      nextRoutes[prevState.index] = resetChildRoute(prevRouteName);\n      nextState = _objectSpread({}, possibleNextState, {\n        routes: nextRoutes\n      });\n    }\n\n    return updateNextStateHistory(prevState, nextState);\n  }\n\n  function getInitialState() {\n    var routes = order.map(resetChildRoute);\n    var initialState = {\n      routes: routes,\n      index: initialRouteIndex,\n      isTransitioning: false\n    };\n\n    if (backBehavior === 'history') {\n      var initialKey = routes[initialRouteIndex].key;\n      initialState['routeKeyHistory'] = [initialKey];\n    }\n\n    return initialState;\n  }\n\n  return {\n    childRouters: childRouters,\n    getActionCreators: function getActionCreators(route, stateKey) {\n      return getCustomActionCreators(route, stateKey);\n    },\n    getStateForAction: function getStateForAction(action, inputState) {\n      var prevState = inputState ? _objectSpread({}, inputState) : inputState;\n      var state = inputState || getInitialState();\n      var activeChildIndex = state.index;\n\n      if (action.type === NavigationActions.INIT) {\n        var params = action.params;\n\n        if (params) {\n          state.routes = state.routes.map(function (route) {\n            return _objectSpread({}, route, {\n              params: _objectSpread({}, route.params, {}, params, {}, route.routeName === initialRouteName ? initialRouteParams : null)\n            });\n          });\n        }\n      }\n\n      if (action.type === SwitchActions.JUMP_TO && (action.key == null || action.key === state.key)) {\n        var _params = action.params;\n        var index = state.routes.findIndex(function (route) {\n          return route.routeName === action.routeName;\n        });\n\n        if (index === -1) {\n          throw new Error(\"There is no route named '\".concat(action.routeName, \"' in the navigator with the key '\").concat(action.key, \"'.\\n\") + \"Must be one of: \".concat(state.routes.map(function (route) {\n            return \"'\".concat(route.routeName, \"'\");\n          }).join(',')));\n        }\n\n        return getNextState(action, prevState, _objectSpread({}, state, {\n          routes: _params ? state.routes.map(function (route, i) {\n            return i === index ? _objectSpread({}, route, {\n              params: _objectSpread({}, route.params, {}, _params)\n            }) : route;\n          }) : state.routes,\n          index: index\n        }));\n      }\n\n      var activeChildLastState = state.routes[state.index];\n      var activeChildRouter = childRouters[order[state.index]];\n\n      if (activeChildRouter) {\n        var activeChildState = activeChildRouter.getStateForAction(action, activeChildLastState);\n\n        if (!activeChildState && inputState) {\n          return null;\n        }\n\n        if (activeChildState && activeChildState !== activeChildLastState) {\n          var routes = _toConsumableArray(state.routes);\n\n          routes[state.index] = activeChildState;\n          return getNextState(action, prevState, _objectSpread({}, state, {\n            routes: routes\n          }));\n        }\n      }\n\n      var isBackEligible = action.key == null || action.key === activeChildLastState.key;\n\n      if (action.type === NavigationActions.BACK) {\n        if (isBackEligible && backBehavior === 'initialRoute') {\n          activeChildIndex = initialRouteIndex;\n        } else if (isBackEligible && backBehavior === 'order') {\n          activeChildIndex = Math.max(0, activeChildIndex - 1);\n        } else if (isBackEligible && backBehavior === 'history' && state.routeKeyHistory.length > 1) {\n            var routeKey = state.routeKeyHistory[state.routeKeyHistory.length - 2];\n            activeChildIndex = order.indexOf(routeKey);\n          }\n      }\n\n      var didNavigate = false;\n\n      if (action.type === NavigationActions.NAVIGATE) {\n        didNavigate = !!order.find(function (childId, i) {\n          if (childId === action.routeName) {\n            activeChildIndex = i;\n            return true;\n          }\n\n          return false;\n        });\n\n        if (didNavigate) {\n          var childState = state.routes[activeChildIndex];\n          var childRouter = childRouters[action.routeName];\n          var newChildState = childState;\n\n          if (action.action && childRouter) {\n            var childStateUpdate = childRouter.getStateForAction(action.action, childState);\n\n            if (childStateUpdate) {\n              newChildState = childStateUpdate;\n            }\n          }\n\n          if (action.params) {\n            newChildState = _objectSpread({}, newChildState, {\n              params: _objectSpread({}, newChildState.params || {}, {}, action.params)\n            });\n          }\n\n          if (newChildState !== childState) {\n            var _routes = _toConsumableArray(state.routes);\n\n            _routes[activeChildIndex] = newChildState;\n\n            var nextState = _objectSpread({}, state, {\n              routes: _routes,\n              index: activeChildIndex\n            });\n\n            return getNextState(action, prevState, nextState);\n          } else if (newChildState === childState && state.index === activeChildIndex && prevState) {\n            return null;\n          }\n        }\n      }\n\n      if (action.type === NavigationActions.SET_PARAMS) {\n        var key = action.key;\n        var lastRoute = state.routes.find(function (route) {\n          return route.key === key;\n        });\n\n        if (lastRoute) {\n          var _params2 = _objectSpread({}, lastRoute.params, {}, action.params);\n\n          var _routes2 = _toConsumableArray(state.routes);\n\n          _routes2[state.routes.indexOf(lastRoute)] = _objectSpread({}, lastRoute, {\n            params: _params2\n          });\n          return getNextState(action, prevState, _objectSpread({}, state, {\n            routes: _routes2\n          }));\n        }\n      }\n\n      if (activeChildIndex !== state.index) {\n        return getNextState(action, prevState, _objectSpread({}, state, {\n          index: activeChildIndex\n        }));\n      } else if (didNavigate && !inputState) {\n        return state;\n      } else if (didNavigate) {\n        return _objectSpread({}, state);\n      }\n\n      var isActionBackOrPop = action.type === NavigationActions.BACK || action.type === StackActions.POP || action.type === StackActions.POP_TO_TOP;\n      var sendActionToInactiveChildren = !isActionBackOrPop || action.type === NavigationActions.BACK && action.key != null;\n\n      if (sendActionToInactiveChildren) {\n        var _index = state.index;\n        var _routes3 = state.routes;\n        order.find(function (childId, i) {\n          var childRouter = childRouters[childId];\n\n          if (i === _index) {\n            return false;\n          }\n\n          var childState = _routes3[i];\n\n          if (childRouter) {\n            childState = childRouter.getStateForAction(action, childState);\n          }\n\n          if (!childState) {\n            _index = i;\n            return true;\n          }\n\n          if (childState !== _routes3[i]) {\n            _routes3 = _toConsumableArray(_routes3);\n            _routes3[i] = childState;\n            _index = i;\n            return true;\n          }\n\n          return false;\n        });\n\n        if (action.preserveFocus) {\n          _index = state.index;\n        }\n\n        if (_index !== state.index || _routes3 !== state.routes) {\n          return getNextState(action, prevState, _objectSpread({}, state, {\n            index: _index,\n            routes: _routes3\n          }));\n        }\n      }\n\n      return state;\n    },\n    getComponentForState: function getComponentForState(state) {\n      var routeName = state.routes[state.index].routeName;\n      invariant(routeName, \"There is no route defined for index \".concat(state.index, \". Check that\\n        that you passed in a navigation state with a valid tab/screen index.\"));\n      var childRouter = childRouters[routeName];\n\n      if (childRouter) {\n        return childRouter.getComponentForState(state.routes[state.index]);\n      }\n\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n    getComponentForRouteName: function getComponentForRouteName(routeName) {\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n    getPathAndParamsForState: function getPathAndParamsForState(state) {\n      var route = state.routes[state.index];\n      return getPathAndParamsForRoute(route);\n    },\n    getActionForPathAndParams: function getActionForPathAndParams(path, params) {\n      return _getActionForPathAndParams(path, params);\n    },\n    getScreenOptions: createConfigGetter(routeConfigs, config.defaultNavigationOptions)\n  };\n});","map":{"version":3,"sources":["SwitchRouter.js"],"names":["defaultActionCreators","config","validateRouteConfigMap","order","Object","getCustomActionCreators","initialRouteParams","initialRouteName","backBehavior","resetOnBlur","initialRouteIndex","n","childRouters","routeName","screen","getScreenForRouteName","routeConfig","routeConfigs","getActionForPathAndParams","createPathParser","initialParams","params","getParamsForRoute","childRouter","childAction","NavigationActions","key","prevState","nextState","nextRouteKeyHistory","action","keyToAdd","k","routeKeyHistory","possibleNextState","prevRouteName","nextRoutes","resetChildRoute","routes","updateNextStateHistory","initialState","index","isTransitioning","initialKey","getActionCreators","getStateForAction","inputState","state","getInitialState","activeChildIndex","route","SwitchActions","getNextState","activeChildLastState","activeChildRouter","activeChildState","isBackEligible","Math","routeKey","didNavigate","childId","childState","newChildState","childStateUpdate","lastRoute","isActionBackOrPop","StackActions","sendActionToInactiveChildren","i","getComponentForState","invariant","getComponentForRouteName","getPathAndParamsForState","getPathAndParamsForRoute","getScreenOptions","createConfigGetter"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,SAAA;AACA,OAAA,qBAAA;AACA,OAAA,kBAAA;AAEA,OAAO,KAAP,iBAAA;AACA,OAAO,KAAP,aAAA;AACA,OAAO,KAAP,YAAA;AACA,OAAA,sBAAA;AACA,SAAA,gBAAA;;AAEA,IAAMA,qBAAqB,GAAG,SAAxBA,qBAAwB;AAAA,SAA9B,EAA8B;AAAA,CAA9B;;AAEA,gBAAe,UAAA,YAAA,EAA+B;AAAA,MAAhBC,MAAgB,uEAA/B,EAA+B;AAE5CC,EAAAA,sBAAsB,CAAtBA,YAAsB,CAAtBA;AAEA,MAAMC,KAAK,GAAGF,MAAM,CAANA,KAAAA,IAAgBG,MAAM,CAANA,IAAAA,CAA9B,YAA8BA,CAA9B;AAEA,MAAMC,uBAAuB,GAC3BJ,MAAM,CAANA,uBAAAA,IADF,qBAAA;AAGA,MAAMK,kBAAkB,GAAGL,MAAM,CAAjC,kBAAA;AACA,MAAMM,gBAAgB,GAAGN,MAAM,CAANA,gBAAAA,IAA2BE,KAAK,CAAzD,CAAyD,CAAzD;AACA,MAAMK,YAAY,GAAGP,MAAM,CAANA,YAAAA,IAArB,MAAA;AACA,MAAMQ,WAAW,GAAGR,MAAM,CAANA,cAAAA,CAAAA,aAAAA,IAChBA,MAAM,CADUA,WAAAA,GAApB,IAAA;AAIA,MAAMS,iBAAiB,GAAGP,KAAK,CAALA,OAAAA,CAA1B,gBAA0BA,CAA1B;;AACA,MAAIO,iBAAiB,KAAK,CAA1B,CAAA,EAA8B;AAC5B,UAAM,IAAA,KAAA,CACJ,6BAAA,MAAA,CAAA,gBAAA,EAAA,IAAA,IAAA,oBAAA,MAAA,CACsBP,KAAK,CAALA,GAAAA,CAAUQ,UAAAA,CAAC;AAAA,aAAA,KAAA,MAAA,CAAA,CAAA,EAAXR,IAAW,CAAA;AAAA,KAAXA,EAAAA,IAAAA,CAFxB,IAEwBA,CADtB,CADI,CAAN;AAID;;AAED,MAAMS,YAAY,GAAlB,EAAA;AACAT,EAAAA,KAAK,CAALA,OAAAA,CAAcU,UAAAA,SAAS,EAAI;AACzBD,IAAAA,YAAY,CAAZA,SAAY,CAAZA,GAAAA,IAAAA;AACA,QAAME,MAAM,GAAGC,qBAAqB,CAAA,YAAA,EAApC,SAAoC,CAApC;;AACA,QAAID,MAAM,CAAV,MAAA,EAAmB;AACjBF,MAAAA,YAAY,CAAZA,SAAY,CAAZA,GAA0BE,MAAM,CAAhCF,MAAAA;AACD;AALHT,GAAAA;;AAQA,WAAA,iBAAA,CAAA,SAAA,EAAA,MAAA,EAA8C;AAC5C,QAAIa,WAAW,GAAGC,YAAY,CAA9B,SAA8B,CAA9B;;AACA,QAAID,WAAW,IAAIA,WAAW,CAA9B,MAAA,EAAuC;AACrC,aAAA,aAAA,CAAA,EAAA,EAAYA,WAAW,CAAvB,MAAA,EAAA,EAAA,EAAA,MAAA,CAAA;AADF,KAAA,MAEO;AACL,aAAA,MAAA;AACD;AACF;;AAxC2C,0BA6CxCG,gBAAgB,CAAA,YAAA,EAAA,YAAA,EAHpB,MAGoB,CA7CwB;AAAA,MA0CtC,wBA1CsC,qBA0CtC,wBA1CsC;AAAA,MA4C1CD,0BA5C0C,qBA4C1CA,yBA5C0C;;AA+C5C,WAAA,eAAA,CAAA,SAAA,EAAoC;AAClC,QAAIE,aAAa,GACfP,SAAS,KAATA,gBAAAA,GAAAA,kBAAAA,GAFgC,SAClC;AAKA,QAAIQ,MAAM,GAAGC,iBAAiB,CAAA,SAAA,EAA9B,aAA8B,CAA9B;AACA,QAAMC,WAAW,GAAGX,YAAY,CAAhC,SAAgC,CAAhC;;AACA,QAAA,WAAA,EAAiB;AACf,UAAMY,WAAW,GAAGC,iBAAiB,CAArC,IAAoBA,EAApB;AACA,aAAA,aAAA,CAAA,EAAA,EACKF,WAAW,CAAXA,iBAAAA,CADL,WACKA,CADL,EAAA;AAEEG,QAAAA,GAAG,EAFL,SAAA;AAGEb,QAAAA,SAHF,EAGEA,SAHF;AAIEQ,QAAAA,MAAAA,EAAAA;AAJF,OAAA,CAAA;AAMD;;AACD,WAAO;AACLK,MAAAA,GAAG,EADE,SAAA;AAELb,MAAAA,SAFK,EAELA,SAFK;AAGLQ,MAAAA,MAAAA,EAAAA;AAHK,KAAP;AAKD;;AAED,WAAA,YAAA,CAAA,MAAA,EAAA,SAAA,EAAA,iBAAA,EAA4D;AAC1D,aAAA,sBAAA,CAAA,SAAA,EAAA,SAAA,EAAsD;AACpD,UACEb,YAAY,KAAZA,SAAAA,IACCmB,SAAS,IAATA,SAAAA,IAA0BC,SAAS,CAATA,KAAAA,KAAoBD,SAAS,CAF1D,KAAA,EAGE;AACA,eAAA,SAAA;AACD;;AACD,UAAIE,mBAAmB,GAAGF,SAAS,GAAGA,SAAS,CAAZ,eAAA,GAAnC,EAAA;;AACA,UAAIG,MAAM,CAANA,IAAAA,KAAgBL,iBAAiB,CAArC,QAAA,EAAgD;AAC9CI,QAAAA,mBAAmB,sBAD2B,mBAC3B,CAAnBA;AACA,YAAME,QAAQ,GAAGH,SAAS,CAATA,MAAAA,CAAiBA,SAAS,CAA1BA,KAAAA,EAAjB,GAAA;AACAC,QAAAA,mBAAmB,GAAGA,mBAAmB,CAAnBA,MAAAA,CAA2BG,UAAAA,CAAC;AAAA,iBAAIA,CAAC,KAHT,QAGI;AAAA,SAA5BH,CAAtBA;AACAA,QAAAA,mBAAmB,CAAnBA,IAAAA,CAAAA,QAAAA;AAJF,OAAA,MAKO,IAAIC,MAAM,CAANA,IAAAA,KAAgBL,iBAAiB,CAArC,IAAA,EAA4C;AACjDI,QAAAA,mBAAmB,sBAD8B,mBAC9B,CAAnBA;AACAA,QAAAA,mBAAmB,CAAnBA,GAAAA;AACD;;AACD,aAAA,aAAA,CAAA,EAAA,EAAA,SAAA,EAAA;AAEEI,QAAAA,eAAe,EAAEJ;AAFnB,OAAA,CAAA;AAID;;AAED,QAAID,SAAS,GAAb,iBAAA;;AACA,QACED,SAAS,IAATA,iBAAAA,IAEAA,SAAS,CAATA,KAAAA,KAAoBO,iBAAiB,CAFrCP,KAAAA,IADF,WAAA,EAKE;AACA,UAAMQ,aAAa,GAAGR,SAAS,CAATA,MAAAA,CAAiBA,SAAS,CAA1BA,KAAAA,EAAtB,SAAA;;AACA,UAAMS,UAAU,sBAAOF,iBAAiB,CAAxC,MAAgB,CAAhB;;AACAE,MAAAA,UAAU,CAACT,SAAS,CAApBS,KAAU,CAAVA,GAA8BC,eAAe,CAA7CD,aAA6C,CAA7CA;AACAR,MAAAA,SAAS,GAAA,aAAA,CAAA,EAAA,EAAA,iBAAA,EAAA;AAEPU,QAAAA,MAAM,EAAEF;AAFD,OAAA,CAATR;AAID;;AACD,WAAOW,sBAAsB,CAAA,SAAA,EAA7B,SAA6B,CAA7B;AACD;;AAED,WAAA,eAAA,GAA2B;AACzB,QAAMD,MAAM,GAAGnC,KAAK,CAALA,GAAAA,CAAf,eAAeA,CAAf;AACA,QAAMqC,YAAY,GAAG;AACnBF,MAAAA,MADmB,EACnBA,MADmB;AAEnBG,MAAAA,KAAK,EAFc,iBAAA;AAGnBC,MAAAA,eAAe,EAAE;AAHE,KAArB;;AAKA,QAAIlC,YAAY,KAAhB,SAAA,EAAgC;AAC9B,UAAMmC,UAAU,GAAGL,MAAM,CAANA,iBAAM,CAANA,CAAnB,GAAA;AACAE,MAAAA,YAAY,CAAZA,iBAAY,CAAZA,GAAkC,CAAlCA,UAAkC,CAAlCA;AACD;;AACD,WAAA,YAAA;AACD;;AAED,SAAO;AACL5B,IAAAA,YADK,EACLA,YADK;AAGLgC,IAAAA,iBAHK,6BAGY,KAHZ,EAGY,QAHZ,EAG8B;AACjC,aAAOvC,uBAAuB,CAAA,KAAA,EAA9B,QAA8B,CAA9B;AAJG,KAAA;AAOLwC,IAAAA,iBAPK,6BAOY,MAPZ,EAOY,UAPZ,EAOiC;AACpC,UAAIlB,SAAS,GAAGmB,UAAU,GAAA,aAAA,CAAA,EAAA,EAAA,UAAA,CAAA,GAA1B,UAAA;AACA,UAAIC,KAAK,GAAGD,UAAU,IAAIE,eAA1B,EAAA;AACA,UAAIC,gBAAgB,GAAGF,KAAK,CAA5B,KAAA;;AAEA,UAAIjB,MAAM,CAANA,IAAAA,KAAgBL,iBAAiB,CAArC,IAAA,EAA4C;AAAA,YAKlCJ,MALkC,GAK1C,MAL0C,CAKlCA,MALkC;;AAM1C,YAAA,MAAA,EAAY;AACV0B,UAAAA,KAAK,CAALA,MAAAA,GAAe,KAAK,CAAL,MAAA,CAAA,GAAA,CAAiBG,UAAAA,KAAK;AAAA,mBAAA,aAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEnC7B,cAAAA,MAAM,EAAA,aAAA,CAAA,EAAA,EACD6B,KAAK,CADJ,MAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,EAGAA,KAAK,CAALA,SAAAA,KAAAA,gBAAAA,GAAAA,kBAAAA,GAHA,IAAA;AAF6B,aAAA,CAAA;AAAA,WAAtB,CAAfH;AAUD;AACF;;AAED,UACEjB,MAAM,CAANA,IAAAA,KAAgBqB,aAAa,CAA7BrB,OAAAA,KACCA,MAAM,CAANA,GAAAA,IAAAA,IAAAA,IAAsBA,MAAM,CAANA,GAAAA,KAAeiB,KAAK,CAF7C,GACEjB,CADF,EAGE;AAAA,YACQT,OADR,GACA,MADA,CACQA,MADR;AAEA,YAAMoB,KAAK,GAAGM,KAAK,CAALA,MAAAA,CAAAA,SAAAA,CACZG,UAAAA,KAAK;AAAA,iBAAIA,KAAK,CAALA,SAAAA,KAAoBpB,MAAM,CADrC,SACO;AAAA,SADOiB,CAAd;;AAIA,YAAIN,KAAK,KAAK,CAAd,CAAA,EAAkB;AAChB,gBAAM,IAAA,KAAA,CACJ,4BAAA,MAAA,CAA4BX,MAAM,CAAlC,SAAA,EAAA,mCAAA,EAAA,MAAA,CAAgFA,MAAM,CAAtF,GAAA,EAAA,MAAA,IAAA,mBAAA,MAAA,CACqBiB,KAAK,CAALA,MAAAA,CAAAA,GAAAA,CACZG,UAAAA,KAAK;AAAA,mBAAA,IAAA,MAAA,CAAQA,KAAK,CAAb,SAAA,EADOH,GACP,CAAA;AAAA,WADOA,EAAAA,IAAAA,CAFvB,GAEuBA,CADrB,CADI,CAAN;AAMD;;AAED,eAAOK,YAAY,CAAA,MAAA,EAAA,SAAA,EAAA,aAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEjBd,UAAAA,MAAM,EAAEjB,OAAM,GACV,KAAK,CAAL,MAAA,CAAA,GAAA,CAAiB,UAAA,KAAA,EAAA,CAAA;AAAA,mBACf,CAAC,KAAD,KAAA,GAAA,aAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAGMA,cAAAA,MAAM,EAAA,aAAA,CAAA,EAAA,EACD6B,KAAK,CADJ,MAAA,EAAA,EAAA,EAAA,OAAA;AAHZ,aAAA,CAAA,GAFQ,KACO;AAAA,WAAjB,CADU,GAYVH,KAAK,CAdQ,MAAA;AAejBN,UAAAA,KAAAA,EAAAA;AAfiB,SAAA,CAAA,CAAnB;AA3CkC;;AA+DpC,UAAMY,oBAAoB,GAAGN,KAAK,CAALA,MAAAA,CAAaA,KAAK,CAA/C,KAA6BA,CAA7B;AACA,UAAMO,iBAAiB,GAAG1C,YAAY,CAACT,KAAK,CAAC4C,KAAK,CAAlD,KAA4C,CAAN,CAAtC;;AACA,UAAA,iBAAA,EAAuB;AACrB,YAAMQ,gBAAgB,GAAGD,iBAAiB,CAAjBA,iBAAAA,CAAAA,MAAAA,EAAzB,oBAAyBA,CAAzB;;AAIA,YAAI,CAAA,gBAAA,IAAJ,UAAA,EAAqC;AACnC,iBAAA,IAAA;AACD;;AACD,YAAIC,gBAAgB,IAAIA,gBAAgB,KAAxC,oBAAA,EAAmE;AACjE,cAAMjB,MAAM,sBAAOS,KAAK,CAAxB,MAAY,CAAZ;;AACAT,UAAAA,MAAM,CAACS,KAAK,CAAZT,KAAM,CAANA,GAAAA,gBAAAA;AACA,iBAAOc,YAAY,CAAA,MAAA,EAAA,SAAA,EAAA,aAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEjBd,YAAAA,MAAAA,EAAAA;AAFiB,WAAA,CAAA,CAAnB;AAID;AAhFiC;;AAqFpC,UAAMkB,cAAc,GAClB1B,MAAM,CAANA,GAAAA,IAAAA,IAAAA,IAAsBA,MAAM,CAANA,GAAAA,KAAeuB,oBAAoB,CAD3D,GAAA;;AAEA,UAAIvB,MAAM,CAANA,IAAAA,KAAgBL,iBAAiB,CAArC,IAAA,EAA4C;AAC1C,YAAI+B,cAAc,IAAIhD,YAAY,KAAlC,cAAA,EAAuD;AACrDyC,UAAAA,gBAAgB,GAAhBA,iBAAAA;AADF,SAAA,MAEO,IAAIO,cAAc,IAAIhD,YAAY,KAAlC,OAAA,EAAgD;AACrDyC,UAAAA,gBAAgB,GAAGQ,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAYR,gBAAgB,GAA/CA,CAAmBQ,CAAnBR;AADK,SAAA,MAKF,IACHO,cAAc,IACdhD,YAAY,KADZgD,SAAAA,IAEAT,KAAK,CAALA,eAAAA,CAAAA,MAAAA,GAHG,CAAA,EAIH;AACA,gBAAMW,QAAQ,GACZX,KAAK,CAALA,eAAAA,CAAsBA,KAAK,CAALA,eAAAA,CAAAA,MAAAA,GADxB,CACEA,CADF;AAEAE,YAAAA,gBAAgB,GAAG9C,KAAK,CAALA,OAAAA,CAAnB8C,QAAmB9C,CAAnB8C;AACD;AACF;;AAED,UAAIU,WAAW,GAAf,KAAA;;AACA,UAAI7B,MAAM,CAANA,IAAAA,KAAgBL,iBAAiB,CAArC,QAAA,EAAgD;AAC9CkC,QAAAA,WAAW,GAAG,CAAC,CAAC,KAAK,CAAL,IAAA,CAAW,UAAA,OAAA,EAAA,CAAA,EAAgB;AACzC,cAAIC,OAAO,KAAK9B,MAAM,CAAtB,SAAA,EAAkC;AAChCmB,YAAAA,gBAAgB,GAAhBA,CAAAA;AACA,mBAAA,IAAA;AACD;;AACD,iBAAA,KAAA;AALFU,SAAgB,CAAhBA;;AAOA,YAAA,WAAA,EAAiB;AACf,cAAME,UAAU,GAAGd,KAAK,CAALA,MAAAA,CAAnB,gBAAmBA,CAAnB;AACA,cAAMxB,WAAW,GAAGX,YAAY,CAACkB,MAAM,CAAvC,SAAgC,CAAhC;AACA,cAAIgC,aAAa,GAAjB,UAAA;;AAEA,cAAIhC,MAAM,CAANA,MAAAA,IAAJ,WAAA,EAAkC;AAChC,gBAAMiC,gBAAgB,GAAGxC,WAAW,CAAXA,iBAAAA,CACvBO,MAAM,CADiBP,MAAAA,EAAzB,UAAyBA,CAAzB;;AAIA,gBAAA,gBAAA,EAAsB;AACpBuC,cAAAA,aAAa,GAAbA,gBAAAA;AACD;AACF;;AAED,cAAIhC,MAAM,CAAV,MAAA,EAAmB;AACjBgC,YAAAA,aAAa,GAAA,aAAA,CAAA,EAAA,EAAA,aAAA,EAAA;AAEXzC,cAAAA,MAAM,EAAA,aAAA,CAAA,EAAA,EACAyC,aAAa,CAAbA,MAAAA,IADA,EAAA,EAAA,EAAA,EAEDhC,MAAM,CAFL,MAAA;AAFK,aAAA,CAAbgC;AAOD;;AAED,cAAIA,aAAa,KAAjB,UAAA,EAAkC;AAChC,gBAAMxB,OAAM,sBAAOS,KAAK,CAAxB,MAAY,CAAZ;;AACAT,YAAAA,OAAM,CAANA,gBAAM,CAANA,GAAAA,aAAAA;;AACA,gBAAMV,SAAS,GAAA,aAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEbU,cAAAA,MAFa,EAEbA,OAFa;AAGbG,cAAAA,KAAK,EAAEQ;AAHM,aAAA,CAAf;;AAKA,mBAAOG,YAAY,CAAA,MAAA,EAAA,SAAA,EAAnB,SAAmB,CAAnB;AARF,WAAA,MASO,IACLU,aAAa,KAAbA,UAAAA,IACAf,KAAK,CAALA,KAAAA,KADAe,gBAAAA,IADK,SAAA,EAIL;AACA,mBAAA,IAAA;AACD;AACF;AACF;;AAED,UAAIhC,MAAM,CAANA,IAAAA,KAAgBL,iBAAiB,CAArC,UAAA,EAAkD;AAChD,YAAMC,GAAG,GAAGI,MAAM,CAAlB,GAAA;AACA,YAAMkC,SAAS,GAAGjB,KAAK,CAALA,MAAAA,CAAAA,IAAAA,CAAkBG,UAAAA,KAAK;AAAA,iBAAIA,KAAK,CAALA,GAAAA,KAA7C,GAAyC;AAAA,SAAvBH,CAAlB;;AACA,YAAA,SAAA,EAAe;AACb,cAAM1B,QAAM,GAAA,aAAA,CAAA,EAAA,EACP2C,SAAS,CADF,MAAA,EAAA,EAAA,EAEPlC,MAAM,CAFX,MAAY,CAAZ;;AAIA,cAAMQ,QAAM,sBAAOS,KAAK,CAAxB,MAAY,CAAZ;;AACAT,UAAAA,QAAM,CAACS,KAAK,CAALA,MAAAA,CAAAA,OAAAA,CAAPT,SAAOS,CAAD,CAANT,GAAAA,aAAAA,CAAAA,EAAAA,EAAAA,SAAAA,EAAAA;AAEEjB,YAAAA,MAAAA,EAAAA;AAFFiB,WAAAA,CAAAA;AAIA,iBAAOc,YAAY,CAAA,MAAA,EAAA,SAAA,EAAA,aAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEjBd,YAAAA,MAAAA,EAAAA;AAFiB,WAAA,CAAA,CAAnB;AAID;AACF;;AAED,UAAIW,gBAAgB,KAAKF,KAAK,CAA9B,KAAA,EAAsC;AACpC,eAAOK,YAAY,CAAA,MAAA,EAAA,SAAA,EAAA,aAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEjBX,UAAAA,KAAK,EAAEQ;AAFU,SAAA,CAAA,CAAnB;AADF,OAAA,MAKO,IAAIU,WAAW,IAAI,CAAnB,UAAA,EAAgC;AACrC,eAAA,KAAA;AADK,OAAA,MAEA,IAAA,WAAA,EAAiB;AACtB,eAAA,aAAA,CAAA,EAAA,EAAA,KAAA,CAAA;AACD;;AAED,UAAMM,iBAAiB,GACrBnC,MAAM,CAANA,IAAAA,KAAgBL,iBAAiB,CAAjCK,IAAAA,IACAA,MAAM,CAANA,IAAAA,KAAgBoC,YAAY,CAD5BpC,GAAAA,IAEAA,MAAM,CAANA,IAAAA,KAAgBoC,YAAY,CAH9B,UAAA;AAIA,UAAMC,4BAA4B,GAChC,CAAA,iBAAA,IACCrC,MAAM,CAANA,IAAAA,KAAgBL,iBAAiB,CAAjCK,IAAAA,IAA0CA,MAAM,CAANA,GAAAA,IApMT,IAkMpC;;AAOA,UAAA,4BAAA,EAAkC;AAChC,YAAIW,MAAK,GAAGM,KAAK,CAAjB,KAAA;AACA,YAAIT,QAAM,GAAGS,KAAK,CAAlB,MAAA;AACA5C,QAAAA,KAAK,CAALA,IAAAA,CAAW,UAAA,OAAA,EAAA,CAAA,EAAgB;AACzB,cAAMoB,WAAW,GAAGX,YAAY,CAAhC,OAAgC,CAAhC;;AACA,cAAIwD,CAAC,KAAL,MAAA,EAAiB;AACf,mBAAA,KAAA;AACD;;AACD,cAAIP,UAAU,GAAGvB,QAAM,CAAvB,CAAuB,CAAvB;;AACA,cAAA,WAAA,EAAiB;AACfuB,YAAAA,UAAU,GAAGtC,WAAW,CAAXA,iBAAAA,CAAAA,MAAAA,EAAbsC,UAAatC,CAAbsC;AACD;;AACD,cAAI,CAAJ,UAAA,EAAiB;AACfpB,YAAAA,MAAK,GAALA,CAAAA;AACA,mBAAA,IAAA;AACD;;AACD,cAAIoB,UAAU,KAAKvB,QAAM,CAAzB,CAAyB,CAAzB,EAA8B;AAC5BA,YAAAA,QAAM,sBAANA,QAAM,CAANA;AACAA,YAAAA,QAAM,CAANA,CAAM,CAANA,GAAAA,UAAAA;AACAG,YAAAA,MAAK,GAALA,CAAAA;AACA,mBAAA,IAAA;AACD;;AACD,iBAAA,KAAA;AAtB8B,SAGhCtC;;AAwBA,YAAI2B,MAAM,CAAV,aAAA,EAA0B;AACxBW,UAAAA,MAAK,GAAGM,KAAK,CAAbN,KAAAA;AACD;;AAED,YAAIA,MAAK,KAAKM,KAAK,CAAfN,KAAAA,IAAyBH,QAAM,KAAKS,KAAK,CAA7C,MAAA,EAAsD;AACpD,iBAAOK,YAAY,CAAA,MAAA,EAAA,SAAA,EAAA,aAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEjBX,YAAAA,KAFiB,EAEjBA,MAFiB;AAGjBH,YAAAA,MAAAA,EAAAA;AAHiB,WAAA,CAAA,CAAnB;AAKD;AACF;;AAED,aAAA,KAAA;AAxPG,KAAA;AA2PL+B,IAAAA,oBA3PK,gCA2Pe,KA3Pf,EA2PuB;AAC1B,UAAMxD,SAAS,GAAGkC,KAAK,CAALA,MAAAA,CAAaA,KAAK,CAAlBA,KAAAA,EAAlB,SAAA;AACAuB,MAAAA,SAAS,CAAA,SAAA,EAAA,uCAAA,MAAA,CAEgCvB,KAAK,CAFrC,KAAA,EAATuB,4FAAS,CAAA,CAATA;AAKA,UAAM/C,WAAW,GAAGX,YAAY,CAAhC,SAAgC,CAAhC;;AACA,UAAA,WAAA,EAAiB;AACf,eAAOW,WAAW,CAAXA,oBAAAA,CAAiCwB,KAAK,CAALA,MAAAA,CAAaA,KAAK,CAA1D,KAAwCA,CAAjCxB,CAAP;AACD;;AACD,aAAOR,qBAAqB,CAAA,YAAA,EAA5B,SAA4B,CAA5B;AAtQG,KAAA;AAyQLwD,IAAAA,wBAzQK,oCAyQmB,SAzQnB,EAyQ+B;AAClC,aAAOxD,qBAAqB,CAAA,YAAA,EAA5B,SAA4B,CAA5B;AA1QG,KAAA;AA6QLyD,IAAAA,wBA7QK,oCA6QmB,KA7QnB,EA6Q2B;AAC9B,UAAMtB,KAAK,GAAGH,KAAK,CAALA,MAAAA,CAAaA,KAAK,CAAhC,KAAcA,CAAd;AACA,aAAO0B,wBAAwB,CAA/B,KAA+B,CAA/B;AA/QG,KAAA;AAkRLvD,IAAAA,yBAlRK,qCAkRoB,IAlRpB,EAkRoB,MAlRpB,EAkRmC;AACtC,aAAOA,0BAAyB,CAAA,IAAA,EAAhC,MAAgC,CAAhC;AAnRG,KAAA;AAsRLwD,IAAAA,gBAAgB,EAAEC,kBAAkB,CAAA,YAAA,EAElC1E,MAAM,CAF4B,wBAAA;AAtR/B,GAAP;AA/HF,CAAA","sourcesContent":["import invariant from '../utils/invariant';\nimport getScreenForRouteName from './getScreenForRouteName';\nimport createConfigGetter from './createConfigGetter';\n\nimport * as NavigationActions from '../NavigationActions';\nimport * as SwitchActions from './SwitchActions';\nimport * as StackActions from './StackActions';\nimport validateRouteConfigMap from './validateRouteConfigMap';\nimport { createPathParser } from './pathUtils';\n\nconst defaultActionCreators = () => ({});\n\nexport default (routeConfigs, config = {}) => {\n  // Fail fast on invalid route definitions\n  validateRouteConfigMap(routeConfigs);\n\n  const order = config.order || Object.keys(routeConfigs);\n\n  const getCustomActionCreators =\n    config.getCustomActionCreators || defaultActionCreators;\n\n  const initialRouteParams = config.initialRouteParams;\n  const initialRouteName = config.initialRouteName || order[0];\n  const backBehavior = config.backBehavior || 'none';\n  const resetOnBlur = config.hasOwnProperty('resetOnBlur')\n    ? config.resetOnBlur\n    : true;\n\n  const initialRouteIndex = order.indexOf(initialRouteName);\n  if (initialRouteIndex === -1) {\n    throw new Error(\n      `Invalid initialRouteName '${initialRouteName}'.` +\n        `Should be one of ${order.map(n => `\"${n}\"`).join(', ')}`\n    );\n  }\n\n  const childRouters = {};\n  order.forEach(routeName => {\n    childRouters[routeName] = null;\n    const screen = getScreenForRouteName(routeConfigs, routeName);\n    if (screen.router) {\n      childRouters[routeName] = screen.router;\n    }\n  });\n\n  function getParamsForRoute(routeName, params) {\n    let routeConfig = routeConfigs[routeName];\n    if (routeConfig && routeConfig.params) {\n      return { ...routeConfig.params, ...params };\n    } else {\n      return params;\n    }\n  }\n\n  const {\n    getPathAndParamsForRoute,\n    getActionForPathAndParams,\n  } = createPathParser(childRouters, routeConfigs, config);\n\n  function resetChildRoute(routeName) {\n    let initialParams =\n      routeName === initialRouteName ? initialRouteParams : undefined;\n    // note(brentvatne): merging initialRouteParams *on top* of default params\n    // on the route seems incorrect but it's consistent with existing behavior\n    // in stackrouter\n    let params = getParamsForRoute(routeName, initialParams);\n    const childRouter = childRouters[routeName];\n    if (childRouter) {\n      const childAction = NavigationActions.init();\n      return {\n        ...childRouter.getStateForAction(childAction),\n        key: routeName,\n        routeName,\n        params,\n      };\n    }\n    return {\n      key: routeName,\n      routeName,\n      params,\n    };\n  }\n\n  function getNextState(action, prevState, possibleNextState) {\n    function updateNextStateHistory(prevState, nextState) {\n      if (\n        backBehavior !== 'history' ||\n        (prevState && nextState && nextState.index === prevState.index)\n      ) {\n        return nextState;\n      }\n      let nextRouteKeyHistory = prevState ? prevState.routeKeyHistory : [];\n      if (action.type === NavigationActions.NAVIGATE) {\n        nextRouteKeyHistory = [...nextRouteKeyHistory]; // copy\n        const keyToAdd = nextState.routes[nextState.index].key;\n        nextRouteKeyHistory = nextRouteKeyHistory.filter(k => k !== keyToAdd); // dedup\n        nextRouteKeyHistory.push(keyToAdd);\n      } else if (action.type === NavigationActions.BACK) {\n        nextRouteKeyHistory = [...nextRouteKeyHistory]; // copy\n        nextRouteKeyHistory.pop();\n      }\n      return {\n        ...nextState,\n        routeKeyHistory: nextRouteKeyHistory,\n      };\n    }\n\n    let nextState = possibleNextState;\n    if (\n      prevState &&\n      possibleNextState &&\n      prevState.index !== possibleNextState.index &&\n      resetOnBlur\n    ) {\n      const prevRouteName = prevState.routes[prevState.index].routeName;\n      const nextRoutes = [...possibleNextState.routes];\n      nextRoutes[prevState.index] = resetChildRoute(prevRouteName);\n      nextState = {\n        ...possibleNextState,\n        routes: nextRoutes,\n      };\n    }\n    return updateNextStateHistory(prevState, nextState);\n  }\n\n  function getInitialState() {\n    const routes = order.map(resetChildRoute);\n    const initialState = {\n      routes,\n      index: initialRouteIndex,\n      isTransitioning: false,\n    };\n    if (backBehavior === 'history') {\n      const initialKey = routes[initialRouteIndex].key;\n      initialState['routeKeyHistory'] = [initialKey];\n    }\n    return initialState;\n  }\n\n  return {\n    childRouters,\n\n    getActionCreators(route, stateKey) {\n      return getCustomActionCreators(route, stateKey);\n    },\n\n    getStateForAction(action, inputState) {\n      let prevState = inputState ? { ...inputState } : inputState;\n      let state = inputState || getInitialState();\n      let activeChildIndex = state.index;\n\n      if (action.type === NavigationActions.INIT) {\n        // NOTE(brentvatne): this seems weird... why are we merging these\n        // params into child routes?\n        // ---------------------------------------------------------------\n        // Merge any params from the action into all the child routes\n        const { params } = action;\n        if (params) {\n          state.routes = state.routes.map(route => ({\n            ...route,\n            params: {\n              ...route.params,\n              ...params,\n              ...(route.routeName === initialRouteName\n                ? initialRouteParams\n                : null),\n            },\n          }));\n        }\n      }\n\n      if (\n        action.type === SwitchActions.JUMP_TO &&\n        (action.key == null || action.key === state.key)\n      ) {\n        const { params } = action;\n        const index = state.routes.findIndex(\n          route => route.routeName === action.routeName\n        );\n\n        if (index === -1) {\n          throw new Error(\n            `There is no route named '${action.routeName}' in the navigator with the key '${action.key}'.\\n` +\n              `Must be one of: ${state.routes\n                .map(route => `'${route.routeName}'`)\n                .join(',')}`\n          );\n        }\n\n        return getNextState(action, prevState, {\n          ...state,\n          routes: params\n            ? state.routes.map((route, i) =>\n                i === index\n                  ? {\n                      ...route,\n                      params: {\n                        ...route.params,\n                        ...params,\n                      },\n                    }\n                  : route\n              )\n            : state.routes,\n          index,\n        });\n      }\n\n      // Let the current child handle it\n      const activeChildLastState = state.routes[state.index];\n      const activeChildRouter = childRouters[order[state.index]];\n      if (activeChildRouter) {\n        const activeChildState = activeChildRouter.getStateForAction(\n          action,\n          activeChildLastState\n        );\n        if (!activeChildState && inputState) {\n          return null;\n        }\n        if (activeChildState && activeChildState !== activeChildLastState) {\n          const routes = [...state.routes];\n          routes[state.index] = activeChildState;\n          return getNextState(action, prevState, {\n            ...state,\n            routes,\n          });\n        }\n      }\n\n      // Handle tab changing. Do this after letting the current tab try to\n      // handle the action, to allow inner children to change first\n      const isBackEligible =\n        action.key == null || action.key === activeChildLastState.key;\n      if (action.type === NavigationActions.BACK) {\n        if (isBackEligible && backBehavior === 'initialRoute') {\n          activeChildIndex = initialRouteIndex;\n        } else if (isBackEligible && backBehavior === 'order') {\n          activeChildIndex = Math.max(0, activeChildIndex - 1);\n        }\n        // The history contains current route, so we can only go back\n        // if there is more than one item in the history\n        else if (\n          isBackEligible &&\n          backBehavior === 'history' &&\n          state.routeKeyHistory.length > 1\n        ) {\n          const routeKey =\n            state.routeKeyHistory[state.routeKeyHistory.length - 2];\n          activeChildIndex = order.indexOf(routeKey);\n        }\n      }\n\n      let didNavigate = false;\n      if (action.type === NavigationActions.NAVIGATE) {\n        didNavigate = !!order.find((childId, i) => {\n          if (childId === action.routeName) {\n            activeChildIndex = i;\n            return true;\n          }\n          return false;\n        });\n        if (didNavigate) {\n          const childState = state.routes[activeChildIndex];\n          const childRouter = childRouters[action.routeName];\n          let newChildState = childState;\n\n          if (action.action && childRouter) {\n            const childStateUpdate = childRouter.getStateForAction(\n              action.action,\n              childState\n            );\n            if (childStateUpdate) {\n              newChildState = childStateUpdate;\n            }\n          }\n\n          if (action.params) {\n            newChildState = {\n              ...newChildState,\n              params: {\n                ...(newChildState.params || {}),\n                ...action.params,\n              },\n            };\n          }\n\n          if (newChildState !== childState) {\n            const routes = [...state.routes];\n            routes[activeChildIndex] = newChildState;\n            const nextState = {\n              ...state,\n              routes,\n              index: activeChildIndex,\n            };\n            return getNextState(action, prevState, nextState);\n          } else if (\n            newChildState === childState &&\n            state.index === activeChildIndex &&\n            prevState\n          ) {\n            return null;\n          }\n        }\n      }\n\n      if (action.type === NavigationActions.SET_PARAMS) {\n        const key = action.key;\n        const lastRoute = state.routes.find(route => route.key === key);\n        if (lastRoute) {\n          const params = {\n            ...lastRoute.params,\n            ...action.params,\n          };\n          const routes = [...state.routes];\n          routes[state.routes.indexOf(lastRoute)] = {\n            ...lastRoute,\n            params,\n          };\n          return getNextState(action, prevState, {\n            ...state,\n            routes,\n          });\n        }\n      }\n\n      if (activeChildIndex !== state.index) {\n        return getNextState(action, prevState, {\n          ...state,\n          index: activeChildIndex,\n        });\n      } else if (didNavigate && !inputState) {\n        return state;\n      } else if (didNavigate) {\n        return { ...state };\n      }\n\n      const isActionBackOrPop =\n        action.type === NavigationActions.BACK ||\n        action.type === StackActions.POP ||\n        action.type === StackActions.POP_TO_TOP;\n      const sendActionToInactiveChildren =\n        !isActionBackOrPop ||\n        (action.type === NavigationActions.BACK && action.key != null);\n\n      // Let other children handle it and switch to the first child that returns a new state\n      // Do not do this for StackActions.POP or NavigationActions.BACK actions without a key:\n      // it would be unintuitive for these actions to switch to another tab just because that tab had a Stack that could accept a back action\n      if (sendActionToInactiveChildren) {\n        let index = state.index;\n        let routes = state.routes;\n        order.find((childId, i) => {\n          const childRouter = childRouters[childId];\n          if (i === index) {\n            return false;\n          }\n          let childState = routes[i];\n          if (childRouter) {\n            childState = childRouter.getStateForAction(action, childState);\n          }\n          if (!childState) {\n            index = i;\n            return true;\n          }\n          if (childState !== routes[i]) {\n            routes = [...routes];\n            routes[i] = childState;\n            index = i;\n            return true;\n          }\n          return false;\n        });\n\n        // Nested routers can be updated after switching children with actions such as SET_PARAMS\n        // and COMPLETE_TRANSITION.\n        if (action.preserveFocus) {\n          index = state.index;\n        }\n\n        if (index !== state.index || routes !== state.routes) {\n          return getNextState(action, prevState, {\n            ...state,\n            index,\n            routes,\n          });\n        }\n      }\n\n      return state;\n    },\n\n    getComponentForState(state) {\n      const routeName = state.routes[state.index].routeName;\n      invariant(\n        routeName,\n        `There is no route defined for index ${state.index}. Check that\n        that you passed in a navigation state with a valid tab/screen index.`\n      );\n      const childRouter = childRouters[routeName];\n      if (childRouter) {\n        return childRouter.getComponentForState(state.routes[state.index]);\n      }\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getComponentForRouteName(routeName) {\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getPathAndParamsForState(state) {\n      const route = state.routes[state.index];\n      return getPathAndParamsForRoute(route);\n    },\n\n    getActionForPathAndParams(path, params) {\n      return getActionForPathAndParams(path, params);\n    },\n\n    getScreenOptions: createConfigGetter(\n      routeConfigs,\n      config.defaultNavigationOptions\n    ),\n  };\n};\n"]},"metadata":{},"sourceType":"module"}