{"ast":null,"code":"var id = 0;\nvar requests = {};\nvar ImageLoader = {\n  abort: function abort(requestId) {\n    var image = requests[\"\" + requestId];\n\n    if (image) {\n      image.onerror = image.onload = image = null;\n      delete requests[\"\" + requestId];\n    }\n  },\n  getSize: function getSize(uri, success, failure) {\n    var complete = false;\n    var interval = setInterval(callback, 16);\n    var requestId = ImageLoader.load(uri, callback, errorCallback);\n\n    function callback() {\n      var image = requests[\"\" + requestId];\n\n      if (image) {\n        var naturalHeight = image.naturalHeight,\n            naturalWidth = image.naturalWidth;\n\n        if (naturalHeight && naturalWidth) {\n          success(naturalWidth, naturalHeight);\n          complete = true;\n        }\n      }\n\n      if (complete) {\n        ImageLoader.abort(requestId);\n        clearInterval(interval);\n      }\n    }\n\n    function errorCallback() {\n      if (typeof failure === 'function') {\n        failure();\n      }\n\n      ImageLoader.abort(requestId);\n      clearInterval(interval);\n    }\n  },\n  load: function load(uri, onLoad, onError) {\n    id += 1;\n    var image = new window.Image();\n    image.onerror = onError;\n\n    image.onload = function (e) {\n      var onDecode = function onDecode() {\n        return onLoad(e);\n      };\n\n      if (typeof image.decode === 'function') {\n        image.decode().then(onDecode, onDecode);\n      } else {\n        setTimeout(onDecode, 0);\n      }\n    };\n\n    image.src = uri;\n    requests[\"\" + id] = image;\n    return id;\n  },\n  prefetch: function prefetch(uri) {\n    return new Promise(function (resolve, reject) {\n      ImageLoader.load(uri, resolve, reject);\n    });\n  }\n};\nexport default ImageLoader;","map":{"version":3,"sources":["C:/Users/Thivagar/Documents/GSOC Work/dengue-stop/node_modules/react-native-web/dist/modules/ImageLoader/index.js"],"names":["id","requests","ImageLoader","abort","requestId","image","onerror","onload","getSize","uri","success","failure","complete","interval","setInterval","callback","load","errorCallback","naturalHeight","naturalWidth","clearInterval","onLoad","onError","window","Image","e","onDecode","decode","then","setTimeout","src","prefetch","Promise","resolve","reject"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nvar id = 0;\nvar requests = {};\nvar ImageLoader = {\n  abort: function abort(requestId) {\n    var image = requests[\"\" + requestId];\n\n    if (image) {\n      image.onerror = image.onload = image = null;\n      delete requests[\"\" + requestId];\n    }\n  },\n  getSize: function getSize(uri, success, failure) {\n    var complete = false;\n    var interval = setInterval(callback, 16);\n    var requestId = ImageLoader.load(uri, callback, errorCallback);\n\n    function callback() {\n      var image = requests[\"\" + requestId];\n\n      if (image) {\n        var naturalHeight = image.naturalHeight,\n            naturalWidth = image.naturalWidth;\n\n        if (naturalHeight && naturalWidth) {\n          success(naturalWidth, naturalHeight);\n          complete = true;\n        }\n      }\n\n      if (complete) {\n        ImageLoader.abort(requestId);\n        clearInterval(interval);\n      }\n    }\n\n    function errorCallback() {\n      if (typeof failure === 'function') {\n        failure();\n      }\n\n      ImageLoader.abort(requestId);\n      clearInterval(interval);\n    }\n  },\n  load: function load(uri, onLoad, onError) {\n    id += 1;\n    var image = new window.Image();\n    image.onerror = onError;\n\n    image.onload = function (e) {\n      // avoid blocking the main thread\n      var onDecode = function onDecode() {\n        return onLoad(e);\n      };\n\n      if (typeof image.decode === 'function') {\n        // Safari currently throws exceptions when decoding svgs.\n        // We want to catch that error and allow the load handler\n        // to be forwarded to the onLoad handler in this case\n        image.decode().then(onDecode, onDecode);\n      } else {\n        setTimeout(onDecode, 0);\n      }\n    };\n\n    image.src = uri;\n    requests[\"\" + id] = image;\n    return id;\n  },\n  prefetch: function prefetch(uri) {\n    return new Promise(function (resolve, reject) {\n      ImageLoader.load(uri, resolve, reject);\n    });\n  }\n};\nexport default ImageLoader;"]},"metadata":{},"sourceType":"module"}