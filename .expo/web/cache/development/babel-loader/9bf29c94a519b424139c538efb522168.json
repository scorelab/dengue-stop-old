{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport ReanimatedModule from \"../ReanimatedModule\";\nimport AnimatedNode from \"./AnimatedNode\";\nimport InternalAnimatedValue from \"./AnimatedValue\";\nimport { createAnimatedAlways } from \"./AnimatedAlways\";\nimport invariant from 'fbjs/lib/invariant';\nimport createEventObjectProxyPolyfill from \"./createEventObjectProxyPolyfill\";\n\nfunction sanitizeArgMapping(argMapping) {\n  var eventMappings = [];\n  var alwaysNodes = [];\n\n  var getNode = function getNode(node) {\n    if (Platform.OS === 'web') {\n      return node;\n    }\n\n    return node.__nodeID;\n  };\n\n  var traverse = function traverse(value, path) {\n    if (value instanceof InternalAnimatedValue) {\n      eventMappings.push(path.concat(getNode(value)));\n    } else if (typeof value === 'object' && value.__val) {\n      eventMappings.push(path.concat(getNode(value.__val)));\n    } else if (typeof value === 'function') {\n      var node = new InternalAnimatedValue(0);\n      alwaysNodes.push(createAnimatedAlways(value(node)));\n      eventMappings.push(path.concat(getNode(node)));\n    } else if (typeof value === 'object') {\n      for (var key in value) {\n        traverse(value[key], path.concat(key));\n      }\n    }\n  };\n\n  invariant(argMapping[0] && argMapping[0].nativeEvent, 'Native driven events only support animated values contained inside `nativeEvent`.');\n  var ev = argMapping[0].nativeEvent;\n\n  if (typeof ev === 'object') {\n    traverse(ev, []);\n  } else if (typeof ev === 'function') {\n    var proxyHandler = {\n      get: function get(target, name) {\n        if (name === '__isProxy') {\n          return true;\n        }\n\n        if (!target[name] && name !== '__val') {\n          target[name] = new Proxy({}, proxyHandler);\n        }\n\n        return target[name];\n      },\n      set: function set(target, prop, value) {\n        if (prop === '__val') {\n          target[prop] = value;\n        }\n      }\n    };\n    var proxy = typeof Proxy === 'function' ? new Proxy({}, proxyHandler) : createEventObjectProxyPolyfill();\n    alwaysNodes.push(createAnimatedAlways(ev(proxy)));\n    traverse(proxy, []);\n  }\n\n  return {\n    eventMappings: eventMappings,\n    alwaysNodes: alwaysNodes\n  };\n}\n\nvar AnimatedEvent = function (_AnimatedNode) {\n  _inherits(AnimatedEvent, _AnimatedNode);\n\n  function AnimatedEvent(argMapping) {\n    var _this;\n\n    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, AnimatedEvent);\n\n    var _sanitizeArgMapping = sanitizeArgMapping(argMapping),\n        eventMappings = _sanitizeArgMapping.eventMappings,\n        alwaysNodes = _sanitizeArgMapping.alwaysNodes;\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedEvent).call(this, {\n      type: 'event',\n      argMapping: eventMappings\n    }));\n    _this.__isNative = true;\n    _this._alwaysNodes = alwaysNodes;\n\n    if (Platform.OS === 'web') {\n      _this._argMapping = eventMappings;\n\n      _this.__getHandler = function () {\n        return function (_ref) {\n          var nativeEvent = _ref.nativeEvent;\n\n          for (var _iterator = _this._argMapping, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n            var _ref4;\n\n            if (_isArray) {\n              if (_i >= _iterator.length) break;\n              _ref4 = _iterator[_i++];\n            } else {\n              _i = _iterator.next();\n              if (_i.done) break;\n              _ref4 = _i.value;\n            }\n\n            var _ref5 = _ref4;\n\n            var _ref3 = _slicedToArray(_ref5, 2);\n\n            var _key = _ref3[0];\n            var _value = _ref3[1];\n            if (_key in nativeEvent) _value.setValue(nativeEvent[_key]);\n          }\n        };\n      };\n    }\n\n    return _this;\n  }\n\n  _createClass(AnimatedEvent, [{\n    key: \"attachEvent\",\n    value: function attachEvent(viewRef, eventName) {\n      for (var i = 0; i < this._alwaysNodes.length; i++) {\n        this._alwaysNodes[i].__attach();\n      }\n\n      this.__attach();\n\n      var viewTag = findNodeHandle(viewRef);\n      ReanimatedModule.attachEvent(viewTag, eventName, this.__nodeID);\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      return 0;\n    }\n  }, {\n    key: \"detachEvent\",\n    value: function detachEvent(viewRef, eventName) {\n      for (var i = 0; i < this._alwaysNodes.length; i++) {\n        this._alwaysNodes[i].isNativelyInitialized() && this._alwaysNodes[i].__detach();\n      }\n\n      var viewTag = findNodeHandle(viewRef);\n      ReanimatedModule.detachEvent(viewTag, eventName, this.__nodeID);\n\n      this.__detach();\n    }\n  }]);\n\n  return AnimatedEvent;\n}(AnimatedNode);\n\nexport { AnimatedEvent as default };\nexport function createAnimatedEvent(argMapping, config) {\n  return new AnimatedEvent(argMapping, config);\n}","map":{"version":3,"sources":["C:/Users/Thivagar/Documents/GSOC Work/dengue-stop/node_modules/react-native-reanimated/src/core/AnimatedEvent.js"],"names":["ReanimatedModule","AnimatedNode","InternalAnimatedValue","createAnimatedAlways","invariant","createEventObjectProxyPolyfill","sanitizeArgMapping","argMapping","eventMappings","alwaysNodes","getNode","node","Platform","OS","__nodeID","traverse","value","path","push","concat","__val","key","nativeEvent","ev","proxyHandler","get","target","name","Proxy","set","prop","proxy","AnimatedEvent","config","type","__isNative","_alwaysNodes","_argMapping","__getHandler","setValue","viewRef","eventName","i","length","__attach","viewTag","findNodeHandle","attachEvent","isNativelyInitialized","__detach","detachEvent","createAnimatedEvent"],"mappings":"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","sourcesContent":["import { Platform, findNodeHandle } from 'react-native';\nimport ReanimatedModule from '../ReanimatedModule';\n\nimport AnimatedNode from './AnimatedNode';\nimport InternalAnimatedValue from './AnimatedValue';\nimport { createAnimatedAlways } from './AnimatedAlways';\n\nimport invariant from 'fbjs/lib/invariant';\nimport createEventObjectProxyPolyfill from './createEventObjectProxyPolyfill';\n\nfunction sanitizeArgMapping(argMapping) {\n  // Find animated values in `argMapping` and create an array representing their\n  // key path inside the `nativeEvent` object. Ex.: ['contentOffset', 'x'].\n  const eventMappings = [];\n  const alwaysNodes = [];\n\n  const getNode = node => {\n    if (Platform.OS === 'web') {\n      return node;\n    }\n    return node.__nodeID;\n  };\n\n  const traverse = (value, path) => {\n    if (value instanceof InternalAnimatedValue) {\n      eventMappings.push(path.concat(getNode(value)));\n    } else if (typeof value === 'object' && value.__val) {\n      eventMappings.push(path.concat(getNode(value.__val)));\n    } else if (typeof value === 'function') {\n      const node = new InternalAnimatedValue(0);\n      alwaysNodes.push(createAnimatedAlways(value(node)));\n      eventMappings.push(path.concat(getNode(node)));\n    } else if (typeof value === 'object') {\n      for (const key in value) {\n        traverse(value[key], path.concat(key));\n      }\n    }\n  };\n\n  invariant(\n    argMapping[0] && argMapping[0].nativeEvent,\n    'Native driven events only support animated values contained inside `nativeEvent`.'\n  );\n\n  // Assume that the event containing `nativeEvent` is always the first argument.\n  const ev = argMapping[0].nativeEvent;\n  if (typeof ev === 'object') {\n    traverse(ev, []);\n  } else if (typeof ev === 'function') {\n    const proxyHandler = {\n      get: function(target, name) {\n        if (name === '__isProxy') {\n          return true;\n        }\n        if (!target[name] && name !== '__val') {\n          target[name] = new Proxy({}, proxyHandler);\n        }\n        return target[name];\n      },\n      set: function(target, prop, value) {\n        if (prop === '__val') {\n          target[prop] = value;\n        }\n      },\n    };\n\n    const proxy =\n      typeof Proxy === 'function'\n        ? new Proxy({}, proxyHandler)\n        : createEventObjectProxyPolyfill();\n    alwaysNodes.push(createAnimatedAlways(ev(proxy)));\n    traverse(proxy, []);\n  }\n\n  return { eventMappings, alwaysNodes };\n}\n\nexport default class AnimatedEvent extends AnimatedNode {\n  constructor(argMapping, config = {}) {\n    const { eventMappings, alwaysNodes } = sanitizeArgMapping(argMapping);\n    super({ type: 'event', argMapping: eventMappings });\n    this._alwaysNodes = alwaysNodes;\n    if (Platform.OS === 'web') {\n      this._argMapping = eventMappings;\n      this.__getHandler = () => {\n        return ({ nativeEvent }) => {\n          for (const [key, value] of this._argMapping) {\n            if (key in nativeEvent) value.setValue(nativeEvent[key]);\n          }\n        };\n      };\n    }\n  }\n\n  // The below field is a temporary workaround to make AnimatedEvent object be recognized\n  // as Animated.event event callback and therefore filtered out from being send over the\n  // bridge which was causing the object to be frozen in JS.\n  __isNative = true;\n\n  attachEvent(viewRef, eventName) {\n    for (let i = 0; i < this._alwaysNodes.length; i++) {\n      this._alwaysNodes[i].__attach();\n    }\n    this.__attach();\n    const viewTag = findNodeHandle(viewRef);\n    ReanimatedModule.attachEvent(viewTag, eventName, this.__nodeID);\n  }\n\n  __onEvaluate() {\n    return 0;\n  }\n\n  detachEvent(viewRef, eventName) {\n    for (let i = 0; i < this._alwaysNodes.length; i++) {\n      this._alwaysNodes[i].isNativelyInitialized() &&\n        this._alwaysNodes[i].__detach();\n    }\n    const viewTag = findNodeHandle(viewRef);\n    ReanimatedModule.detachEvent(viewTag, eventName, this.__nodeID);\n    this.__detach();\n  }\n}\n\nexport function createAnimatedEvent(argMapping, config) {\n  return new AnimatedEvent(argMapping, config);\n}\n"]},"metadata":{},"sourceType":"module"}