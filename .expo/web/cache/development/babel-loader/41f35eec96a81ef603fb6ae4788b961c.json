{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/satya/Workspace/Callstack/react-navigation-stack/src/views/TouchableItem.tsx\";\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport BorderlessButton from \"./BorderlessButton\";\nvar ANDROID_VERSION_LOLLIPOP = 21;\n\nvar TouchableItem = function (_React$Component) {\n  _inherits(TouchableItem, _React$Component);\n\n  function TouchableItem() {\n    _classCallCheck(this, TouchableItem);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TouchableItem).apply(this, arguments));\n  }\n\n  _createClass(TouchableItem, [{\n    key: \"render\",\n    value: function render() {\n      if (Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP) {\n        var _this$props = this.props,\n            style = _this$props.style,\n            rest = _objectWithoutProperties(_this$props, [\"style\"]);\n\n        return React.createElement(TouchableNativeFeedback, _extends({}, rest, {\n          style: null,\n          background: TouchableNativeFeedback.Ripple(this.props.pressColor, this.props.borderless),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          }\n        }), React.createElement(View, {\n          style: style,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          }\n        }, React.Children.only(this.props.children)));\n      } else if (Platform.OS === 'ios') {\n        return React.createElement(BorderlessButton, _extends({\n          hitSlop: {\n            top: 10,\n            bottom: 10,\n            right: 10,\n            left: 10\n          },\n          disallowInterruption: true,\n          enabled: !this.props.disabled\n        }, this.props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          }\n        }), this.props.children);\n      } else {\n        return React.createElement(TouchableOpacity, _extends({}, this.props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          }\n        }), this.props.children);\n      }\n    }\n  }]);\n\n  return TouchableItem;\n}(React.Component);\n\nTouchableItem.defaultProps = {\n  borderless: false,\n  pressColor: 'rgba(0, 0, 0, .32)'\n};\nexport { TouchableItem as default };","map":{"version":3,"sources":["TouchableItem.tsx"],"names":["ANDROID_VERSION_LOLLIPOP","TouchableItem","React","Component","defaultProps","borderless","pressColor","Platform","style","rest","TouchableNativeFeedback","top","bottom","right","left"],"mappings":";;;;;;;;AASA,OAAO,KAAP,KAAA,MAAA,OAAA;;;;;AASA,OAAA,gBAAA;AAUA,IAAMA,wBAAwB,GAA9B,EAAA;;AAEqBC,IAAAA,a;;;;;;;;;;;6BAMV;AASP,UACEM,QAAQ,CAARA,EAAAA,KAAAA,SAAAA,IACAA,QAAQ,CAARA,OAAAA,IAFF,wBAAA,EAGE;AAAA,YAAA,WAAA,GAC2B,KAD3B,KAAA;AAAA,YACQC,KADR,GAAA,WAAA,CAAA,KAAA;AAAA,YACkBC,IADlB,GAAA,wBAAA,CAAA,WAAA,EAAA,CAAA,OAAA,CAAA,CAAA;;AAEA,eACE,KAAA,CAAA,aAAA,CAAA,uBAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEE,UAAA,KAAK,EAFP,IAAA;AAGE,UAAA,UAAU,EAAEC,uBAAuB,CAAvBA,MAAAA,CACV,KAAA,KAAA,CADUA,UAAAA,EAEV,KAAA,KAAA,CALJ,UAGcA,CAHd;AAAA,UAAA,QAAA,EAAA;AAAA,YAAA,QAAA,EAAA,YAAA;AAAA,YAAA,UAAA,EAAA;AAAA;AAAA,SAAA,CAAA,EAQE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,UAAA,KAAK,EAAX,KAAA;AAAA,UAAA,QAAA,EAAA;AAAA,YAAA,QAAA,EAAA,YAAA;AAAA,YAAA,UAAA,EAAA;AAAA;AAAA,SAAA,EAAqBR,KAAK,CAALA,QAAAA,CAAAA,IAAAA,CAAoB,KAAA,KAAA,CAT7C,QASyBA,CAArB,CARF,CADF;AALF,OAAA,MAiBO,IAAIK,QAAQ,CAARA,EAAAA,KAAJ,KAAA,EAA2B;AAChC,eACE,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAA,QAAA,CAAA;AACE,UAAA,OAAO,EAAE;AAAEI,YAAAA,GAAG,EAAL,EAAA;AAAWC,YAAAA,MAAM,EAAjB,EAAA;AAAuBC,YAAAA,KAAK,EAA5B,EAAA;AAAkCC,YAAAA,IAAI,EADjD;AACW,WADX;AAEE,UAAA,oBAAoB,EAFtB,IAAA;AAGE,UAAA,OAAO,EAAE,CAAC,KAAA,KAAA,CAHZ;AAAA,SAAA,EAIM,KAJN,KAAA,EAAA;AAAA,UAAA,QAAA,EAAA;AAAA,YAAA,QAAA,EAAA,YAAA;AAAA,YAAA,UAAA,EAAA;AAAA;AAAA,SAAA,CAAA,EAMG,KAAA,KAAA,CAPL,QACE,CADF;AADK,OAAA,MAWA;AACL,eACE,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAA,QAAA,CAAA,EAAA,EAAsB,KAAtB,KAAA,EAAA;AAAA,UAAA,QAAA,EAAA;AAAA,YAAA,QAAA,EAAA,YAAA;AAAA,YAAA,UAAA,EAAA;AAAA;AAAA,SAAA,CAAA,EACG,KAAA,KAAA,CAFL,QACE,CADF;AAMH;;;;;EAlDwCZ,KAAK,CAACC,S,CAA5BF;;AAAAA,a,CACZG,YADYH,GACG;AACpBI,EAAAA,UAAU,EADU,KAAA;AAEpBC,EAAAA,UAAU,EAFU;AAAA,CADHL;SAAAA,a","sourcesContent":["/**\n * TouchableItem renders a touchable that looks native on both iOS and Android.\n *\n * It provides an abstraction on top of TouchableNativeFeedback and\n * TouchableOpacity.\n *\n * On iOS you can pass the props of TouchableOpacity, on Android pass the props\n * of TouchableNativeFeedback.\n */\nimport * as React from 'react';\nimport {\n  Platform,\n  TouchableNativeFeedback,\n  TouchableOpacity,\n  View,\n  ViewProps,\n} from 'react-native';\n\nimport BorderlessButton from './BorderlessButton';\n\ntype Props = ViewProps & {\n  pressColor: string;\n  disabled?: boolean;\n  borderless?: boolean;\n  delayPressIn?: number;\n  onPress?: () => void;\n};\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\n\nexport default class TouchableItem extends React.Component<Props> {\n  static defaultProps = {\n    borderless: false,\n    pressColor: 'rgba(0, 0, 0, .32)',\n  };\n\n  render() {\n    /*\n     * TouchableNativeFeedback.Ripple causes a crash on old Android versions,\n     * therefore only enable it on Android Lollipop and above.\n     *\n     * All touchables on Android should have the ripple effect according to\n     * platform design guidelines.\n     * We need to pass the background prop to specify a borderless ripple effect.\n     */\n    if (\n      Platform.OS === 'android' &&\n      Platform.Version >= ANDROID_VERSION_LOLLIPOP\n    ) {\n      const { style, ...rest } = this.props;\n      return (\n        <TouchableNativeFeedback\n          {...rest}\n          style={null}\n          background={TouchableNativeFeedback.Ripple(\n            this.props.pressColor,\n            this.props.borderless\n          )}\n        >\n          <View style={style}>{React.Children.only(this.props.children)}</View>\n        </TouchableNativeFeedback>\n      );\n    } else if (Platform.OS === 'ios') {\n      return (\n        <BorderlessButton\n          hitSlop={{ top: 10, bottom: 10, right: 10, left: 10 }}\n          disallowInterruption\n          enabled={!this.props.disabled}\n          {...this.props}\n        >\n          {this.props.children}\n        </BorderlessButton>\n      );\n    } else {\n      return (\n        <TouchableOpacity {...this.props}>\n          {this.props.children}\n        </TouchableOpacity>\n      );\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}