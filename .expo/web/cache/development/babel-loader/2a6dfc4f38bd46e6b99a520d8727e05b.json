{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport { val } from \"../val\";\nimport AnimatedNode from \"./AnimatedNode\";\nimport { createAnimatedBlock as block, adapt } from \"./AnimatedBlock\";\nimport { createAnimatedCall as call } from \"./AnimatedCall\";\n\nvar AnimatedDebug = function (_AnimatedNode) {\n  _inherits(AnimatedDebug, _AnimatedNode);\n\n  function AnimatedDebug(message, value) {\n    var _this;\n\n    _classCallCheck(this, AnimatedDebug);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedDebug).call(this, {\n      type: 'debug',\n      message: message,\n      value: value.__nodeID\n    }, [value]));\n    _this._message = message;\n    _this._value = value;\n    return _this;\n  }\n\n  _createClass(AnimatedDebug, [{\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      var value = val(this._value);\n      console.log(this._message, value);\n      return value;\n    }\n  }]);\n\n  return AnimatedDebug;\n}(AnimatedNode);\n\nexport function createAnimatedDebug(message, value) {\n  if (__DEV__) {\n    var runningInRemoteDebugger = typeof atob !== 'undefined';\n    var runningInExpoShell = global.Expo && global.Expo.Constants.appOwnership !== 'standalone';\n\n    if (runningInRemoteDebugger || runningInExpoShell) {\n      return block([call([value], function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 1),\n            a = _ref2[0];\n\n        return console.log(message + \" \" + a);\n      }), value]);\n    } else {\n      return new AnimatedDebug(message, adapt(value));\n    }\n  }\n\n  return value;\n}","map":{"version":3,"sources":["C:/Users/Thivagar/Documents/GSOC Work/dengue-stop/node_modules/react-native-reanimated/src/core/AnimatedDebug.js"],"names":["val","AnimatedNode","createAnimatedBlock","block","adapt","createAnimatedCall","call","AnimatedDebug","message","value","type","__nodeID","_message","_value","console","log","createAnimatedDebug","__DEV__","runningInRemoteDebugger","atob","runningInExpoShell","global","Expo","Constants","appOwnership","a"],"mappings":";;;;;;AAAA,SAASA,GAAT;AACA,OAAOC,YAAP;AACA,SAASC,mBAAmB,IAAIC,KAAhC,EAAuCC,KAAvC;AACA,SAASC,kBAAkB,IAAIC,IAA/B;;IAEMC,a;;;AAIJ,yBAAYC,OAAZ,EAAqBC,KAArB,EAA4B;AAAA;;AAAA;;AAC1B,uFAAM;AAAEC,MAAAA,IAAI,EAAE,OAAR;AAAiBF,MAAAA,OAAO,EAAPA,OAAjB;AAA0BC,MAAAA,KAAK,EAAEA,KAAK,CAACE;AAAvC,KAAN,EAAyD,CAACF,KAAD,CAAzD;AACA,UAAKG,QAAL,GAAgBJ,OAAhB;AACA,UAAKK,MAAL,GAAcJ,KAAd;AAH0B;AAI3B;;;;mCAEc;AACb,UAAMA,KAAK,GAAGT,GAAG,CAAC,KAAKa,MAAN,CAAjB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKH,QAAjB,EAA2BH,KAA3B;AACA,aAAOA,KAAP;AACD;;;;EAdyBR,Y;;AAiB5B,OAAO,SAASe,mBAAT,CAA6BR,OAA7B,EAAsCC,KAAtC,EAA6C;AAClD,MAAIQ,OAAJ,EAAa;AACX,QAAMC,uBAAuB,GAAG,OAAOC,IAAP,KAAgB,WAAhD;AAIA,QAAMC,kBAAkB,GACtBC,MAAM,CAACC,IAAP,IAAeD,MAAM,CAACC,IAAP,CAAYC,SAAZ,CAAsBC,YAAtB,KAAuC,YADxD;;AAGA,QAAIN,uBAAuB,IAAIE,kBAA/B,EAAmD;AAGjD,aAAOjB,KAAK,CAAC,CACXG,IAAI,CAAC,CAACG,KAAD,CAAD,EAAU;AAAA;AAAA,YAAEgB,CAAF;;AAAA,eAASX,OAAO,CAACC,GAAR,CAAeP,OAAf,SAA0BiB,CAA1B,CAAT;AAAA,OAAV,CADO,EAEXhB,KAFW,CAAD,CAAZ;AAID,KAPD,MAOO;AACL,aAAO,IAAIF,aAAJ,CAAkBC,OAAlB,EAA2BJ,KAAK,CAACK,KAAD,CAAhC,CAAP;AACD;AACF;;AAED,SAAOA,KAAP;AACD","sourcesContent":["import { val } from '../val';\nimport AnimatedNode from './AnimatedNode';\nimport { createAnimatedBlock as block, adapt } from './AnimatedBlock';\nimport { createAnimatedCall as call } from './AnimatedCall';\n\nclass AnimatedDebug extends AnimatedNode {\n  _message;\n  _value;\n\n  constructor(message, value) {\n    super({ type: 'debug', message, value: value.__nodeID }, [value]);\n    this._message = message;\n    this._value = value;\n  }\n\n  __onEvaluate() {\n    const value = val(this._value);\n    console.log(this._message, value);\n    return value;\n  }\n}\n\nexport function createAnimatedDebug(message, value) {\n  if (__DEV__) {\n    const runningInRemoteDebugger = typeof atob !== 'undefined';\n    // hack to detect if app is running in remote debugger\n    // https://stackoverflow.com/questions/39022216\n\n    const runningInExpoShell =\n      global.Expo && global.Expo.Constants.appOwnership !== 'standalone';\n\n    if (runningInRemoteDebugger || runningInExpoShell) {\n      // When running in expo or remote debugger we use JS console.log to output variables\n      // otherwise we output to the native console using native debug node\n      return block([\n        call([value], ([a]) => console.log(`${message} ${a}`)),\n        value,\n      ]);\n    } else {\n      return new AnimatedDebug(message, adapt(value));\n    }\n  }\n  // Debugging is disabled in PROD\n  return value;\n}\n"]},"metadata":{},"sourceType":"module"}